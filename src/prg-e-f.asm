;
; Bank E & Bank F
; ===============
;
; What's inside: Lots of game logic.
;
;   - DPCM data
;   - Joypad input reading
;   - PPU update routines
;   - Game initialization routines
;   - Title card display routines
;   - Area initialization routines
;   - Music cue routines
;   - Character select (sprite data, palettes, logic)
;   - Bonus chance (sprite data, palettes, logic)
;   - Game Over / Continue screen
;   - Pause screen
;   - Health logic
;   - Bottomless pit death logic
;   - Bounding box data for collisions
;   - and more!
;

; .segment BANKE
; * =  $C000

;
; PCM Data
;
DPCMSampleData:
DPCMSampleData_ItemPull:
      .BYTE $55,$2D,$55,$55,$D5,$54,$55,$55,$55,$55,$AB,$54,$55,$AD,$B6
      .BYTE $FF,$3F,$00,$00,$80,$FE,$FF,$03,$78,$00,$00,$00,$FC,$FF,$FF,$1F,$F8,$0F ; $0F
      .BYTE $00,$00,$80,$FF,$FF,$FF,$03,$FF,$09,$00,$00,$A0,$FF,$FF,$FF,$FF,$00,$F6 ; $21
      .BYTE $03,$00,$00,$00,$FF,$FF,$FF,$FF,$01,$00,$FF,$09,$00,$00,$00,$EC,$FF,$FF,$FF,$FF ; $33
      .BYTE $0F,$00,$E8,$2E,$02,$00,$80,$02,$D8,$FF,$FF,$FF,$FB,$FF,$07,$00,$00,$DA,$5E ; $47
      .BYTE $00,$00,$00,$1C,$E8,$F5,$FF,$FF,$FF,$F3,$FF,$5E,$00,$00,$80,$9E,$3F ; $5A
      .BYTE $01,$00,$00,$A0,$13,$FC,$F5,$FF,$FF,$FF,$0F,$FF,$AB,$0B,$00,$00,$00,$C0 ; $6B
      .BYTE $FF,$7F,$22,$00,$00,$28,$F8,$13,$FD,$BB,$FF,$BF,$FA,$FF,$C0,$0F ; $7D
      .BYTE $FE,$07,$3F,$02,$00,$00,$00,$C0,$FF,$FF,$27,$0A,$00,$38,$00,$F4,$83,$FE,$17 ; $8D
      .BYTE $F8,$7F,$ED,$DB,$7F,$B1,$FF,$7F,$00,$F8,$00,$FC,$3F,$00,$7E,$04,$00 ; $A0
      .BYTE $00,$E8,$04,$00,$E0,$FF,$FF,$FF,$F7,$43,$52,$09,$00,$F8,$4F,$00,$E8,$FF ; $B1
      .BYTE $01,$FB,$FF,$02,$E0,$FE,$FF,$62,$B5,$AB,$DD,$57,$80,$FD,$FE,$1F ; $C3
      .BYTE $00,$B0,$02,$00,$FE,$FF,$00,$00,$FD,$05,$01,$42,$05,$80,$FE,$2F,$00,$00,$F8,$FF ; $D3
      .BYTE $FF,$FF,$FF,$A2,$ED,$0F,$42,$AA,$24,$02,$00,$FE,$FF,$00,$00,$FE,$FF ; $E7
      .BYTE $5F,$00,$FF,$7F,$00,$D0,$FE,$5F,$54,$DB,$AA,$ED,$2B,$01,$ED,$FE ; $F8
      .BYTE $FF,$00,$00,$AC,$00,$F0,$FF,$07,$00,$FC,$03,$01,$48,$00,$F0,$BF,$00,$00,$E8,$FF ; $108
      .BYTE $FF,$FF,$FF,$3F,$12,$9A,$44,$00,$E8,$3F,$00,$C0,$FF,$1F,$F8,$FF ; $11C
      .BYTE $03,$C0,$FF,$4B,$DB,$B5,$ED,$13,$A9,$FF,$3F,$00,$94,$00,$FE,$1F ; $12C
      .BYTE $40,$2F,$00,$04,$00,$9C,$00,$80,$FF,$FF,$FF,$BF,$12,$00,$E8,$04,$B0,$1F ; $13C
      .BYTE $F8,$7F,$40,$FF,$D7,$6D,$FF,$8B,$EE,$FF,$80,$16,$D8,$3F,$E8 ; $14E
      .BYTE $05,$00,$00,$00,$80,$FF,$FF,$2F,$11,$80,$00,$6C,$E8,$2F,$F4,$DF,$F6 ; $15D
      .BYTE $FF,$EA,$7F,$EC,$E8,$3F,$5D,$00,$00,$00,$C0,$FF,$5F,$22,$00,$00,$10 ; $16E
      .BYTE $7F,$E0,$6F,$BF,$7F,$FF,$77,$E9,$DF,$0F,$00,$00,$80,$7E,$5F,$01,$00 ; $17F
      .BYTE $80,$0E,$6C,$FF,$BF,$FF,$BF,$FE,$5F,$00,$00,$40,$FF,$45,$00,$00,$48 ; $190
      .BYTE $B0,$FB,$FE,$FF,$FF,$FF,$8B,$00,$00,$BC,$2F,$00,$00,$10,$B0,$EE,$FF ; $1A1
      .BYTE $FF,$FF,$FF,$09,$00,$60,$5F,$00,$00,$00,$AC,$FB,$FF,$FF,$FF,$5F,$00,$C0 ; $1B2
      .BYTE $3E,$02,$00,$00,$54,$FF,$FF,$FF,$FF,$0B,$00,$FA,$00,$00,$00,$B8,$FF,$FF,$FF ; $1C4
      .BYTE $FF,$00,$A0,$0F,$00,$00,$80,$FF,$FF,$FF,$3F,$80,$6E,$00,$00,$00,$FB,$FF ; $1D7
      .BYTE $FF,$FF,$00,$BD,$00,$00,$00,$FF,$FF,$FF,$07,$F0,$03,$00,$00,$EC,$FF,$FF,$1F ; $1E9
      .BYTE $F8,$01,$00,$00,$F6,$FF,$FF,$81,$9F,$00,$00,$60,$FF,$FF,$1F,$FA,$00,$00 ; $1FC
      .BYTE $C0,$FF,$FF,$87,$7E,$00,$00,$A0,$FF,$FF,$C9,$0B,$00,$00,$FD,$FF,$2F ; $20E
      .BYTE $FE,$00,$00,$E0,$FF,$7F,$E2,$07,$00,$00,$FF,$FF,$E3,$07,$00,$80,$FF,$FF ; $21F
      .BYTE $E3,$07,$00,$00,$FF,$FF,$E3,$03,$00,$E0,$FF,$7F,$6C,$00,$00,$E8,$FF,$AF ; $231
      .BYTE $1F,$00,$00,$FE,$FF,$F9,$03,$00,$B0,$FF,$AF,$0E,$00,$C0,$FF,$FF,$F8,$00 ; $243
      .BYTE $00,$F8,$FF,$E3,$07,$00,$E0,$FF,$8F,$1F,$00,$80,$FF,$3F,$7E,$00,$00,$FE ; $255
      .BYTE $BF,$3B,$00,$00,$FF,$FF,$1E,$00,$80,$FF,$BF,$4E,$00,$C0,$FF,$AF,$07 ; $267
      .BYTE $00,$E0,$FF,$F7,$01,$00,$FA,$FF,$DC,$00,$00,$FF,$7F,$1E,$00,$A0,$FF,$EF ; $278
      .BYTE $01,$00,$FA,$7F,$9D,$00,$A0,$FF,$EF,$01,$00,$FA,$FF,$0E,$00,$F0,$FF,$3B ; $28A
      .BYTE $01,$00,$FF,$BF,$03,$00,$FE,$5F,$17,$00,$E8,$FF,$5E,$00,$D0,$FF,$57,$00 ; $29C
      .BYTE $A0,$FF,$DF,$01,$00,$FF,$AF,$03,$00,$FE,$5F,$27,$00,$FC,$BF,$0E,$00,$F8 ; $2AE
      .BYTE $FF,$8E,$00,$F0,$FF,$3A,$00,$E0,$FF,$0F,$00,$F8,$FF,$16,$00,$F8,$7F ; $2C0
      .BYTE $27,$00,$EC,$FF,$05,$00,$FA,$FF,$03,$00,$FE,$FF,$00,$80,$FF,$6F,$01,$80 ; $2D1
      .BYTE $FF,$3F,$00,$E0,$FF,$0F,$00,$F6,$BF,$05,$00,$FE,$7F,$01,$EC,$03,$FE,$01,$FB ; $2E3
      .BYTE $01,$FE,$40,$7F,$00,$7F,$81,$BF,$C0,$4F,$00,$DA,$D6,$B6,$D5,$AA ; $2F6
      .BYTE $55,$AB,$AA,$4A,$AB,$AA,$4A,$5B,$D5,$AE,$02,$00,$F6,$FF,$01,$00,$E8 ; $306
      .BYTE $B6,$BF,$25,$AA,$6A,$57,$D5,$76,$13,$C9,$ED,$FF,$00,$E0,$03,$D4 ; $317
      .BYTE $FF,$22,$D0,$97,$04,$49,$00,$7B,$01,$80,$FF,$FF,$EF,$2B,$25,$02,$3B ; $327
      .BYTE $00,$FD,$45,$FF,$01,$DD,$B5,$6D,$5F,$FB,$0B,$1F,$FA,$13,$2F,$40 ; $338
      .BYTE $00,$04,$D0,$FF,$BB,$24,$40,$04,$8A,$BD,$E8,$B6,$EE,$D7,$7F,$BC ; $348
      .BYTE $F8,$C7,$13,$04,$00,$00,$D0,$BB,$B7,$DB,$DA,$AA,$AB,$5A,$6A,$55 ; $358
      .BYTE $A5,$A9,$A5,$2A,$55,$55,$55,$AA,$AA,$4A,$55,$55,$55,$AA,$AA ; $368
      .BYTE $AA,$52,$53,$55,$55,$55,$55,$55,$55 ; $377
DPCMSampleDataEnd_ItemPull:

DPCMSampleData_BossHurt:
      .BYTE $95,$55,$55,$A9,$55,$55 ; $380
      .BYTE $69,$55,$55,$55,$FB,$7F,$02,$00,$F0,$EF,$17,$F0,$02,$00,$B0,$FF,$FF ; $386
      .BYTE $81,$0F,$00,$C0,$FD,$FF,$0F,$7E,$00,$00,$BE,$FF,$7F,$E0,$23,$00,$60 ; $397
      .BYTE $FF,$FF,$03,$3F,$00,$00,$FB,$FF,$1F,$D8,$01,$00,$D8,$FE,$FF,$C2,$0E,$00 ; $3A8
      .BYTE $C0,$FE,$FF,$27,$7A,$00,$00,$BA,$FF,$3F,$D1,$09,$00,$A0,$FF,$FF,$85 ; $3BA
      .BYTE $17,$00,$80,$FD,$FF,$0F,$7C,$02,$00,$E8,$FF,$7F,$A1,$13,$00,$A0,$FF ; $3CB
      .BYTE $FF,$13,$9D,$00,$00,$FA,$FF,$5F,$D8,$0A,$00,$C0,$FF,$FF,$07,$2B,$00,$80 ; $3DC
      .BYTE $FE,$FF,$2F,$74,$01,$00,$B8,$FF,$FF,$81,$0B,$00,$A0,$FF,$FF,$07,$6E ; $3EE
      .BYTE $00,$00,$FE,$FF,$5F,$E0,$05,$00,$E0,$FB,$FF,$83,$1B,$00,$80,$FB,$FF ; $3FF
      .BYTE $1F,$F8,$00,$00,$F8,$FF,$FF,$C0,$0E,$00,$C0,$FE,$FF,$07,$7E,$00,$00,$BA ; $410
      .BYTE $FF,$BF,$B0,$03,$00,$A0,$FF,$FF,$8B,$96,$00,$00,$FE,$FF,$5F,$E8,$02 ; $422
      .BYTE $00,$E0,$FF,$FF,$03,$2F,$00,$00,$FB,$FF,$1F,$7A,$01,$00,$E0,$FF,$FF,$D0 ; $433
      .BYTE $07,$00,$80,$FE,$FF,$47,$2F,$00,$00,$FA,$FF,$3F,$7A,$01,$00,$C0,$FF,$FF ; $445
      .BYTE $07,$7D,$04,$00,$E0,$FF,$FF,$83,$3B,$00,$00,$E8,$FE,$FF,$27,$05,$00,$00,$F6 ; $457
      .BYTE $FF,$FF,$F0,$17,$00,$80,$FE,$FF,$3F,$E8,$02,$00,$00,$FB,$FF,$FF,$90 ; $46A
      .BYTE $00,$00,$F8,$FF,$FF,$E8,$0F,$00,$00,$FE,$FF,$2F,$4A,$00,$00,$FE,$FF,$2F ; $47B
      .BYTE $3E,$01,$00,$80,$FF,$FF,$CF,$02,$00,$80,$FF,$FF,$FF,$15,$00,$00,$E0,$FF ; $48D
      .BYTE $7F,$95,$00,$0A,$E0,$FF,$7F,$5E,$03,$00,$00,$FF,$FF,$E2,$07,$00,$F4,$FF ; $49F
      .BYTE $7F,$94,$00,$00,$F0,$FF,$FF,$6F,$00,$00,$80,$FF,$7F,$FC,$00,$00,$FC,$FF ; $4B1
      .BYTE $8F,$0B,$00,$00,$FE,$FF,$FF,$8B,$00,$00,$E0,$FF,$8F,$9F,$00,$80,$FD,$FF ; $4C3
      .BYTE $8F,$03,$00,$80,$FE,$FF,$FF,$13,$00,$00,$EC,$FF,$81,$1F,$00,$A0,$FF ; $4D5
      .BYTE $FF,$79,$00,$00,$A0,$FF,$FF,$7F,$00,$00,$F0,$FF,$FF,$0B,$00,$80,$FE,$1F ; $4E6
      .BYTE $3F,$00,$00,$FA,$FF,$E3,$07,$00,$E0,$FF,$FF,$17,$00,$00,$FC,$FF,$FB,$01 ; $4F8
      .BYTE $00,$F0,$FD,$EF,$5E,$00,$00,$F0,$FF,$FF,$0F,$00,$00,$FE,$5F,$3F,$00,$00,$F8 ; $50A
      .BYTE $FF,$FF,$00,$00,$E0,$FF,$FF,$0D,$00,$00,$FC,$FF,$FF,$03,$00,$80,$FF,$FF ; $51D
      .BYTE $7F,$00,$00,$F0,$FF,$E8,$0F,$00,$C0,$FF,$1F,$F8,$01,$00,$F8,$FF,$FF,$02 ; $52F
      .BYTE $00,$80,$FF,$FF,$9F,$00,$00,$7C,$FF,$F7,$03,$00,$00,$FC,$FF,$FF,$03,$00,$A0 ; $541
      .BYTE $FF,$E7,$0F,$00,$C0,$FE,$FF,$17,$00,$00,$F8,$FF,$9F,$03,$00,$00,$FF,$FF ; $554
      .BYTE $FF,$02,$00,$80,$FF,$FF,$9F,$00,$00,$EC,$FF,$FB,$03,$00,$80,$FF,$3F,$7E ; $566
      .BYTE $00,$00,$FE,$FF,$EF,$00,$00,$80,$FE,$FF,$FF,$00,$00,$C0,$FF,$FF,$3F,$00 ; $578
      .BYTE $00,$F8,$FF,$FE,$00,$00,$E0,$FF,$7F,$1E,$00,$00,$FC,$FF,$7F,$00,$00,$80 ; $58A
      .BYTE $FF,$FF,$7F,$00,$00,$F0,$FF,$FF,$0F,$00,$00,$FE,$1F,$FF,$01,$00,$E8,$FF ; $59C
      .BYTE $0B,$3F,$00,$00,$FF,$FF,$5F,$00,$00,$E0,$FF,$BF,$1F,$00,$00,$FD,$FF,$FF ; $5AE
      .BYTE $02,$00,$C0,$FF,$C7,$7F,$00,$00,$F8,$FF,$E2,$0F,$00,$C0,$FF,$FF,$2A,$00 ; $5C0
      .BYTE $00,$F8,$FF,$EF,$00,$00,$80,$FF,$FF,$FF,$00,$00,$E0,$FF,$FF,$1F,$00,$00 ; $5D2
      .BYTE $FC,$FF,$7E,$02,$00,$F0,$FF,$E7,$0F,$00,$80,$FE,$FF,$3D,$00,$00,$F8,$FF ; $5E4
      .BYTE $EB,$3F,$00,$00,$F8,$FF,$FF,$02,$00,$00,$FF,$8F,$FF,$00,$00,$FC,$FF,$81 ; $5F6
      .BYTE $1F,$00,$80,$FF,$FF,$0F,$00,$00,$FA,$FF,$FF,$01,$00,$E8,$FB,$9F,$3F,$00 ; $608
      .BYTE $00,$C0,$FE,$FF,$3F,$00,$00,$FB,$FF,$FD,$00,$00,$E0,$FF,$FF,$03,$00,$00,$FE ; $61A
      .BYTE $FF,$7B,$02,$00,$A0,$FF,$FF,$7F,$00,$00,$F0,$FF,$FF,$09,$00,$00,$FE,$5F ; $62D
      .BYTE $BF,$00,$00,$F8,$FF,$AF,$07,$00,$E0,$FF,$7F,$1D,$00,$00,$FC,$FF,$AF,$0B ; $63F
      .BYTE $00,$00,$FE,$FF,$FF,$03,$00,$80,$FF,$AF,$7E,$00,$00,$FA,$FF,$C7,$07,$00,$C0 ; $651
      .BYTE $FE,$FF,$3D,$00,$00,$E0,$FF,$FF,$3F,$00,$00,$F8,$FF,$FF,$05,$00,$00,$FF ; $664
      .BYTE $8F,$FF,$00,$00,$EC,$FF,$81,$1F,$00,$B0,$FF,$FF,$0E,$00,$E8,$FF,$03,$00 ; $676
      .BYTE $FE,$9F,$00,$F0,$FF,$05,$80,$FF,$27,$00,$FC,$3F,$00,$FC,$BF,$00,$EC ; $688
      .BYTE $7F,$01,$E0,$FF,$00,$EC,$BF,$00,$FC,$3F,$00,$FC,$2F,$80,$FF,$03,$00,$A0 ; $699
      .BYTE $7F,$B7,$B7,$DF,$2A,$89,$50,$B5,$56,$D5,$3E,$81,$DA,$7F,$00 ; $6AB
      .BYTE $3F,$D0,$9F,$78,$01,$00,$00,$80,$FF,$6F,$09,$00,$55,$0F,$BD,$FB,$F7,$FF ; $6BA
      .BYTE $FB,$3F,$02,$00,$00,$B4,$7B,$DB,$B5,$D5,$AA,$55,$AB,$D4,$52,$55 ; $6CC
      .BYTE $A9,$4A,$53,$55,$A9,$AA,$4A,$55,$55,$A9,$52,$55,$55,$AA,$AA ; $6DC
      .BYTE $AA,$AA,$AA,$AA,$B2,$AA,$4A,$4D,$53,$55,$55,$55,$55,$55,$2D ; $6EB
      .BYTE $D5,$52,$D3,$CA,$52,$AB,$AA,$AA,$AA,$AA,$AA,$6A,$55,$69,$55 ; $6FA
      .BYTE $55,$A9,$55,$55,$69,$55,$55,$55,$55,$55,$55,$D3,$D4,$52,$55 ; $709
      .BYTE $55,$55,$AB,$B4,$B2,$AA,$AA,$52,$AB,$34,$55,$53,$55,$55,$2D ; $718
      .BYTE $AB,$52,$AB,$CA,$52,$2B,$55,$55,$55,$55,$55,$55,$55,$55,$2B ; $727
      .BYTE $D5,$52,$55,$55,$55,$55,$55,$55,$55,$55,$55 ; $736
DPCMSampleDataEnd_BossHurt:

DPCMSampleData_PlayerDeath:
      .BYTE $53,$55,$55,$55,$55,$55,$55,$55,$B5,$FA,$FE,$FF,$3F,$00,$00,$00 ; NOT logged as PCM data!
      .BYTE $80,$FE,$FF,$0B,$00,$00,$80,$FF,$FF,$FF,$01,$00,$00,$FC,$FF,$FF,$1F,$00 ; $10
      .BYTE $00,$E0,$FF,$FF,$FF,$00,$00,$00,$FF,$FF,$FF,$07,$00,$00,$E8,$FF,$FF,$1F ; $22
      .BYTE $00,$00,$C0,$FE,$FF,$FF,$00,$00,$00,$FE,$FF,$FF,$05,$00,$00,$A0,$FF,$FF,$7F ; $34
      .BYTE $00,$00,$80,$FE,$FF,$FF,$03,$00,$00,$E8,$FF,$FF,$1F,$00,$00,$80,$FF,$FF ; $47
      .BYTE $FF,$00,$00,$00,$FA,$FF,$FF,$07,$00,$00,$E8,$FF,$FF,$3F,$00,$00,$C0,$FE,$FF ; $59
      .BYTE $FF,$01,$00,$00,$FE,$FF,$FF,$01,$00,$00,$F8,$FF,$FF,$0F,$00,$00,$F0,$FF,$FF ; $6C
      .BYTE $0F,$00,$00,$D0,$FF,$FF,$7F,$00,$00,$80,$FE,$FF,$FF,$03,$00,$00,$FC,$FF,$FF ; $7F
      .BYTE $03,$00,$00,$E0,$FF,$FF,$1F,$00,$00,$E0,$FF,$FF,$1F,$00,$00,$E0,$FF,$FF ; $92
      .BYTE $1F,$00,$00,$E0,$FF,$FF,$1F,$00,$00,$E8,$FF,$FF,$03,$00,$00,$FC,$FF,$FF ; $A4
      .BYTE $03,$00,$00,$FD,$FF,$FF,$02,$00,$80,$FE,$FF,$7F,$00,$00,$80,$FF,$FF,$7F ; $B6
      .BYTE $00,$00,$C0,$FF,$FF,$5F,$00,$00,$A0,$FF,$FF,$2F,$00,$00,$F0,$FF,$FF,$0F ; $C8
      .BYTE $00,$00,$F0,$FF,$FF,$0F,$00,$00,$F0,$FF,$FF,$0B,$00,$00,$FE,$FF,$FF,$01,$00 ; $DA
      .BYTE $00,$FE,$FF,$3F,$00,$00,$F8,$FF,$FF,$03,$00,$00,$FF,$FF,$9F,$00,$00,$E0,$FF ; $ED
      .BYTE $FF,$0B,$00,$00,$FC,$FF,$7F,$02,$00,$A0,$FF,$FF,$0F,$00,$00,$FA,$FF,$FF ; $100
      .BYTE $01,$00,$C0,$FF,$FF,$2F,$00,$00,$F8,$FF,$FF,$00,$00,$00,$FF,$FF,$1F,$00,$00 ; $112
      .BYTE $EC,$FF,$FF,$03,$00,$80,$FF,$FF,$0F,$00,$00,$FA,$FF,$FF,$01,$00,$C0,$FF ; $125
      .BYTE $FF,$07,$00,$00,$FA,$FF,$FF,$02,$00,$00,$40,$FF,$FF,$FF,$FF,$FF,$00,$00,$00 ; $137
      .BYTE $00,$80,$FE,$FF,$FF,$FF,$3F,$01,$00,$00,$00,$A0,$FF,$FF,$FF,$FF,$2F ; $14A
      .BYTE $00,$00,$00,$00,$E8,$FF,$FF,$FF,$FF,$03,$00,$00,$00,$00,$FE,$FF,$FF,$FF,$FF ; $15B
      .BYTE $00,$00,$00,$00,$A0,$FF,$FF,$FF,$FF,$2F,$00,$00,$00,$00,$F4,$FF,$FF,$FF,$FF ; $16E
      .BYTE $01,$00,$00,$00,$40,$FF,$FF,$FF,$FF,$0F,$00,$00,$00,$00,$FD,$FF,$FF,$FF,$7F ; $181
      .BYTE $00,$00,$00,$00,$C0,$FF,$FF,$FF,$FF,$BF,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF ; $194
      .BYTE $3F,$00,$00,$00,$00,$E0,$FF,$FF,$FF,$FF,$0F,$00,$00,$00,$00,$F8,$FF,$FF,$FF ; $1A7
      .BYTE $FF,$03,$00,$00,$00,$00,$FE,$FF,$FF,$FF,$1F,$00,$00,$00,$00,$FA,$FF,$FF,$FF ; $1BA
      .BYTE $FF,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$2F,$00,$00,$00,$00,$FC,$FF,$FF,$FF ; $1CD
      .BYTE $3F,$00,$00,$00,$00,$EC,$FF,$FF,$FF,$FF,$09,$00,$00,$00,$00,$FB,$FF,$FF,$FF ; $1E0
      .BYTE $FF,$03,$00,$00,$00,$00,$FF,$FF,$FF,$FF,$1F,$00,$00,$00,$00,$F0,$FF,$FF,$FF ; $1F3
      .BYTE $FF,$02,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$1F,$00,$00,$00,$00,$FC,$FF,$FF,$FF ; $206
      .BYTE $BF,$00,$00,$00,$00,$E8,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$E8,$FF,$FF,$FF,$FF ; $219
      .BYTE $01,$00,$00,$00,$E0,$FF,$FF,$FF,$FF,$01,$00,$00,$00,$F0,$FF,$FF,$FF,$BF,$00 ; $22C
      .BYTE $00,$00,$00,$F4,$FF,$FF,$FF,$7F,$01,$00,$00,$00,$E0,$FF,$FF,$FF,$FF,$01,$00 ; $23F
      .BYTE $00,$00,$E0,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$EC,$FF,$FF,$FF,$3F,$00,$00,$00 ; $252
      .BYTE $80,$FE,$FF,$FF,$FF,$07,$00,$00,$00,$A0,$FE,$FF,$FF,$FF,$00,$00,$00,$00,$FE ; $265
      .BYTE $FF,$FF,$FF,$13,$00,$00,$00,$E8,$FF,$FF,$FF,$3F,$00,$00,$00,$00,$FF,$FF ; $278
      .BYTE $FF,$FF,$01,$00,$00,$00,$EC,$FF,$FF,$FF,$1F,$00,$00,$00,$C0,$FF,$FF,$FF ; $28A
      .BYTE $FF,$00,$00,$00,$00,$FE,$FF,$FF,$FF,$03,$00,$00,$00,$E8,$FF,$FF,$FF,$2F,$00 ; $29C
      .BYTE $00,$00,$A0,$FF,$FF,$FF,$3F,$00,$00,$00,$A0,$FF,$FF,$FF,$1F,$00,$00,$00,$E8 ; $2AF
      .BYTE $FF,$FF,$FF,$0F,$00,$00,$00,$E8,$FF,$FF,$FF,$27,$00,$00,$00,$F8,$FF,$FF ; $2C2
      .BYTE $FF,$03,$00,$00,$00,$FF,$FF,$FF,$3F,$00,$00,$00,$F0,$FF,$FF,$FF,$13,$00,$00 ; $2D4
      .BYTE $00,$F8,$FF,$FF,$FF,$01,$00,$00,$80,$FF,$FF,$FF,$1F,$00,$00,$00,$FC,$FF ; $2E7
      .BYTE $FF,$BF,$00,$00,$00,$F0,$FF,$FF,$FF,$03,$00,$00,$00,$FF,$FF,$FF,$2F,$00,$00 ; $2F9
      .BYTE $00,$FE,$FF,$FF,$3F,$00,$00,$00,$EC,$FF,$FF,$BF,$00,$00,$00,$F8,$FF,$FF ; $30C
      .BYTE $BF,$00,$00,$00,$F0,$FF,$FF,$FF,$02,$00,$00,$E0,$FF,$FF,$FF,$00,$00,$00,$F8 ; $31E
      .BYTE $FF,$FF,$3F,$00,$00,$00,$FE,$FF,$FF,$0F,$00,$00,$80,$FF,$FF,$FF,$03,$00,$00 ; $331
      .BYTE $E0,$FF,$FF,$FF,$00,$00,$00,$F8,$FF,$FF,$2F,$00,$00,$C0,$FF,$FF,$BF ; $344
      .BYTE $00,$00,$00,$FE,$FF,$FF,$05,$00,$00,$F8,$FF,$FF,$0F,$00,$00,$A0,$FF,$FF,$7F ; $355
      .BYTE $02,$00,$80,$FE,$FF,$FF,$02,$00,$00,$FC,$FF,$FF,$03,$00,$00,$FC,$FF,$FF,$03 ; $368
      .BYTE $00,$00,$EC,$FF,$FF,$0B,$00,$00,$EC,$FF,$FF,$1F,$00,$00,$E0,$FF,$FF,$0F ; $37B
      .BYTE $00,$00,$F0,$FF,$FF,$17,$00,$00,$E8,$FF,$FF,$0B,$00,$00,$EC,$FF,$FF,$03,$00 ; $38D
      .BYTE $00,$FC,$FF,$FF,$03,$00,$00,$FD,$FF,$FF,$02,$00,$80,$FF,$FF,$3F,$00,$00,$A0 ; $3A0
      .BYTE $FF,$FF,$0F,$00,$00,$FA,$FF,$FF,$01,$00,$80,$FE,$FF,$3F,$00,$00,$E0,$FF ; $3B3
      .BYTE $FF,$17,$00,$00,$FA,$FF,$FF,$00,$00,$A0,$FF,$FF,$1F,$00,$00,$FC,$FF,$7F ; $3C5
      .BYTE $02,$00,$80,$FF,$FF,$0F,$00,$00,$FE,$FF,$3F,$00,$00,$F8,$FF,$FF,$00,$00,$E0 ; $3D7
      .BYTE $FF,$FF,$03,$00,$80,$FF,$FF,$0B,$00,$C0,$FF,$FF,$07,$00,$00,$FF,$FF,$1F ; $3EA
      .BYTE $00,$00,$FC,$FF,$3F,$00,$00,$F6,$FF,$3F,$00,$00,$F8,$FF,$9F,$00,$00,$FE,$FF ; $3FC
      .BYTE $2F,$00,$00,$FE,$FF,$3F,$00,$00,$FB,$FF,$1F,$00,$00,$FC,$FF,$0F,$00,$80,$FE ; $40F
      .BYTE $FF,$27,$00,$80,$FF,$FF,$03,$00,$F0,$FF,$FF,$01,$00,$E8,$FF,$BF,$00,$00 ; $422
      .BYTE $EC,$FF,$4F,$00,$00,$FE,$FF,$07,$00,$E0,$FF,$FF,$03,$00,$F0,$FF,$3F,$00 ; $434
      .BYTE $00,$F8,$FF,$5F,$00,$00,$FE,$FF,$0F,$00,$80,$FE,$FF,$27,$00,$80,$FF,$FF ; $446
      .BYTE $03,$00,$F0,$FF,$FF,$01,$00,$E8,$FF,$FF,$00,$00,$E0,$FF,$FF,$02,$00,$D0,$FF ; $458
      .BYTE $FF,$01,$00,$C0,$FF,$FF,$07,$00,$00,$FF,$FF,$0B,$00,$80,$FF,$FF,$0F,$00,$00 ; $46B
      .BYTE $FE,$FF,$3F,$00,$00,$F8,$FF,$BF,$00,$00,$E8,$FF,$FF,$02,$00,$F0,$FF,$FF ; $47E
      .BYTE $01,$00,$C0,$FF,$FF,$07,$00,$00,$FF,$FF,$0F,$00,$00,$FE,$FF,$7F,$00,$00,$F0,$FF ; $490
      .BYTE $FF,$01,$00,$80,$FE,$FF,$3F,$00,$00,$E8,$FF,$FF,$07,$00,$00,$FF,$FF,$1F ; $4A4
      .BYTE $00,$00,$EC,$FF,$FF,$03,$00,$80,$FF,$FF,$4F,$00,$00,$F0,$FF,$FF,$09,$00,$00 ; $4B6
      .BYTE $FE,$FF,$BF,$00,$00,$E0,$FF,$FF,$27,$00,$00,$F8,$FF,$FF,$02,$00,$80,$FF ; $4C9
      .BYTE $FF,$1F,$00,$00,$E8,$FF,$FF,$17,$00,$00,$74,$FF,$FF,$4B,$00,$00,$74,$FF ; $4DB
      .BYTE $FF,$15,$04,$00,$69,$7B,$AB,$B5,$AD,$5A,$55,$AB,$AA,$AA,$AA,$2A ; $4ED
      .BYTE $55,$55 ; $4FD
DPCMSampleData_BossDeath: ; is this too early...
      .BYTE $6B
DPCMSampleDataEnd_PlayerDeath: ; ...or is this too late?
      .BYTE $FF,$1F,$00,$00,$E8,$FF,$0F,$68,$05,$00,$A0,$FF,$FF,$0F,$DC,$00,$00 ; Logged as PCM data
      .BYTE $DC,$FE,$FF,$07,$7E,$00,$00,$F6,$FF,$FF,$81,$0F,$00,$00,$FE,$FF,$7F,$E0 ; $12
      .BYTE $05,$00,$60,$FB,$FF,$0B,$3F,$00,$00,$FC,$FF,$FF,$C0,$0E,$00,$00,$FE,$FF ; $24
      .BYTE $3F,$B0,$03,$00,$B0,$FF,$FF,$89,$1D,$00,$00,$EE,$FF,$7F,$68,$05,$00,$60 ; $36
      .BYTE $FF,$FF,$03,$1F,$01,$00,$FA,$FF,$BF,$D0,$05,$00,$C0,$FF,$FF,$07,$5E,$00 ; $48
      .BYTE $00,$FA,$FF,$3F,$B8,$01,$00,$B0,$FF,$FF,$8B,$16,$00,$80,$FE,$FF,$4F ; $5A
      .BYTE $EC,$04,$00,$E0,$FF,$FF,$41,$27,$00,$00,$FF,$FF,$0F,$3B,$01,$00,$F8,$FF ; $6B
      .BYTE $7F,$E8,$08,$00,$E0,$FF,$FF,$C4,$47,$00,$00,$FF,$FF,$17,$2E,$00,$00,$FA ; $7D
      .BYTE $FF,$3F,$F0,$03,$00,$D0,$FF,$FF,$89,$0B,$00,$80,$FF,$FF,$87,$4E,$00 ; $8F
      .BYTE $00,$FE,$FF,$4F,$6C,$00,$00,$FC,$FF,$3F,$E8,$03,$00,$E0,$FF,$FF,$62 ; $A0
      .BYTE $07,$00,$A0,$FF,$FF,$A1,$07,$00,$80,$FF,$FF,$83,$17,$00,$80,$FF,$FF ; $B1
      .BYTE $A3,$15,$00,$00,$FF,$FF,$4B,$1F,$00,$00,$FA,$FF,$1F,$3D,$00,$00,$FB,$FF ; $C2
      .BYTE $1F,$3A,$01,$00,$F8,$FF,$1F,$BB,$00,$00,$F8,$FF,$1F,$9B,$00,$00,$FB,$FF ; $D4
      .BYTE $1F,$BA,$00,$00,$E8,$FF,$1F,$3D,$00,$80,$FB,$FF,$1F,$1D,$00,$00,$FA ; $E6
      .BYTE $FF,$1F,$9F,$00,$00,$F8,$FF,$9F,$78,$01,$00,$FC,$FF,$1F,$78,$01,$00,$FA ; $F7
      .BYTE $FF,$1F,$3A,$01,$00,$F8,$FF,$9F,$14,$00,$E8,$FF,$8F,$0B,$00,$F8,$FF ; $109
      .BYTE $FC,$09,$00,$F8,$FF,$BE,$00,$80,$EE,$FF,$0E,$00,$E0,$FF,$EB,$04,$00,$EC ; $11A
      .BYTE $FF,$2B,$02,$00,$FE,$FF,$1C,$00,$E0,$FF,$3F,$0E,$00,$B8,$FE,$EF,$0F ; $12C
      .BYTE $00,$F8,$7F,$FC,$04,$00,$FC,$FF,$4E,$00,$C0,$FE,$5F,$03,$00,$EC,$FF,$2B ; $13D
      .BYTE $02,$80,$FE,$FF,$18,$00,$F0,$FF,$8F,$0F,$00,$F8,$FF,$FA,$01,$00,$FB,$AF ; $14F
      .BYTE $0F,$00,$A0,$FF,$BF,$00,$00,$FB,$FF,$A2,$00,$80,$FF,$FF,$41,$00,$F8,$FF ; $161
      .BYTE $E3,$07,$00,$FC,$FF,$5E,$00,$80,$FE,$EF,$02,$00,$EC,$FF,$59,$00,$C0,$FF ; $173
      .BYTE $5F,$1A,$00,$F0,$FF,$F5,$03,$00,$FA,$FF,$1F,$01,$80,$FB,$BF,$01,$00,$F6 ; $185
      .BYTE $FF,$38,$00,$A0,$FF,$3F,$16,$00,$F8,$FF,$FC,$01,$00,$FA,$FF,$0F,$00,$B0 ; $197
      .BYTE $FF,$2F,$01,$00,$FF,$7F,$08,$00,$F8,$FF,$C7,$05,$00,$FB,$FF,$8F,$00,$A0 ; $1A9
      .BYTE $FF,$5F,$01,$00,$FF,$5F,$08,$00,$F4,$FF,$C7,$00,$80,$FF,$FF,$0F,$00,$F0 ; $1BB
      .BYTE $FF,$3D,$00,$80,$FF,$8F,$01,$00,$FF,$FF,$98,$00,$60,$FF,$FF,$03,$00,$F6 ; $1CD
      .BYTE $7F,$27,$00,$E0,$FF,$4B,$00,$C0,$FF,$1F,$2F,$00,$F0,$FF,$7F,$00,$80 ; $1DF
      .BYTE $FE,$BF,$04,$00,$FC,$FF,$48,$00,$E8,$FF,$E3,$07,$00,$FE,$FF,$07,$00,$D8 ; $1F0
      .BYTE $FF,$95,$00,$80,$FF,$3F,$04,$00,$FB,$FF,$1F,$00,$F0,$FF,$1D,$00,$60 ; $202
      .BYTE $FF,$8F,$02,$80,$FE,$1F,$3F,$00,$E8,$FF,$7F,$00,$C0,$FE,$63,$00,$C0 ; $213
      .BYTE $FF,$3F,$06,$00,$FD,$FF,$1F,$00,$D0,$FF,$3A,$00,$A0,$FF,$8F,$01,$80 ; $224
      .BYTE $FE,$FF,$17,$00,$E8,$FF,$0E,$00,$E8,$FF,$63,$00,$C0,$FF,$FF,$06,$00,$FA ; $235
      .BYTE $BF,$03,$00,$FE,$BF,$28,$00,$E8,$FF,$7F,$00,$C0,$FF,$57,$00,$A0,$FF ; $247
      .BYTE $A7,$08,$00,$FF,$FF,$0F,$00,$F8,$BF,$23,$00,$E8,$FF,$71,$00,$E0,$FF,$FF ; $258
      .BYTE $00,$80,$FF,$A7,$00,$40,$FF,$CF,$0A,$00,$FE,$FF,$2F,$00,$E0,$FF,$0A ; $26A
      .BYTE $00,$F8,$FF,$E2,$00,$B0,$FF,$FF,$00,$80,$FF,$4B,$00,$C0,$FF,$EB,$07 ; $27B
      .BYTE $80,$F7,$FF,$00,$00,$FB,$3F,$14,$00,$F6,$FF,$3F,$00,$E0,$FF,$06,$00,$F8 ; $28C
      .BYTE $FF,$E2,$00,$B0,$FF,$7F,$01,$40,$FF,$59,$00,$C0,$FF,$EF,$03,$80,$FF ; $29E
      .BYTE $AF,$00,$80,$FF,$8F,$02,$80,$FE,$FF,$07,$00,$FC,$3F,$09,$00,$FD,$AF,$1F ; $2AF
      .BYTE $00,$F6,$FF,$03,$00,$FC,$3F,$0A,$00,$F8,$FF,$5F,$00,$F0,$FF,$24,$00,$EC ; $2C1
      .BYTE $7F,$7F,$00,$D0,$FF,$0D,$00,$F8,$FF,$18,$00,$E8,$FF,$7F,$00,$C0,$FF ; $2D3
      .BYTE $13,$00,$F0,$FF,$7F,$01,$A0,$FF,$29,$00,$E8,$FF,$E3,$00,$A0,$FF,$BF ; $2E4
      .BYTE $00,$60,$FF,$4B,$00,$C0,$FF,$FF,$02,$80,$FF,$87,$00,$E0,$FF,$B9,$03 ; $2F5
      .BYTE $C0,$FE,$FF,$00,$80,$FF,$27,$04,$00,$FF,$FF,$0B,$00,$FE,$1F,$05,$00,$FD ; $306
      .BYTE $EF,$0F,$00,$FD,$DF,$01,$00,$FE,$1F,$1B,$00,$EC,$FF,$4F,$00,$F8,$7F,$08 ; $318
      .BYTE $00,$F8,$FF,$3F,$00,$F0,$FF,$06,$00,$FC,$7F,$F4,$00,$A0,$FF,$3F,$00,$E0 ; $32A
      .BYTE $FF,$31,$00,$E8,$FF,$BF,$E0,$0E,$00,$00,$F6,$FF,$FF,$0B,$8E,$00,$A0 ; $33C
      .BYTE $FF,$1F,$00,$FC,$3F,$00,$FD,$07,$D0,$7F,$03,$B0,$FF,$02,$80,$FF,$DB ; $34D
      .BYTE $01,$00,$F8,$FF,$FF,$02,$BA,$01,$00,$A0,$FF,$FF,$A7,$03,$00,$FE,$BF,$00,$FA ; $35E
      .BYTE $0F,$40,$FF,$09,$C0,$FF,$03,$C0,$FF,$03,$00,$FF,$7F,$F8,$08,$00,$C0,$FE ; $371
      .BYTE $FF,$BF,$80,$97,$00,$00,$FD,$FF,$27,$00,$FA,$7F,$00,$FA,$0F,$40,$FF ; $383
      .BYTE $05,$E0,$FF,$01,$E0,$BF,$2E,$00,$E0,$FF,$7F,$C0,$0F,$00,$00,$F6,$FF,$FF ; $394
      .BYTE $0B,$8E,$00,$A0,$FF,$1F,$00,$FC,$3F,$80,$FE,$03,$D0,$7F,$02,$F0,$FF ; $3A6
      .BYTE $04,$80,$FF,$FB,$08,$00,$E8,$FE,$FF,$07,$B8,$03,$00,$80,$FF,$FF,$AB,$03 ; $3B7
      .BYTE $00,$FE,$9F,$00,$FE,$0F,$40,$FF,$01,$F8,$BF,$02,$E8,$DF,$01,$00,$FF,$7F ; $3C9
      .BYTE $F8,$08,$00,$C0,$FE,$FF,$7F,$81,$8E,$00,$80,$FE,$7F,$07,$00,$FF,$2F ; $3DB
      .BYTE $00,$FB,$0F,$A0,$FF,$00,$F0,$FF,$00,$E0,$FF,$0F,$00,$C0,$FF,$FF,$C0 ; $3EC
      .BYTE $4F,$00,$00,$F4,$FF,$FF,$0B,$D,$00,$B0,$FF,$2F,$80,$FE,$2D,$80,$7F ; $3FD
      .BYTE $03,$B0,$FF,$00,$F8,$EF,$00,$D0,$FF,$ED,$08,$00,$D0,$FF,$FF,$07,$F0,$03 ; $40E
      .BYTE $00,$80,$FF,$FF,$79,$01,$C0,$FF,$17,$00,$FF,$03,$E0,$7F,$02,$F8,$3F ; $420
      .BYTE $00,$FC,$BF,$02,$80,$FE,$BF,$F8,$01,$00,$C0,$FE,$FF,$7F,$81,$0B,$00,$80 ; $431
      .BYTE $FF,$FF,$09,$40,$FF,$0B,$A0,$FF,$00,$EC,$3F,$00,$FD,$1F,$00,$FC,$DF ; $443
      .BYTE $09,$00,$F8,$FF,$1F,$D8,$0B,$00,$00,$FE,$FF,$FF,$D0,$01,$00,$FE,$7F,$02,$B0 ; $454
      .BYTE $FF,$02,$F0,$5F,$00,$FE,$0F,$00,$FF,$8F,$00,$F8,$FF,$D8,$05,$00,$C0,$FF ; $467
      .BYTE $FF,$3F,$80,$0F,$00,$80,$FE ; $479
DPCMSampleDataEnd_BossDeath:

; sort of a zapping sound
DPCMSampleData_Unused:
      .BYTE $FF
      .BYTE $5B,$02,$C0,$FF,$03,$D0,$FF,$02,$F8,$57,$00,$FB,$2F,$00,$FA,$BF,$01,$00 ; NOT logged as PCM data!
      .BYTE $FE,$FF,$07,$7E,$02,$00,$C0,$FE,$FF,$7F,$E0,$04,$00,$F4,$FF,$AB,$01,$00 ; $12
      .BYTE $FF,$BF,$02,$80,$FF,$2F,$00,$FE,$2F,$00,$FC,$3F,$80,$FE,$23,$80 ; $24
      .BYTE $FF,$02,$F8,$1F,$40,$FF,$03,$E0,$BF,$03,$E8,$BF,$02,$D0,$FF,$02,$C0 ; $34
      .BYTE $FF,$0B,$00,$FE,$5F,$07,$00,$FC,$FF,$F1,$02,$00,$F0,$FF,$3F,$B8,$03,$00,$C0 ; $45
      .BYTE $EF,$FF,$7F,$80,$3B,$00,$00,$D8,$FF,$FF,$3F,$C0,$13,$00,$80,$FE ; $58
      .BYTE $FF,$8F,$8E,$00,$80,$FF,$3F,$0F,$00,$F8,$FF,$0A,$00,$FE,$BF,$00,$F4 ; $68
      .BYTE $7F,$00,$F0,$FF,$00,$FA,$8F,$00,$FE,$0B,$D0,$7F,$00,$FB,$0F,$00,$FF,$0F ; $79
      .BYTE $00,$FF,$0F,$00,$FF,$5F,$00,$F8,$DF,$01,$80,$FE,$EF,$05,$00,$EC,$FF,$CB ; $8B
      .BYTE $13,$00,$C0,$FF,$FF,$09,$EE,$00,$00,$70,$FF,$FF,$9F,$00,$7E,$00,$00,$B8 ; $9D
      .BYTE $FF,$FF,$0F,$74,$03,$00,$E0,$FF,$7F,$E2,$03,$00,$EC,$FF,$3B,$00,$C0,$FF ; $AF
      .BYTE $9F,$00,$F0,$FF,$04,$B0,$BF,$07,$80,$FF,$07,$C0,$7F,$05,$F0,$1F,$C0 ; $C1
      .BYTE $FE,$01,$F8,$BF,$02,$E8,$3F,$02,$F8,$BF,$02,$D0,$FF,$02,$40,$FF,$77 ; $D2
      .BYTE $00,$40,$FD,$FF,$06,$00,$F8,$FF,$1F,$3C,$01,$00,$F8,$FF,$FF,$40,$37 ; $E3
      .BYTE $00,$00,$B8,$FF,$FF,$7F,$00,$3B,$01,$00,$D0,$FF,$FF,$27,$3A,$02,$00,$F8 ; $F4
      .BYTE $FF,$2F,$0F,$00,$E0,$FF,$EB,$02,$80,$FF,$1F,$01,$E8,$FF,$01,$E0,$FF ; $106
      .BYTE $0A,$80,$FF,$0B,$A0,$FF,$00,$FC,$17,$C0,$FF,$00,$F0,$FF,$00,$F0,$FF ; $117
      .BYTE $02,$D0,$7F,$07,$80,$FF,$9D,$00,$E0,$FF,$3B,$00,$C0,$FE,$9F,$5D,$01 ; $128
      .BYTE $00,$F8,$FF,$5F,$F8,$0A,$00,$00,$FF,$FF,$7F,$01,$EE,$00,$00,$A0,$FF,$FF ; $139
      .BYTE $7F,$C0,$4E,$00,$00,$FE,$FF,$1F,$3A,$00,$00,$FE,$FF,$3D,$00,$60,$FF ; $14B
      .BYTE $3F,$00,$F8,$DF,$01,$C0,$FF,$0B,$00,$FF,$1F,$00,$FE,$0F,$C0,$7F,$02,$FC ; $15C
      .BYTE $0F,$A0,$FF,$0A,$80,$FF,$07,$00,$FF,$4F,$00,$FC,$7F,$01,$C0,$FF,$6B ; $16E
      .BYTE $00,$C0,$FF,$AF,$0E,$00,$C0,$FF,$FF,$C4,$07,$00,$00,$FF,$FF,$BF,$80,$AF ; $17F
      .BYTE $00,$00,$E0,$FF,$FF,$5F,$C0,$2E,$00,$00,$F4,$FF,$FF,$A1,$13,$00,$80 ; $191
      .BYTE $FF,$BF,$3E,$00,$C0,$FF,$77,$00,$A0,$FF,$1F,$00,$FC,$7F,$01,$E0,$FF ; $1A2
      .BYTE $01,$E0,$FF,$00,$E8,$3F,$80,$FF,$05,$F0,$BF,$00,$F4,$BF,$00,$F4,$EF ; $1B3
      .BYTE $00,$F0,$BF,$07,$80,$FD,$6F,$01,$80,$FF,$8F,$0B,$00,$B8,$FF,$3F,$3A ; $1C4
      .BYTE $02,$00,$BA,$FF,$FF,$80,$56,$00,$04,$75,$FB,$FF,$1F,$C0,$56,$00,$84 ; $1D5
      .BYTE $DA,$7F,$FF,$09,$5C,$04,$40,$ED,$FF,$87,$16,$00,$DA,$FF,$65,$01,$E0 ; $1E6
      .BYTE $FF,$31,$02,$FA,$CF,$0A,$E0,$7F ; $1F7
DPCMSampleDataEnd_Unused:

DPCMSampleData_PlayerHurt:
      .BYTE $55,$95,$55,$55,$55,$55,$55,$55,$D5,$AA,$FF,$3F,$00,$48,$25 ; Logged as PCM data
      .BYTE $B0,$8B,$80,$AE,$0B,$F8,$4F,$80,$7F,$0B,$EC,$2F,$A0,$7F,$23 ; $F
      .BYTE $F0,$4F,$C4,$DF,$09,$F8,$27,$A2,$DF,$0B,$E8,$95,$D0,$6F,$03,$F4 ; $1E
      .BYTE $4A,$E4,$3F,$01,$FA,$49,$F0,$BF,$00,$FC,$05,$F1,$AF,$00,$FE,$13,$D8 ; $2E
      .BYTE $2F,$00,$FF,$09,$EC,$2F,$80,$FE,$05,$F6,$0D,$C0,$7F,$01,$FD,$46,$00,$FF ; $3F
      .BYTE $05,$EC,$9F,$00,$E8,$3F,$A0,$FF,$02,$A0,$FF,$02,$FE,$17,$00,$FE,$83 ; $51
      .BYTE $F8,$5F,$00,$F8,$4B,$62,$FF,$04,$E0,$9F,$84,$7D,$2F,$80,$5F,$05 ; $62
      .BYTE $BE,$57,$C0,$7E,$11,$FC,$BA,$02,$FB,$05,$70,$6F,$0B,$EC,$2F,$80 ; $72
      .BYTE $5D,$2F,$80,$FF,$22,$B0,$7F,$05,$D0,$FF,$04,$FA,$5F,$00,$FA,$93 ; $82
      .BYTE $84,$BE,$8B,$C0,$3E,$82,$F8,$DB,$02,$FC,$0F,$00,$FF,$5A,$00,$FA,$5F ; $92
      .BYTE $A0,$FF,$06,$00,$FF,$4F,$60,$DF,$4E,$00,$BF,$20,$70,$5F,$07,$40,$FF ; $A3
      .BYTE $0F,$42,$FF,$4F,$00,$BF,$54,$A0,$5F,$27,$00,$FF,$0B,$40,$FF,$0B,$00 ; $B4
      .BYTE $FB,$7F,$80,$7F,$37,$01,$F8,$0F,$02,$F8,$DF,$12,$00,$C0,$EB,$7F,$B7 ; $C5
      .BYTE $AD,$AD,$56,$B5,$AA,$2A,$55,$55,$A5,$4A,$2D,$55,$A9,$52,$55 ; $D6
      .BYTE $A9,$2A,$55,$A9,$AA,$4A,$55,$55,$A5,$A9,$AA,$5A,$AA,$AA,$AA ; $E5
      .BYTE $AA,$AA,$AA,$AA,$6A,$A5,$69,$55,$55,$55,$2D,$35,$00 ; $F4
DPCMSampleDataEnd_PlayerHurt:

DPCMSampleData_DoorOpenBombBom:
      .BYTE $B0,$82
      .BYTE $20,$59,$52,$04,$00,$FD,$FF,$07,$00,$F8,$FF,$FF,$17,$C0,$F6,$FF,$7F ; $103
      .BYTE $00,$80,$D4,$7D,$FF,$57,$95,$A0,$A6,$B5,$9A,$2A,$4D,$DD,$4B ; $114
      .BYTE $92,$20,$A4,$96,$DB,$F6,$75,$FF,$01,$00,$00,$F0,$AF,$25,$01,$40,$D5 ; $123
      .BYTE $FA,$FF,$FF,$01,$00,$04,$B0,$BF,$FB,$27,$11,$92,$48,$69,$55,$AB ; $134
      .BYTE $AD,$04,$D8,$6A,$DF,$FE,$5F,$A5,$24,$00,$DA,$C0,$EE,$D3,$BE,$FF ; $144
      .BYTE $FF,$FB,$4F,$EA,$47,$80,$00,$41,$00,$50,$D5,$6A,$D5,$FE,$8A,$22 ; $154
      .BYTE $28,$49,$D3,$34,$55,$57,$55,$AA,$9A,$AA,$02,$D0,$F6,$96,$EC ; $164
      .BYTE $BA,$EF,$FF,$2A,$55,$AB,$24,$89,$00,$A8,$6D,$2B,$50,$7D,$DF ; $173
      .BYTE $F6,$B6,$5A,$B5,$7E,$93,$48,$88,$84,$4A,$95,$2A,$01,$E0,$DD ; $182
      .BYTE $76,$AD,$6B,$DB,$FD,$FF,$2F,$00,$00,$00,$00,$00,$BF,$EF,$DB,$DB,$6A ; $191
      .BYTE $6B,$B5,$52,$AB,$AA,$AA,$AA,$CA,$B2,$54,$55,$4A,$AB,$54,$95 ; $1A2
      .BYTE $95,$AA,$4A,$AB,$34,$55,$53,$35,$55,$55,$55,$55,$55,$55,$55 ; $1B1
      .BYTE $D5,$B4,$B2,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$5A,$59,$A9 ; $1C0
      .BYTE $55,$55,$69,$55,$55,$55,$55,$CB,$52,$AB,$AA,$AA,$AA,$2A,$AD ; $1CF
      .BYTE $AA,$AA,$B2,$AA,$AA,$B2,$AA,$AA,$52,$2B,$2B,$B5,$52,$55,$55 ; $1DE
      .BYTE $53,$55,$55,$53,$55,$55,$55,$55,$55,$55,$55,$55,$55,$55,$55 ; $1ED
      .BYTE $55,$55,$69,$55,$55,$69,$55,$55,$55,$55,$55,$95,$55,$55,$69 ; $1FC
      .BYTE $55,$55,$55,$55,$55,$55,$55,$59,$A9,$A5,$AA,$AA,$5A,$55,$96 ; $20B
      .BYTE $55,$A5,$AA,$65,$A9,$AA,$9A,$AA,$AA,$AA,$5A,$AA,$5A,$A5,$A9 ; $21A
      .BYTE $A5,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA ; $229
      .BYTE $6A,$59,$AA,$95,$A6,$AA,$65,$A9,$AA,$AA,$AA,$AA,$A5,$A6,$A9 ; $238
      .BYTE $55,$A5,$A9,$AA,$AA,$A9,$65,$59,$A9,$55,$55,$A9,$55,$A5,$A9 ; $247
      .BYTE $55,$A5,$69,$65,$59,$A9,$55,$55,$69,$55,$55,$A9,$55,$A5,$69 ; $256
      .BYTE $65,$55,$69,$55,$55,$55,$55,$B5,$EA,$FF,$FF,$03,$00,$09,$40,$04,$00 ; $265
      .BYTE $E8,$07,$00,$FE,$1F,$F4,$FF,$03,$F4,$FF,$97,$B6,$57,$EF,$BE,$09,$6A ; $276
      .BYTE $BF,$FF,$03,$00,$5C,$00,$F4,$FF,$03,$00,$ED,$27,$00,$42,$25,$00,$EE,$9F ; $287
      .BYTE $00,$00,$F8,$FF,$FF,$FF,$5F,$54,$FB,$49,$90,$AA,$24,$02,$00,$F7,$FF ; $299
      .BYTE $05,$00,$E8,$FF,$FF,$13,$40,$FB,$FF,$3F,$00,$00,$D8,$F6,$FE,$AD,$54 ; $2AA
      .BYTE $90,$55,$AB,$96,$A5,$D4,$EA,$93,$0A,$01,$65,$D5,$6E,$DD,$B7,$FF ; $2BB
      .BYTE $00,$00,$00,$F8,$DF,$92,$04,$00,$55,$FF,$FF,$FF,$04,$00,$00,$D4,$BF,$FD,$27 ; $2CB
      .BYTE $09,$51,$92,$CA,$B2,$DA,$5A,$09,$68,$AB,$BD,$FF,$37,$55,$25,$01 ; $2DE
      .BYTE $B0,$05,$F6,$4B,$EF,$FF,$FF,$DD,$7F,$52,$3F,$01,$02,$20,$00,$40,$55 ; $2EE
      .BYTE $5B,$55,$DB,$5F,$48,$22,$49,$A9,$AA,$AA,$6A,$55,$55,$55,$55 ; $2FF
      .BYTE $29,$01,$DA,$DE,$92,$D5,$B7,$F7,$BF,$54,$69,$2B,$29,$12,$00,$AA ; $30E
      .BYTE $6B,$13,$A8,$ED,$7B,$F7,$B6,$6A,$B5,$FD,$92,$44,$48,$84,$4A ; $31E
      .BYTE $AA,$2A,$01,$60,$FB,$BA,$B5,$6D,$AB,$FD,$FF,$7F,$00,$00,$00,$00,$40 ; $32D
      .BYTE $DB,$A2,$DA,$B7,$6B,$9B,$AA,$B5,$DB,$AA,$55,$6B,$55,$69,$55 ; $33E
      .BYTE $7B,$A9,$A4,$24,$95,$25,$A5,$4A,$55,$A5,$42,$6A,$B5,$6A,$AB ; $34D
      .BYTE $D6,$AA,$6A,$55,$55,$AD,$CA,$52,$D3,$54,$A9,$55,$55,$55,$55 ; $35C
      .BYTE $55,$55,$DB,$55,$4A,$95,$4A,$AA,$2A,$55,$09,$6A,$B5,$55,$DB ; $36B
      .BYTE $AA,$69,$AB,$B6,$AB,$52,$A5,$6A,$2F,$45,$4A,$DD,$FF,$03,$00,$00 ; $37A
      .BYTE $00,$00,$F6,$EF,$FF,$B6,$EB,$FD,$7F,$89,$94,$4A,$91,$22,$01,$68 ; $38A
      .BYTE $6B,$55,$AD,$DB,$FE,$4F,$A5,$F4,$4B,$04,$01,$48,$52,$09,$68,$DB ; $39A
      .BYTE $BF,$AB,$ED,$5F,$12,$92,$28,$A9,$24,$D5,$B2,$6A,$D5,$6A,$AB ; $3AA
      .BYTE $4A,$00,$DB,$B6,$B6,$7D,$FF,$52,$2A,$A5,$02,$40,$55,$70,$BB,$DA ; $3B9
      .BYTE $FD,$7F,$DB,$4F,$D5,$5E,$40,$04,$21,$00,$55,$AB,$EA,$9F,$48,$48 ; $3C9
      .BYTE $2A,$55,$55,$55,$55,$02,$54,$55,$ED,$FF,$DB,$4A,$04,$28,$B0,$FB ; $3D9
      .BYTE $BF,$7F,$13,$29,$80,$DA,$BE,$FF,$3F,$00,$00,$60,$B5,$EB,$5F,$4B ; $3E9
      .BYTE $89,$D2,$B4,$6A,$53,$55,$55,$5F,$29,$11,$52,$D5,$6D,$DF,$FF ; $3F9
      .BYTE $03,$00,$00,$FC,$2B,$01,$48,$EB,$FF,$5F,$04,$00,$ED,$FD,$49,$48,$A4,$CA ; $408
      .BYTE $12,$50,$F5,$FE,$55,$01,$80,$EA,$FE,$FF,$FF,$7F,$01,$5A,$77,$91 ; $41A
      .BYTE $A4,$4A,$89,$00,$A1,$7F,$2F,$01,$A0,$FB,$7F,$02,$DA,$FF,$0B,$00,$D5 ; $42A
      .BYTE $ED,$9F,$8A,$AA,$D5,$B4,$B6,$93,$88,$6A,$FF,$7E,$00,$40,$2B ; $43B
      .BYTE $02,$F8,$FF,$01,$40,$F7,$91,$20,$29,$80,$FA,$46,$00,$E0,$FF,$FF ; $44A
      .BYTE $FF,$D1,$5D,$2A,$25,$01,$E8,$5E,$00,$EC,$7F,$82,$FB,$4F,$40,$DF ; $45A
      .BYTE $AF,$52,$DB,$DA,$AD,$92,$F6,$FF,$00,$B0,$01,$FA,$5F,$00,$7D,$41 ; $46A
      .BYTE $90,$00,$74,$11,$00,$FE,$FF,$BF,$BE,$92,$2A,$00,$6E,$05,$B0,$BF,$E8 ; $47A
      .BYTE $7F,$80,$FA,$A7,$B5,$6D,$77,$52,$DF,$2F,$A0,$15,$A8,$7F,$A0 ; $48B
      .BYTE $5E,$40,$04,$D0,$02,$00,$FE,$FF,$DF,$2B,$4A,$04,$B8,$02,$F8,$8B,$FE ; $49A
      .BYTE $07,$B8,$AF,$DA,$DB,$97,$DA,$FF,$03,$38,$D0,$7F,$C0,$2E,$82,$00 ; $4AB
      .BYTE $58,$00,$C0,$FF,$FF,$2F,$25,$01,$9A,$00,$FD,$D0,$7F,$A0,$FB,$AA ; $4BB
      .BYTE $EB,$BB,$AA,$FF,$C0,$26,$EC,$17,$75,$41,$04,$30,$02,$C0,$FF,$BF ; $4CB
      .BYTE $2B,$45,$80,$23,$D0,$49,$7F,$C1,$6E,$EB,$B6,$AF,$FA,$7E,$E0 ; $4DB
      .BYTE $85,$FE,$42,$17,$41,$80,$04,$80,$FF,$DF,$55,$12,$D0,$08,$6C,$EA ; $4EA
      .BYTE $0F,$EC,$D5,$AE,$6F,$DD,$5F,$74,$E4,$2F,$F4,$04,$08,$14,$00,$FE,$BF ; $4FA
      .BYTE $AB,$44,$A0,$00,$57,$EC,$43,$BB,$EA,$DB,$A7,$EF,$87,$4E,$EE ; $50B
      .BYTE $C3,$4E,$80,$80,$00,$F0,$FF,$37,$95,$80,$0A,$E8,$E8,$0F,$EC,$DA ; $51A
      .BYTE $DB,$AB,$FB,$C9,$43,$7F,$B1 ; $52A
      .BYTE $89,$00,$0A,$00,$FF,$DF,$49,$02,$0A,$70,$EA,$07,$EE,$EA,$F6 ; NOT logged as PCM data
DPCMSampleDataEnd_DoorOpenBombBom:

IFNDEF PROTOTYPE_DPCM_SAMPLES
DPCMSampleData_DrumSample:
      .BYTE $6A,$55,$55,$D5,$54,$AA,$5A,$55,$55,$85,$D8,$EA,$D7,$FF,$02 ; Logged as PCM data
      .BYTE $00,$00,$FE,$FF,$5F,$62,$00,$00,$00,$FF,$FF,$FF,$27,$00,$00,$E8,$FF,$FF ; $F
      .BYTE $07,$00,$FC,$FF,$FF,$FF,$00,$00,$00,$F8,$FF,$03,$00,$80,$FD,$FF,$7F,$00,$00 ; $21
      .BYTE $B0,$FF,$FF,$01,$00,$00,$FF,$FF,$FF,$0F,$00,$00,$FE,$FF,$05,$00,$00,$FA,$FF ; $34
      .BYTE $5F,$04,$80,$EE,$FF,$FF,$1F,$00,$00,$00,$FA,$FF,$03,$00,$BA,$FF,$FF,$5F ; $47
      .BYTE $00,$00,$D0,$EF,$EF,$08,$00,$40,$FF,$FF,$FF,$08,$00,$D8,$FF,$FF,$02,$00,$00 ; $59
      .BYTE $F8,$FF,$6F,$13,$01,$6A,$FB,$B6,$AA,$00,$40,$B6,$FF,$B7,$12,$24 ; $6C
      .BYTE $B5,$ED,$6B,$49,$00,$64,$BB,$B7,$93,$44,$A9,$55,$F5,$ED,$AB ; $7C
      .BYTE $44,$80,$94,$A6,$B7,$9B,$54,$6A,$95,$56,$B5,$5A,$35,$95,$22 ; $8B
      .BYTE $A4,$B6,$6A,$DB,$6A,$25,$A9,$AA,$6D,$BB,$15,$04,$A4,$6A,$6F ; $9A
      .BYTE $AB,$12,$6A,$DB,$B6,$95,$54,$92,$A2,$D4,$6A,$6F,$A5,$42,$55 ; $A9
      .BYTE $D5,$EA,$5B,$09,$49,$AD,$B6,$56,$25,$28,$E2,$ED,$7E,$4C,$2B ; $B8
      .BYTE $41,$92,$6D,$BF,$AB,$24,$00,$52,$6F,$B7,$B5,$6A,$49,$55,$5B ; $C7
      .BYTE $AB,$6A,$13,$08,$69,$DB,$5A,$95,$24,$BA,$6F,$57,$45,$48,$55 ; $D6
      .BYTE $DB,$AD,$85,$24,$42,$D5,$F6,$BD,$AD,$24,$02,$D5,$F6,$56,$93 ; $E5
      .BYTE $08,$51,$DB,$BE,$AD,$2A,$24,$49,$6F,$B7,$A9,$22,$08,$B5,$DD,$AB ; $F4
      .BYTE $A9,$44,$59,$6D,$6F,$25,$91,$94,$AA,$B6,$6D,$A9,$92,$A8,$DA ; $104
      .BYTE $75,$AB,$24,$91,$6A,$BB,$5D,$25,$41,$94,$6D,$D7,$AA,$52,$29 ; $113
      .BYTE $55,$6D,$B5,$A9,$52,$49,$B5,$6D,$4B,$A2,$54,$D5,$B6,$5A,$29 ; $122
      .BYTE $92,$54,$DB,$6D,$2D,$29,$52,$A5,$B6,$6D,$93,$4A,$52,$6B,$D5 ; $131
DPCMSampleDataEnd_DrumSample_A:
      .BYTE $92,$AA,$AA,$55,$5B,$55,$91,$54,$59,$B5,$55,$55,$49,$A5,$DA ; $140
      .BYTE $B6,$AB,$8A,$42,$A5,$F6,$B2,$25,$49,$56,$6D,$B5,$A9,$94,$CA ; $14F
      .BYTE $AA,$6A,$AB,$4A,$A5,$54,$69,$DB,$2B,$A9,$A4,$AA,$6A,$6D,$25 ; $15E
      .BYTE $49,$AD,$56,$55,$65,$45,$95,$6B,$D5,$55,$85,$8A,$52,$EF,$B6 ; $16D
      .BYTE $B5,$24,$A0,$AA,$D5,$55,$95,$52,$55,$B5,$5A,$AB,$A2,$AA,$AA ; $17C
      .BYTE $B6,$55,$A5,$82,$54,$DB,$6D,$55,$49,$48,$DB,$DE,$AA,$52,$09 ; $18B
      .BYTE $95,$6A,$5B,$55,$93,$2A,$55,$6B,$CB,$96,$52,$C9,$EA,$D5,$54 ; $19A
      .BYTE $42,$52,$B5,$6D,$6B,$A9,$42,$25,$BB,$76,$AD,$54,$88,$AA,$B6 ; $1A9
      .BYTE $6D,$55,$09,$69,$6B,$AB,$55,$92,$24,$55,$7F,$A5,$52,$A5,$54 ; $1B8
      .BYTE $6A,$57,$55,$55,$95,$AA,$B5,$55,$51,$49,$52,$BB,$B7,$25,$24 ; $1C7
      .BYTE $A9,$D8,$F5,$55,$95,$48,$92,$DD,$B7,$53,$22,$01,$69,$DF,$B7 ; $1D6
      .BYTE $96,$22,$24,$69,$DF,$5E,$95,$12,$29,$69,$5B,$AB,$A9,$20,$A9 ; $1E5
      .BYTE $6D,$6F,$5B,$51,$2A,$55,$96,$AC,$4A,$B5,$2D,$4B,$A9,$65,$55 ; $1F4
      .BYTE $95,$AD,$2A,$95,$A5,$D4,$6A,$57,$25,$92,$AA,$DA,$6D,$AB,$44 ; $203
      .BYTE $52,$25,$B5,$B7,$D5,$CA,$42,$2A,$D5,$AE,$2B,$4A,$94,$AA,$DA ; $212
      .BYTE $55,$AB,$5A,$A9,$22,$A9,$EA,$5A,$AB,$52,$AA,$5A,$AD,$2D,$A9 ; $221
      .BYTE $4A,$53,$A9,$AA,$5A,$5B,$12,$A2,$B6,$6E,$5F,$49,$92,$44,$BB ; $230
      .BYTE $5D,$53,$45,$A2,$54,$AB,$77,$2F,$25,$82,$A4,$D6,$EE,$6B,$49 ; $23F
      .BYTE $42,$6A,$DB,$4A,$95,$AA,$92,$AD,$B6,$6A,$53,$A1,$AA,$AA,$B6 ; $24E
      .BYTE $52,$25,$49,$ED,$AD,$AA,$A2,$AA,$AA,$56,$5B,$A5,$92,$25,$A5 ; $25D
      .BYTE $A9,$6D,$AB,$4A,$95,$56,$A9,$95,$AA,$52,$AB,$D6,$52,$AD,$AA ; $26C
      .BYTE $52,$95,$2A,$B5,$D5
      .BYTE $4A ; $27B
DPCMSampleDataEnd_DrumSample_B:
      ; the rest of the drum sample is unused
      .BYTE $A9,$2A,$55,$6D,$6B,$A5,$AA,$24,$55,$55,$DB,$4A,$95,$2A,$B5 ; NOT logged as PCM data
      .BYTE $AD,$AA,$AA,$49,$52,$B5,$A9,$AA,$CA,$52,$6B,$DB,$AA,$92,$44 ; $F
      .BYTE $92,$D5,$B7,$55,$45,$89,$B2,$DD,$5A,$95,$92,$54,$4A,$DF,$DA ; $1E
      .BYTE $A2,$22,$A9,$6A,$DB,$36,$91,$54,$B5,$B6,$5A,$49,$4A,$2D,$AB ; $2D
      .BYTE $B5,$A5,$24,$55,$D5,$DA,$6A,$2B,$44,$B2,$7A,$B7,$A9,$04,$A5 ; $3C
      .BYTE $AA,$DB,$56,$4A,$25,$D1,$B2,$DB,$B5,$52,$22,$A5,$6A,$5F,$4B ; $4B
      .BYTE $92,$24,$B5,$B7,$AD,$24,$92,$54,$DB,$6E,$95,$46,$91,$52,$DB ; $5A
      .BYTE $6D,$27,$49,$42,$6D,$77,$8D,$A5,$54,$49,$D3,$AA,$49,$6D,$55 ; $69
      .BYTE $55,$DB,$24,$A9,$52,$D9,$6A,$AF,$24,$91,$D2,$B6,$6D,$17,$09 ; $78
      .BYTE $92,$6A,$F7,$B6,$25,$09,$89,$DA,$BE,$B7,$2A,$08,$82,$DD,$BE,$55 ; $87
      .BYTE $95,$A4,$52,$DB,$56,$A9,$94,$24,$B5,$BB,$56,$4A,$25,$D5,$AA ; $97
      .BYTE $AB,$2A,$51,$53,$B5,$B5,$2A,$A5,$92,$55,$DB,$6A,$95,$24,$69 ; $A6
      .BYTE $AD,$B6,$95,$24,$A5,$B2,$5B,$AB,$4A,$95,$B4,$AA,$6D,$4B,$8A ; $B5
      .BYTE $2A,$B5,$B6,$55,$09,$12,$ED,$F6,$AA,$AB,$24,$A9,$94,$B6,$56 ; $C4
      .BYTE $5B,$49,$52,$D3,$D6,$6A,$25,$A9,$B6,$55,$25,$49,$A5,$AA,$AE ; $D3
      .BYTE $AD,$2A,$A9,$D2,$5A,$B5,$AA,$56,$42,$55,$5B,$55,$2B,$25,$55 ; $E2
      .BYTE $6B,$AB,$A9,$55,$29,$A9,$9A,$4A,$B5,$6A,$A9,$AA,$55,$A9,$6A ; $F1
      .BYTE $AB,$AA,$95,$2A,$28,$AD,$5D,$DB,$92,$24,$55,$B5,$DA,$B5,$92 ; $100
      .BYTE $A2,$54,$B5,$6D,$2B,$12,$AA,$D4,$6A,$DF,$2A,$89,$AA,$5A,$55 ; $10F
      .BYTE $D7,$24,$51,$55,$B5,$56,$2D,$29,$69,$AF,$56,$B5,$94,$88,$AA ; $11E
      .BYTE $2D,$5B,$AD,$52,$A5,$AA,$AA,$5A,$B5,$94,$DA,$AA,$AA,$A4,$12 ; $12D
      .BYTE $AD,$B6,$95,$A5,$AA,$B2,$DA,$56,$A9,$6A,$29,$89,$D5,$AA,$AA ; $13C
      .BYTE $A5,$4A,$55,$6B,$59,$69,$AD,$D4,$AA,$A5,$A8,$52,$55,$B5,$A9 ; $14B
      .BYTE $55,$55,$55,$6B,$55,$95,$92,$2A,$A9,$55,$AB,$52,$AD,$AA,$E9 ; $15A
      .BYTE $5A,$55,$42,$AB,$56,$55,$53,$29,$B1,$7A,$59,$B5,$54,$55,$52 ; $169
      .BYTE $6B,$AB,$56,$25,$49,$56,$6D ; $178
DPCMSampleDataEnd_DrumSample:
ENDIF

IFDEF PROTOTYPE_DPCM_SAMPLES
DPCMSampleData_DrumSample:
      .BYTE $5A, $AA, $9A, $AA, $AA, $55, $B5, $EA, $3F, $01, $82, $20, $04, $F4, $FF, $01
      .BYTE $00, $FB, $FF, $FF, $FF, $7F, $02, $FB, $09, $00, $00, $36, $55, $03, $20, $02
      .BYTE $00, $00, $40, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $BF, $4E, $28
      .BYTE $00, $00, $00, $00, $00, $00, $00, $00, $FF, $FF, $1F, $00, $00, $FE, $FF, $FF
      .BYTE $FF, $FF, $FF, $FF, $FF, $0F, $00, $20, $00, $00, $00, $00, $00, $00, $04, $00
      .BYTE $1B, $80, $1E, $FF, $FF, $FF, $FF, $FF, $FF, $FB, $FF, $AF, $FD, $A9, $43, $DA
      .BYTE $FE, $01, $00, $00, $00, $00, $00, $00, $00, $00, $80, $FA, $8F, $FD, $FA, $FF
      .BYTE $FF, $FF, $FF, $FF, $FF, $FF, $1F, $80, $7E, $91, $00, $00, $00, $00, $00, $00
      .BYTE $00, $00, $00, $FF, $8F, $03, $FA, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
      .BYTE $4E, $80, $00, $09, $00, $00, $00, $00, $00, $00, $00, $00, $F9, $1F, $C0, $FF
      .BYTE $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $BB, $53, $02, $54, $00, $00, $00, $00
      .BYTE $00, $00, $11, $90, $24, $B6, $24, $B4, $03, $BF, $FE, $FF, $FF, $FF, $FF, $FF
      .BYTE $FF, $FF, $FF, $0F, $48, $00, $00, $00, $00, $00, $00, $00, $00, $48, $80, $BE
      .BYTE $6B, $FC, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $5F, $35, $01, $00, $00, $00
      .BYTE $00, $00, $00, $00, $00, $90, $2F, $20, $E9, $FF, $FF, $FF, $FF, $FF, $FF, $FF
      .BYTE $FF, $FF, $ED, $2A, $92, $00, $00, $00, $00, $00, $00, $00, $00, $00, $BA, $F4
      .BYTE $FD, $EF, $F7, $FF, $FF, $FF, $5F, $7A, $D9, $53, $FF, $4E, $00, $00, $01, $BC
      .BYTE $10, $80, $03, $FA, $7F, $F0, $24, $34, $AA, $40, $FF, $F3, $DA, $8F, $82, $A8
      .BYTE $D0, $02, $C0, $DF, $FE, $EA, $D5, $FF, $FF, $CA, $51, $25, $00, $EA, $A8, $84
      .BYTE $0F, $50, $01, $40, $13, $4A, $E0, $3F, $A1, $FF, $FF, $F5, $FF, $17, $DA, $EA
      .BYTE $6C, $45, $FD, $2F, $08, $B0, $00, $00, $80, $25, $01, $00, $BF, $F6, $FF, $FF
      .BYTE $56, $7D, $17, $7F, $F5, $C2, $2A, $A2, $04, $F6, $0E, $00, $20, $A0, $D7, $FE
      .BYTE $49, $FF, $B7, $E3, $12, $7B, $88, $A5, $86, $03, $05, $4F, $F0, $1F, $C0, $BE
      .BYTE $DD, $C9, $FE, $17, $00, $8E, $5A, $B5, $56, $23, $3E, $A2, $2A, $B5, $02, $85
DPCMSampleDataEnd_DrumSample_A:
      .BYTE $2A, $11, $FD, $8B, $5D, $FD, $89, $EA, $FF, $FF, $7D, $ED, $81, $62, $05, $04
      .BYTE $10, $00, $89, $11, $3C, $2A, $54, $00, $AA, $5F, $DD, $A5, $FE, $FF, $FF, $FF
      .BYTE $FF, $85, $15, $9B, $08, $90, $80, $D6, $4A, $20, $41, $92, $05, $8A, $17, $FC
      .BYTE $B5, $FF, $DD, $77, $56, $04, $D9, $49, $80, $84, $AD, $B8, $A8, $81, $52, $7F
      .BYTE $FC, $EB, $FE, $FD, $DF, $54, $7D, $6B, $09, $80, $05, $7E, $11, $80, $40, $80
      .BYTE $C0, $48, $00, $D0, $FF, $53, $DB, $FE, $FF, $AB, $FE, $B7, $DD, $A5, $4B, $7F
      .BYTE $F1, $57, $92, $08, $00, $00, $00, $81, $5A, $01, $56, $2B, $BB, $E2, $DB, $FE
      .BYTE $AB, $FB, $2E, $EE, $D7, $45, $49, $94, $AA, $7D, $02, $50, $B2, $2B, $C9, $69
      .BYTE $1A, $81, $AE, $2A, $5A, $A9, $6A, $B7, $8F, $50, $D5, $17, $10, $D4, $FD, $DF
      .BYTE $FE, $7F, $BB, $7A, $81, $12, $40, $AD, $00, $08, $42, $00, $4A, $A9, $5A, $5B
      .BYTE $02, $FD, $FF, $6E, $DF, $F7, $7F, $D7, $F7, $76, $FF, $45, $12, $00, $00, $02
      .BYTE $00, $00, $00, $00, $48, $E8, $54, $B7, $EF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
      .BYTE $7F, $5D, $60, $09, $00, $00, $00, $00, $00, $00, $00, $00, $49, $E8, $7B, $F7
      .BYTE $FF, $FF, $FF, $FF, $FF, $FF, $FF, $E7, $8B, $02, $50, $09, $00, $00, $00, $00
      .BYTE $00, $00, $40, $2B, $BF, $F6, $E4, $FF, $EB, $FF, $FF, $7F, $5F, $27, $ED, $EB
      .BYTE $4E, $48, $A2, $20, $02, $20, $49, $89, $52, $49, $92, $50, $BB, $4A, $00, $4A
      .BYTE $FC, $FF, $BF, $72, $97, $F6, $EF, $FF, $55, $55, $AB, $2A, $49, $2F, $5A, $00
      .BYTE $80, $8A, $12, $20, $01, $91, $FA, $50, $02, $9F, $F6, $ED, $FF, $FF, $EF, $C5
      .BYTE $FE, $75, $25, $54, $A9, $AA, $4A, $40, $22, $45, $80, $20, $A5, $95, $FA, $A9
      .BYTE $89, $20, $FF, $57, $DD, $F7, $7D, $AD, $BA, $89, $53, $25, $11, $04, $D7, $96
      .BYTE $00, $80, $BD, $D8, $A5, $EE, $57, $F7, $A9, $FB, $B4, $EA, $D5, $44, $12, $2C
      .BYTE $A1, $09, $2A, $49, $4A, $2B, $00, $69, $FF, $25, $AA, $57, $7F, $F5, $DA, $DB
      .BYTE $8A, $9B, $DA, $F6, $6D, $01, $10, $58, $D5, $8A, $6C, $49, $11, $25, $D0, $E9
      .BYTE $2D, $59, $55, $A3, $BE, $B3, $AD, $A8, $B3, $AD, $04, $AD, $DA, $F6, $B7, $E8
      .BYTE $45, $92, $9A, $48, $92, $54, $49, $B0, $3B, $49, $89, $6A, $05, $ED, $FB, $09
      .BYTE $EA, $6B, $CB, $FE, $EB, $47, $68, $ED, $5E, $55, $52, $09, $00, $25, $51, $12
      .BYTE $D4, $A8, $4A, $FB, $89, $6B, $97, $4A, $AA, $ED, $76, $75, $6F, $AB, $56, $04
      .BYTE $2A, $B1, $5A, $D5, $6A, $6D, $D5, $AE, $54, $45, $16, $54, $F7, $52, $44, $25
      .BYTE $16, $AD, $A8, $92, $25, $29, $69, $2B, $5B, $B5, $6B, $D5, $7D, $6F, $D5, $4A
      .BYTE $AB, $AA, $6F, $93, $5A, $90, $1B, $09, $90, $94, $04, $92, $D5, $54, $4A, $D2
      .BYTE $56, $E9, $BF, $56, $AD, $D2, $F6, $EE, $FB, $F7, $12, $AA, $0A, $AA, $AC, $20
      .BYTE $51, $82, $A4, $FD, $22, $09, $50, $95, $48, $72, $D5, $B6, $EF, $AF, $C4, $6A
      .BYTE $2F, $B5, $F5, $7B, $CB, $6A, $DF, $A9, $A2, $04, $48, $02, $85, $56, $50, $02
      .BYTE $89, $AA, $12, $55, $55, $DB, $F6, $FF, $FD, $DE, $6E, $DF, $A6, $AB, $A5, $B6
      .BYTE $49, $95, $08, $00, $92, $08, $80, $80, $44, $10, $EB, $DE, $76, $6F, $F5, $ED
      .BYTE $DF, $F6, $7D, $AF, $A6, $EA, $DB, $AB, $0A, $28, $41, $80, $80, $0A, $82, $22
      .BYTE $29, $15, $57, $B5, $6D, $7B, $BB, $AA, $5B, $BF, $AF, $DF, $BA, $56, $2B, $41
      .BYTE $AA, $25, $01, $A2, $24, $41, $A2, $92, $44, $92, $95, $AA, $6D, $5F, $B5, $7D
      .BYTE $7F, $F5, $B2, $DF, $DA, $B6, $DB, $D6, $96, $20, $08, $88, $04, $41, $50, $20
      .BYTE $48, $55, $A5, $CE, $92, $A5, $F6, $EB, $DB, $F6, $77, $7F, $BF, $7D, $D3, $DA
DPCMSampleDataEnd_DrumSample_B:
ENDIF

ScreenUpdateBufferPointers:
      .WORD PPUBuffer_301
      .WORD PPUBuffer_583
      .WORD PPUBuffer_55F
      .WORD PPUBuffer_CharacterSelect
      .WORD PPUBuffer_BANKE_DE7A
      .WORD PPUBuffer_Text_Game_Over
      .WORD PPUBuffer_67B
      .WORD PPUBuffer_Text_Retry
      .WORD PPUBuffer_7168
      .WORD PPUBuffer_67B
      .WORD PPUBuffer_693
      .WORD PPUBuffer_6AB
      .WORD PPUBuffer_6BD
      .WORD PPUBuffer_6CC
      .WORD PPUBuffer_6E9
      .WORD PPUBuffer_6DA
      .WORD PPUBuffer_6DF
      .WORD PPUBuffer_6E4
      .WORD PPUBuffer_7194
      .WORD PPUBuffer_71A8
      .WORD PPUBuffer_721B
      .WORD PPUBuffer_BANKE_DFAF
      .WORD PPUBuffer_BANKE_DFA7
      .WORD BonusChanceLayoutRAM
PPUBuffer_CharacterSelect:
      .BYTE $21,$49,$06,$E9,$E5,$DE,$DA,$EC,$DE ; PLEASE
      .BYTE $21,$50,$06,$EC,$DE,$E5,$DE,$DC,$ED ; SELECT
      .BYTE $21,$8C,$06,$E9,$E5,$DA,$F2,$DE,$EB ; PLAYER
      .BYTE $20,$00,$20,$B7,$B8,$B7,$B8,$B7,$B8,$B7,$B8,$B7,$B8,$B7,$B8 ; Probably the checkerboard diamonds or w/e
      .BYTE $B7,$B8,$B7,$B8,$B7,$B8,$B7,$B8,$B7,$B8,$B7,$B8,$B7,$B8,$B7 ; $F
      .BYTE $B8,$B7,$B8,$B7,$B8 ; $1E
      .BYTE $20,$20,$20,$B9,$BA,$B9,$BA,$B9,$BA,$B9,$BA,$B9,$BA,$B9,$BA
      .BYTE $B9,$BA,$B9,$BA,$B9,$BA,$B9,$BA,$B9,$BA,$B9,$BA,$B9,$BA,$B9 ; $F
      .BYTE $BA,$B9,$BA,$B9,$BA ; $1E
      .BYTE $23,$80,$20,$B7,$B8,$B7,$B8,$B7,$B8,$B7,$B8,$B7,$B8,$B7,$B8
      .BYTE $B7,$B8,$B7,$B8,$B7,$B8,$B7,$B8,$B7,$B8,$B7,$B8,$B7,$B8,$B7 ; $F
      .BYTE $B8,$B7,$B8,$B7,$B8 ; $1E
      .BYTE $23,$A0,$20,$B9,$BA,$B9,$BA,$B9,$BA,$B9,$BA,$B9,$BA,$B9,$BA
      .BYTE $B9,$BA,$B9,$BA,$B9,$BA,$B9,$BA,$B9,$BA,$B9,$BA,$B9,$BA,$B9 ; $F
      .BYTE $BA,$B9,$BA,$B9,$BA ; $1E
      .BYTE $20,$00,$9E,$B7,$B9,$B7,$B9,$B7,$B9,$B7,$B9,$B7,$B9,$B7,$B9
      .BYTE $B7,$B9,$B7,$B9,$B7,$B9,$B7,$B9,$B7,$B9,$B7,$B9,$B7,$B9,$B7 ; $F
      .BYTE $B9,$B7,$B9 ; $1E
      .BYTE $20,$01,$9E,$B8,$BA,$B8,$BA,$B8,$BA,$B8,$BA,$B8,$BA,$B8,$BA
      .BYTE $B8,$BA,$B8,$BA,$B8,$BA,$B8,$BA,$B8,$BA,$B8,$BA,$B8,$BA,$B8 ; $F
      .BYTE $BA,$B8,$BA ; $1E
      .BYTE $20,$1E,$9E,$B7,$B9,$B7,$B9,$B7,$B9,$B7,$B9,$B7,$B9,$B7,$B9
      .BYTE $B7,$B9,$B7,$B9,$B7,$B9,$B7,$B9,$B7,$B9,$B7,$B9,$B7,$B9,$B7 ; $F
      .BYTE $B9,$B7,$B9 ; $1E
      .BYTE $20,$1F,$9E,$B8,$BA,$B8,$BA,$B8,$BA,$B8,$BA,$B8,$BA,$B8,$BA
      .BYTE $B8,$BA,$B8,$BA,$B8,$BA,$B8,$BA,$B8,$BA,$B8,$BA,$B8,$BA,$B8 ; $F
      .BYTE $BA,$B8,$BA ; $1E
      .BYTE $20,$42,$5C,$FD
      .BYTE $20,$62,$5C,$FD
      .BYTE $20,$47,$05,$00,$01,$02,$03,4
      .BYTE $20,$54,$05,$05,$06,$07,$08,9
      .BYTE $20,$63,$0A,$A,$0B,$C,$0D,$E,$0F,$10,$11,$12,$13
      .BYTE $20,$73,$0A,$14,$15,$16,$17,$18,$19,$1A,$1B,$1C,$1D
      .BYTE $20,$82,$1C,$1E,$1F,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29
      .BYTE $FD,$FD,$FD,$FD,$2A,$2B,$2C,$2D,$2E,$2F,$30,$31,$32,$33,$34 ; $F
      .BYTE $35 ; $1E
      .BYTE $20,$A2,$06,$36,$37,$38,$39,$3A,$3B
      .BYTE $20,$AB,$0A,$3C,$3D,$3E,$3F,$40,$43,$44,$45,$46,$47
      .BYTE $20,$B8,$06,$48,$49,$4A,$4B,$4C,$4D
      .BYTE $20,$C2,$05,$4E,$4F,$50,$51,$52
      .BYTE $20,$D9,$05,$53,$54,$55,$56,$57
      .BYTE $20,$E2,$04,$58,$59,$5A,$5B
      .BYTE $20,$E6,$CD,$5C
      .BYTE $20,$F9,$CD,$5C
      .BYTE $20,$FA,$04,$5D,$5E,$5F,$60
      .BYTE $21,$02,$83,$61,$64,$67
      .BYTE $21,$03,$8B,$62,$65,$68,$6A,$6C,$6F,$72,$75,$78,$7B,$7E
      .BYTE $21,$04,$94,$63,$66,$69,$6B,$6D,$70,$73,$76,$79,$7C,$7F,$81
      .BYTE $82,$83,$84,$85,$86,$87,$88,$89 ; $F
      .BYTE $21,$85,$89,$6E,$71,$74,$77,$7A,$7D,$80,$6E,$6E
      .BYTE $21,$9A,$89,$97,$9A,$9D,$BB,$A0,$A3,$A6,$A9,$AB
      .BYTE $21,$1B,$94,$8C,$8F,$92,$95,$98,$9B,$9E,$BC,$A1,$A4,$A7,$AA
      .BYTE $AC,$AD,$AE,$B0,$B1,$B2,$B3,$B4 ; $F
      .BYTE $21,$1C,$8B,$8D,$90,$93,$96,$99,$9C,$9F,$BD,$A2,$A5,$A8
      .BYTE $21,$1D,$83,$8E,$91,$94
      .BYTE $21,$62,$D1,$FD
      .BYTE $21,$7D,$D1,$FD
      .BYTE $22,$63,$C9,$FD,$22,$7C,$C9,$FD,$22,$86,$82,$8A,$8B,$22,$99
      .BYTE $82,$8A,$8B ; $F
      .BYTE $00
PPUBuffer_BANKE_DE7A:
      .BYTE $23,$C0,$09,$3E,$0E,$E,$0E,$E,$0E,$E,$8E,$32
      .BYTE $23,$CF,$01,$8C
      .BYTE $23,$D0,$10,$32,$00,$A0,$A0,$A0,$20,$00,$8C,$32,$00,$00,$0A,$02,$00,$00,$8C
      .BYTE $23,$E0,$09,$32,$00,$00,$0E,$00,$00,$00,$8C,$32
      .BYTE $23,$EF,$01,$8C
      .BYTE $23,$F0,$06,$32,$00,$A0,$A0,$A0,$A0
      .BYTE $23,$F7,$09,$8C,$0E,$E,$0E,$E,$0E,$E,$0E,$E
      .BYTE $24,$00,$60,$FF
      .BYTE $24,$20,$60,$FF
      .BYTE $24,$40,$60,$FF
      .BYTE $24,$60,$60,$FF
      .BYTE $27,$40,$60,$FF
      .BYTE $27,$60,$60,$FF
      .BYTE $27,$80,$60,$FF
      .BYTE $27,$A0,$60,$FF
      .BYTE $24,$80,$D6,$FF
      .BYTE $24,$81,$D6,$FF
      .BYTE $24,$82,$D6,$FF
      .BYTE $24,$9D,$D6,$FF
      .BYTE $24,$9E,$D6,$FF
      .BYTE $24,$9F,$D6,$FF
      .BYTE $24,$83,$01,$D0
      .BYTE $24,$9C,$01,$D8
      .BYTE $24,$84,$58,$FB
      .BYTE $24,$A3,$D4,$D1
      .BYTE $24,$BC,$D4,$D7
      .BYTE $24,$A4,$58,$FB
      .BYTE $24,$C4,$58,$FB
      .BYTE $24,$E4,$58,$FB
      .BYTE $25,$04,$58,$FB
      .BYTE $25,$24,$58,$FB
      .BYTE $25,$44,$58,$FB
      .BYTE $25,$64,$58,$FB
      .BYTE $25,$84,$58,$FB
      .BYTE $25,$A4,$58,$FB
      .BYTE $25,$C4,$58,$FB
      .BYTE $25,$E4,$58,$FB
      .BYTE $26,$04,$58,$FB
      .BYTE $26,$24,$58,$FB
      .BYTE $26,$44,$58,$FB
      .BYTE $26,$64,$58,$FB
      .BYTE $26,$84,$58,$FB
      .BYTE $26,$A4,$58,$FB
      .BYTE $26,$C4,$58,$FB
      .BYTE $26,$E4,$58,$FB
      .BYTE $27,$23,$01,$D2
      .BYTE $27,$3C,$01,$D6
      .BYTE $27,$24,$58,$D3
      .BYTE $27,$C8,$08,$44,$FF,$BF,$AF,$AF,$AF,$FF,$11
      .BYTE $27,$D0,$10,$44,$BF,$AF,$AF,$AF,$AF,$EF,$11,$44,$FF,$FF,$FF
      .BYTE $FF,$FF,$FF,$11 ; $F
      .BYTE $27,$E0,$10,$44,$FF,$FF,$FF,$FF,$FF,$FF,$11,$44,$FF,$FF,$FF
      .BYTE $FF,$FF,$AF,$11 ; $F
      .BYTE $27,$F0,$08,$44,$05,$05,$05,$05,$05,$05,1
      .BYTE $27,$04,$58,$FB
      .BYTE $00
PPUBuffer_BANKE_DFA7:
      .BYTE $27,$EA,$05,$AA,$AA,$AA,$AA,$AA
PPUBuffer_BANKE_DFAF:
      .BYTE $20,$1E,$9E,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
      .BYTE $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; $F
      .BYTE $FF,$FF,$FF ; $1E
      .BYTE $20,$1F,$9E,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
      .BYTE $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; $F
      .BYTE $FF,$FF,$FF ; $1E
      .BYTE $23,$C7,$01,0
      .BYTE $23,$CF,$01,0
      .BYTE $23,$D7,$01,0
      .BYTE $23,$DF,$01 ; Data continues in Bank E
; end of 'BANKE'

; ===========================================================================



; -------------------------------------------


; .segment BANKF
; * =  $E000
      .BYTE $00 ; PPUBuffer_BANKE_DFA7 continued from end of Bank D
      .BYTE $23,$E7,$01,0
      .BYTE $23,$EF,$01,0
      .BYTE $23,$F7,$01,0
      .BYTE $23,$FF,$01,0
      .BYTE $00
WorldStartingLevel:
      .BYTE $00
      .BYTE $03 ; $00
      .BYTE $06 ; $01
      .BYTE $09 ; $02
      .BYTE $0C ; $03
      .BYTE $0F ; $04
      .BYTE $12 ; $05
      .BYTE $14 ; $06
PlayerSelectMarioSprites1:
      .BYTE $8F,$00,$00,$48 ; $00
      .BYTE $8F,$00,$40,$50 ; $04
      .BYTE $9F,$02,$00,$48 ; $08
      .BYTE $9F,$02,$40,$50 ; $0C
PlayerSelectLuigiSprites1:
      .BYTE $8F,$04,$01,$68 ; $00
      .BYTE $8F,$04,$41,$70 ; $04
      .BYTE $9F,$06,$01,$68 ; $08
      .BYTE $9F,$06,$41,$70 ; $0C
PlayerSelectToadSprites1:
      .BYTE $8F,$08,$02,$88 ; $00
      .BYTE $8F,$08,$42,$90 ; $04
      .BYTE $9F,$0A,$02,$88 ; $08
      .BYTE $9F,$0A,$42,$90 ; $0C
PlayerSelectPrincessSprites1:
      .BYTE $8F,$0C,$03,$A8 ; $00
      .BYTE $8F,$0C,$43,$B0 ; $04
      .BYTE $9F,$0E,$03,$A8 ; $08
      .BYTE $9F,$0E,$43,$B0 ; $0C
PlayerSelectMarioSprites2:
      .BYTE $8F,$10,$00,$48 ; $00
      .BYTE $8F,$12,$00,$50 ; $04
      .BYTE $9F,$14,$00,$48 ; $08
      .BYTE $9F,$16,$00,$50 ; $0C
PlayerSelectLuigiSprites2:
      .BYTE $8F,$18,$01,$68 ; $00
      .BYTE $8F,$1A,$01,$70 ; $04
      .BYTE $9F,$1C,$01,$68 ; $08
      .BYTE $9F,$1E,$01,$70 ; $0C
PlayerSelectToadSprites2:
      .BYTE $8F,$20,$02,$88 ; $00
      .BYTE $8F,$22,$02,$90 ; $04
      .BYTE $9F,$24,$02,$88 ; $08
      .BYTE $9F,$26,$02,$90 ; $0C
PlayerSelectPrincessSprites2:
      .BYTE $8F,$28,$03,$A8 ; $00
      .BYTE $8F,$2A,$03,$B0 ; $04
      .BYTE $9F,$2C,$03,$A8 ; $08
      .BYTE $9F,$2E,$03,$B0 ; $0C
PlayerSelectSpriteIndexes:
      .BYTE $00, $30, $20, $10
BonusChanceCherrySprite:
      .BYTE $5F,$05,$01,$58 ; $00
      .BYTE $5F,$07,$01,$60 ; $04
BonusChanceStarSprite:
      .BYTE $5F,$09,$01,$58 ; $00
      .BYTE $5F,$09,$41,$60 ; $04
BonusChanceVeggieSprite:
      .BYTE $5F,$0B,$01,$58 ; $00
      .BYTE $5F,$0B,$41,$60 ; $04
BonusChanceSnifitSprite:
      .BYTE $5F,$01,$01,$58 ; $00
      .BYTE $5F,$03,$01,$60 ; $04

PlayerSelectSpritePalettesDark:
      .BYTE $3F,$10,$10,$0F,$22,$12,$01,$0F,$22,$12,$01,$0F,$22,$12,$01,$0F,$22
      .BYTE $12,$01 ; This is actually PPU data, not a straight-up palette

PlayerSelectPaletteOffsets:
      .BYTE (PlayerSelectSpritePalettes_Mario-PlayerSelectSpritePalettes)
      .BYTE (PlayerSelectSpritePalettes_Princess-PlayerSelectSpritePalettes)
      .BYTE (PlayerSelectSpritePalettes_Toad-PlayerSelectSpritePalettes)
      .BYTE (PlayerSelectSpritePalettes_Luigi-PlayerSelectSpritePalettes)
PlayerSelectSpritePalettes:
PlayerSelectSpritePalettes_Mario:
      .BYTE $3F,$10,$04,$0F,$27,$16,$01
PlayerSelectSpritePalettes_Luigi:
      .BYTE $3F,$14,$04,$0F,$36,$2A,$01
PlayerSelectSpritePalettes_Toad:
      .BYTE $3F,$18,$04,$0F,$27,$30,$01
PlayerSelectSpritePalettes_Princess:
      .BYTE $3F,$1C,$04,$0F,$36,$25,$07

TitleCardPalettes:
      .BYTE $3F,$00,$20 ; PPU data
      .BYTE $38,$30,$1A,$0F
      .BYTE $38,$38,$0F,$0F
      .BYTE $38,$17,$17,$38
      .BYTE $38,$28,$18,$08
      .BYTE $38,$30,$27,$01
      .BYTE $38,$37,$27,$06
      .BYTE $38,$25,$36,$06
      .BYTE $38,$12,$36,$01
      .BYTE $00

BonusChanceSpritePalettes:
      .BYTE $0F,$37,$16,$0F
      .BYTE $0F,$37,$16,$0F ; 4
      .BYTE $0F,$37,$16,$0F ; 8
      .BYTE $0F,$37,$16,$0F ; $C


;
; Load A with an index and call this to
; jump to a pointer from the table directly
; after the call.
;
JumpToTableAfterJump:
      ASL     A
      TAY
      PLA
      STA     byte_RAM_A
      PLA
      STA     byte_RAM_B
      INY
      LDA     (byte_RAM_A),Y
      STA     byte_RAM_C
      INY
      LDA     (byte_RAM_A),Y
      STA     byte_RAM_D
      JMP     (byte_RAM_C)


BlackAndWhitePalette:
      .BYTE $0F,$30,$30,$0F


SetBlackAndWhitePalette:
      LDA     PPUSTATUS
      LDA     #$3F
      LDY     #$00
      STA     PPUADDR
      STY     PPUADDR

SetBlackAndWhitePalette_Loop:
      TYA
      AND     #$03
      TAX
      LDA     BlackAndWhitePalette,X
      STA     PPUDATA
      INY
      CPY     #$14
      BCC     SetBlackAndWhitePalette_Loop

      RTS


SetScrollXYTo0:
      LDA     #$00
      STA     PPUScrollYMirror
      STA     PPUScrollXMirror
      STA     byte_RAM_C8
      STA     byte_RAM_C9
      RTS


;
; Clears the screen and resets the scroll position for the title card
;
; This is used for the character select screen as well, but that has a few PPU
; changes of its own.
;
ResetScreenForTitleCard:
      JSR     EnableNMI

      JSR     WaitForNMI_TurnOffPPU

      JSR     SetScrollXYTo0

      LDA     #ScreenUpdateBuffer_RAM_55F
      STA     ScreenUpdateIndex
      JSR     WaitForNMI

      LDA     #VMirror
      JSR     ChangeNametableMirroring

      JSR     ClearNametablesAndSprites

      RTS


;
; Enables NMI and draws the background of the pause screen
;
EnableNMI_PauseTitleCard:
      JSR     EnableNMI

      JSR     WaitForNMI_TurnOffPPU

      LDA     #Stack100_Menu
      STA     StackArea
      LDA     #ScreenUpdateBuffer_CharacterSelect
      STA     ScreenUpdateIndex
      JSR     WaitForNMI

      LDA     #ScreenUpdateBuffer_BANKE_DE7A
      STA     ScreenUpdateIndex
      JMP     WaitForNMI


;
; Draws world info for the title card and pause screens
;
; Input
;   X = CurrentWorld
;   Y = CurrentLevel (not actually used)
;
DisplayLevelTitleCardText:
      ; Level number (unused)
      ; In Doki Doki Panic, this was displayed as a page number, keeping with
      ; the storybook motif.
      INY
      TYA
      JSR     GetTwoDigitNumberTiles

      ; World number
      INX
      TXA
      ORA     #$D0
      STA     byte_RAM_717D

      ; Extra Life number
      LDY     ExtraLives
      DEY
      TYA
      JSR     GetTwoDigitNumberTiles
      STY     byte_RAM_7191
      STA     byte_RAM_7192

      ; Reset level dots
      LDY     #$06
      LDA     #$FB
loc_BANKF_E1B6:
      STA     unk_RAM_716B,Y ; writes to $7171
      DEY
      BPL     loc_BANKF_E1B6

      ; Level number
      LDY     CurrentWorld
      LDA     CurrentLevel
      SEC
      SBC     WorldStartingLevel,Y
      STA     CurrentLevelRelative
      CLC
      ADC     #$D1
      STA     byte_RAM_717F

      LDA     WorldStartingLevel+1,Y
      SEC
      SBC     WorldStartingLevel,Y
      STA     byte_RAM_3

      ; Level dots
      LDX     #$00
      LDY     #$00
loc_BANKF_E1DC:
      LDA     #$FD
      CPX     CurrentLevelRelative
      BNE     loc_BANKF_E1E5

      LDA     #$F6

loc_BANKF_E1E5:
      STA     unk_RAM_716B,Y
      INY
      INY
      INX
      CPX     byte_RAM_3
      BCC     loc_BANKF_E1DC

      ; Draw the card
      LDA     #ScreenUpdateBuffer_RAM_7168
      STA     ScreenUpdateIndex
      RTS


;
; It's game time, pal
;
SetStack100Gameplay:
      LDA     #Stack100_Gameplay
      STA     StackArea
      RTS


; =============== S U B R O U T I N E =======================================

;
; Resets various level-related variables to $00
;
InitializeSomeLevelStuff:
      LDA     #$00
      STA     CurrentLevelArea
      STA     CurrentLevelArea_Init
      STA     CurrentLevelEntryPage
      STA     CurrentLevelEntryPage_Init
      STA     TransitionType
      STA     TransitionType_Init
      STA     PlayerState
      STA     PlayerState_Init
      STA     InSubspaceOrJar
      STA     InJarType
      STA     StopwatchTimer
      STA     PlayerCurrentSize
      RTS


PlayerSelectArrowTop:
      .BYTE $C9
      .BYTE $D5
      .BYTE $D1
      .BYTE $CD
PlayerSelectArrowBottom:
      .BYTE $E9
      .BYTE $F5
      .BYTE $F1
      .BYTE $ED


;
; Displays the level title card and prepares the level to start by loading
; the world tiles, PRG banks A/B, and copying character data
;
DisplayLevelTitleCardAndMore:
      JSR     WaitForNMI_TurnOffPPU

      JSR     DisableNMI

      ; Set the scrolling mirror over to the right side...
      ; This Isn't quiiite correct, and causes a bunch of
      ; crud to show on the very left pixel -- residue
      ; from the character select screen
      LDA     #$FF
      STA     PPUScrollXMirror
      JSR     ChangeTitleCardCHR

      LDA     #PRGBank_A_B
      JSR     ChangeMappedPRGBank

      JSR     CopyCharacterStatsAndStuff

      JSR     EnableNMI

      JSR     HideAllSprites

      LDY     #$23
DisplayLevelTitleCardAndMore_TitleCardPaletteLoop:
      LDA     TitleCardPalettes,Y
      STA     PPUBuffer_55F,Y
      DEY
      BPL     DisplayLevelTitleCardAndMore_TitleCardPaletteLoop

      LDA     #ScreenUpdateBuffer_RAM_55F ; Then tell it to dump that into the PPU
      STA     ScreenUpdateIndex
      JSR     WaitForNMI

      LDA     #ScreenUpdateBuffer_BANKE_DFAF ; @TODO I am not sure what this is doing, exactly
      STA     ScreenUpdateIndex ; Commenting it out doesn't seem to have any effect
      JSR     WaitForNMI

      JSR     DrawTitleCardWorldImage

      JSR     WaitForNMI_TurnOnPPU

      JSR     RestorePlayerToFullHealth

      ; Pause for the title card
      LDA     #$50
      STA     byte_RAM_2
PreLevelTitleCard_PauseLoop:
      JSR     WaitForNMI
      DEC     byte_RAM_2
      BPL     PreLevelTitleCard_PauseLoop

PreStartLevel:
      JSR     SetStack100Gameplay

      JSR     WaitForNMI_TurnOffPPU

      JSR     DisableNMI

      JSR     LoadWorldCHRBanks

      LDA     #PRGBank_A_B
      JSR     ChangeMappedPRGBank

      JSR     CopyCharacterStatsAndStuff

      JSR     EnableNMI

      RTS


;
; Runs the Character Select menu
;
DoCharacterSelectMenu:
      JSR     WaitForNMI

      LDA     #$00
      STA     PPUMASK
      JSR     DisableNMI

      JSR     LoadCharacterSelectCHRBanks

      LDA     #PRGBank_A_B
      JSR     ChangeMappedPRGBank

      JSR     CopyCharacterStatsAndStuff

      JSR     ResetScreenForTitleCard

      LDA     CharacterSelectBankSwitch
      CMP     #$A5
      BEQ     loc_BANKF_E2B2

      LDA     #PRGBank_A_B
      JSR     ChangeMappedPRGBank

      LDA     #$A5
      STA     CharacterSelectBankSwitch

loc_BANKF_E2B2:
      JSR     EnableNMI_PauseTitleCard

      JSR     DisableNMI

      LDA     #Music1_CharacterSelect
      STA     MusicQueue1
      LDA     CurrentCharacter
      STA     PreviousCharacter
      LDA     CurrentWorld
      STA     PreviousWorld
      LDY     #$3F

loc_BANKF_E2CA:
      LDA     PlayerSelectMarioSprites1,Y
      STA     SpriteDMAArea+$10,Y
      DEY
      BPL     loc_BANKF_E2CA

      JSR     EnableNMI

      JSR     WaitForNMI

      LDX     CurrentWorld
      LDY     CurrentLevel
      JSR     DisplayLevelTitleCardText

      JSR     WaitForNMI

      JMP     loc_BANKF_E311

; ---------------------------------------------------------------------------

loc_BANKF_E2E8:
      LDA     Player1JoypadPress
      AND     #ControllerInput_Right|ControllerInput_Left
      BNE     CharacterSelect_ChangeCharacter

      JMP     CharacterSelectMenuLoop

; ---------------------------------------------------------------------------

CharacterSelect_ChangeCharacter:
      LDA     Player1JoypadPress
      AND     #ControllerInput_Right
      BEQ     loc_BANKF_E2FE

      DEC     CurrentCharacter
      LDA     #SoundEffect1_CherryGet
      STA     SoundEffectQueue1

loc_BANKF_E2FE:
      LDA     Player1JoypadPress
      AND     #ControllerInput_Left
      BEQ     loc_BANKF_E30B

      INC     CurrentCharacter
      LDA     #SoundEffect1_CherryGet
      STA     SoundEffectQueue1

loc_BANKF_E30B:
      LDA     CurrentCharacter
      AND     #$03
      STA     CurrentCharacter

loc_BANKF_E311:
      LDY     #$00
      LDA     #$21
      STA     PPUBuffer_301
      LDA     #$C9
      STA     PPUBuffer_301+1
      LDA     #$4F
      STA     PPUBuffer_301+2
      LDA     #$FB
      STA     PPUBuffer_301+3
      LDA     #$21
      STA     PPUBuffer_301+4
      LDA     #$E9
      STA     PPUBuffer_301+5
      LDA     #$4F
      STA     PPUBuffer_301+6
      LDA     #$FB
      STA     PPUBuffer_301+7
      LDY     CurrentCharacter
      LDA     #$21
      STA     PPUBuffer_301+8
      LDA     PlayerSelectArrowTop,Y
      STA     PPUBuffer_301+9
      LDA     #$02
      STA     PPUBuffer_301+10
      LDA     #$BE
      STA     PPUBuffer_301+11
      LDA     #$C0
      STA     PPUBuffer_301+12
      LDA     #$21
      STA     PPUBuffer_301+13
      LDA     PlayerSelectArrowBottom,Y
      STA     PPUBuffer_301+14
      LDA     #$02
      STA     PPUBuffer_301+15
      LDA     #$BF
      STA     PPUBuffer_301+16
      LDA     #$C1
      STA     PPUBuffer_301+17
      LDA     #$00
      STA     PPUBuffer_301+18
      JSR     WaitForNMI_TurnOnPPU

      LDX     #$12
      LDY     #$00

loc_BANKF_E37D:
      LDA     PlayerSelectSpritePalettesDark,Y
      STA     PPUBuffer_301,Y
      INY
      DEX
      BPL     loc_BANKF_E37D

      LDA     #$06
      STA     byte_RAM_A
      LDX     CurrentCharacter
      LDA     PlayerSelectPaletteOffsets,X
      TAX

loc_BANKF_E391:
      LDA     PlayerSelectSpritePalettes,X
      STA     PPUBuffer_301,Y
      INY
      INX
      DEC     byte_RAM_A
      BPL     loc_BANKF_E391

      LDA     #$00
      STA     PPUBuffer_301,Y

CharacterSelectMenuLoop:
      JSR     WaitForNMI_TurnOnPPU

      LDA     Player1JoypadPress
      AND     #ControllerInput_A
      BNE     loc_BANKF_E3AE

      JMP     loc_BANKF_E2E8

; ---------------------------------------------------------------------------

loc_BANKF_E3AE:
      LDA     #SoundEffect1_CherryGet
      STA     SoundEffectQueue1
      LDX     CurrentWorld
      LDY     CurrentLevel
      JSR     DisplayLevelTitleCardText

      LDA     #$40
      STA     byte_RAM_10
      JSR     WaitForNMI

      LDX     #$F
      LDA     CurrentCharacter
      TAY
      LDA     PlayerSelectSpriteIndexes,Y
      TAY

loc_BANKF_E3CC:
      LDA     PlayerSelectMarioSprites2,Y
      STA     SpriteDMAArea+$10,Y
      INY
      DEX
      BPL     loc_BANKF_E3CC

loc_BANKF_E3D6:
      JSR     WaitForNMI

      DEC     byte_RAM_10
      BPL     loc_BANKF_E3D6

      LDY     #$3F

loc_BANKF_E3DF:
      LDA     PlayerSelectMarioSprites1,Y
      STA     SpriteDMAArea+$10,Y
      DEY
      BPL     loc_BANKF_E3DF

      LDA     #$40
      STA     byte_RAM_10

loc_BANKF_E3EC:
      JSR     WaitForNMI

      DEC     byte_RAM_10
      BPL     loc_BANKF_E3EC

      LDA     #Music2_StopMusic
      STA     MusicQueue2
      RTS


;
; This starts the game once RESET has done its thing.
; We also come here after choosing "RETRY" from the game over menu.
;
StartGame:
      LDA     #$00
      STA     PPUMASK
      JSR     DisableNMI

      LDA     #PRGBank_0_1
      STA     GameMilestoneCounter
      JSR     ChangeMappedPRGBank

      JSR     TitleScreen ; The whole title screen is a subroutine, lol

      INC     GameMilestoneCounter
      LDA     #$02 ; Number of continues on start
      STA     Continues

; We return here after picking "CONTINUE" from the game over menu.
ContinueGame:
      LDA     #$03 ; Number of lives to start
      STA     ExtraLives

StartCharacterSelectMenu:
      LDX     CurrentWorld
      LDY     WorldStartingLevel,X
      STY     CurrentLevel
      STY     CurrentLevel_Init
      JSR     DoCharacterSelectMenu

      JSR     InitializeSomeLevelStuff

      JSR     DisplayLevelTitleCardAndMore

      LDA     #$FF
      STA     CurrentMusicIndex
      BNE     StartLevel ; Branch always

CharacterSelectMenu:
      JSR     DoCharacterSelectMenu

StartLevelAfterTitleCard:
      JSR     DisplayLevelTitleCardAndMore

StartLevel:
      JSR     WaitForNMI_TurnOffPPU

      LDA     #$B0
      ORA     byte_RAM_C9
      LDY     IsHorizontalLevel
      BNE     loc_BANKF_E44A

      AND     #$FE
      ORA     byte_RAM_C8

loc_BANKF_E44A:
      STA     PPUCtrlMirror
      STA     PPUCTRL
      LDA     #Stack100_Transition
      STA     StackArea
      LDA     #PRGBank_8_9
      JSR     ChangeMappedPRGBank

      JSR     GetLevelPointers

      LDA     #PRGBank_6_7
      JSR     ChangeMappedPRGBank

      ; load level data
      JSR     LoadCurrentArea

      ; load palette data
      JSR     LoadCurrentPalette

      JSR     HideAllSprites

      JSR     WaitForNMI

      JSR     SetStack100Gameplay

      LDA     #PPUCtrl_Base2000|PPUCtrl_WriteHorizontal|PPUCtrl_Sprite0000|PPUCtrl_Background1000|PPUCtrl_SpriteSize8x16|PPUCtrl_NMIEnabled
      STA     PPUCtrlMirror
      LDA     IsHorizontalLevel
      BEQ     loc_BANKF_E4CC

; horizontal area
loc_BANKF_E478:
      JSR     WaitForNMI

      LDA     #PRGBank_0_1
      JSR     ChangeMappedPRGBank

      JSR     GameLoopHorizontal

      JSR     EnsureCorrectMusic

      LDA     byte_RAM_13
      BEQ     loc_BANKF_E478

      LDA     #$00
      STA     byte_RAM_13
      JSR     WaitForNMI_TurnOnPPU

loc_BANKF_E491:
      JSR     WaitForNMI

      LDA     NeedVerticalScroll
      AND     #$04
      BNE     loc_BANKF_E4A3

      LDA     Player1JoypadPress
      AND     #ControllerInput_Start
      BEQ     loc_BANKF_E4A3

      JMP     ShowPauseScreen

; ---------------------------------------------------------------------------

loc_BANKF_E4A3:
      LDA     InSubspaceOrJar
      BEQ     loc_BANKF_E4AB

      JMP     loc_BANKF_E5A0

; ---------------------------------------------------------------------------

; horizontal level
loc_BANKF_E4AB:
      JSR     HideAllSprites

      JSR     sub_BANKF_F11E

      LDY     GameMode
      BEQ     loc_BANKF_E4B9

      JMP     loc_BANKF_E665

; ---------------------------------------------------------------------------

loc_BANKF_E4B9:
      LDA     DoAreaTransition
      BEQ     loc_BANKF_E491

      JSR     sub_BANKF_F6A1

      JSR     sub_BANKF_F1AE

      LDA     #$00
      STA     DoAreaTransition
      JMP     StartLevel

; ---------------------------------------------------------------------------

; vertical area
loc_BANKF_E4CC:
      JSR     WaitForNMI

      LDA     #PRGBank_0_1
      JSR     ChangeMappedPRGBank

      JSR     GameLoopVertical

      JSR     EnsureCorrectMusic

      LDA     byte_RAM_13
      BEQ     loc_BANKF_E4CC

      LDA     #$00
      STA     byte_RAM_13
      JSR     WaitForNMI_TurnOnPPU

loc_BANKF_E4E5:
      JSR     WaitForNMI

      LDA     NeedVerticalScroll
      AND     #$04
      BNE     loc_BANKF_E4F4

      LDA     Player1JoypadPress
      AND     #ControllerInput_Start
      BNE     ShowPauseScreen

; vertical level
loc_BANKF_E4F4:
      JSR     HideAllSprites

      JSR     sub_BANKF_F17E

      LDY     GameMode
      BEQ     loc_BANKF_E502

      JMP     loc_BANKF_E665

; ---------------------------------------------------------------------------

loc_BANKF_E502:
      LDA     DoAreaTransition
      BEQ     loc_BANKF_E4E5

      JSR     sub_BANKF_F6A1

      JSR     sub_BANKF_F1AE

      LDA     #$00
      STA     DoAreaTransition
      JMP     StartLevel


;
; Pauses the game
;
ShowPauseScreen:
      JSR     PauseScreen_ExtraLife

      ; used when running sound queues
      LDA     #Stack100_Pause
      STA     StackArea

PauseScreenLoop:
      LDA     #$0E
      STA     byte_RAM_6

DoSuicideCheatCheck:
      JSR     WaitForNMI_TurnOnPPU

      LDA     PlayerState ; Check if the player is already dying
      CMP     #PlayerState_Dying
      BEQ     PauseScreenExitCheck ; If so, skip the suicide code check

      LDA     Player2JoypadHeld ; Check for suicide code
      CMP     #ControllerInput_Up|ControllerInput_B|ControllerInput_A ; Up + A + B
      BNE     PauseScreenExitCheck ; Not being held! Nothing to see here

      JSR     KillPlayer ; KILL THYSELF

PauseScreenExitCheck:
      LDA     Player1JoypadPress
      AND     #ControllerInput_Start
      BNE     HidePauseScreen

      DEC     byte_RAM_6
      BPL     DoSuicideCheatCheck

      INC     byte_RAM_7
      LDA     byte_RAM_7
      AND     #$01
      CLC
      ADC     #$0D ; Will use either $0D or $0E from the update index pointers
      STA     ScreenUpdateIndex ; @TODO I assume this is what blinks "PAUSE"
      JMP     PauseScreenLoop

;
; Unpauses the game
;
HidePauseScreen:
      JSR     WaitForNMI_TurnOffPPU

      JSR     LoadWorldCHRBanks

      LDA     #PRGBank_6_7
      JSR     ChangeMappedPRGBank

      JSR     LoadCurrentPalette

      JSR     WaitForNMI

      JSR     SetStack100Gameplay

      JSR     HideAllSprites

      LDA     #PRGBank_0_1
      JSR     ChangeMappedPRGBank

      JSR     RestoreScreenScrollPosition

      LDA     IsHorizontalLevel
      BNE     HidePauseScreen_Horizontal

HidePauseScreen_Vertical:
      LDA     #HMirror
      JSR     ChangeNametableMirroring

      JSR     sub_BANK0_81FE

HidePauseScreen_Vertical_Loop:
      JSR     WaitForNMI

      JSR     sub_BANK0_823D

      LDA     byte_RAM_537
      BEQ     HidePauseScreen_Vertical_Loop

      JSR     WaitForNMI_TurnOnPPU

      JMP     loc_BANKF_E4E5

HidePauseScreen_Horizontal:
      LDA     #VMirror
      JSR     ChangeNametableMirroring

      JSR     sub_BANK0_8785

HidePauseScreen_Horizontal_Loop:
      JSR     WaitForNMI

      JSR     sub_BANK0_87AA

      LDA     byte_RAM_537
      BEQ     HidePauseScreen_Horizontal_Loop

      JSR     WaitForNMI_TurnOnPPU

      JMP     loc_BANKF_E491

; ---------------------------------------------------------------------------

loc_BANKF_E5A0:
      JSR     ClearNametablesAndSprites

      LDA     #PRGBank_6_7
      JSR     ChangeMappedPRGBank

      LDA     #$00
      STA     SubspaceCoins
      LDA     InSubspaceOrJar
      CMP     #$02
      BEQ     loc_BANKF_E5D4

      LDA     #PRGBank_8_9
      JSR     ChangeMappedPRGBank

      JSR     GetJarPointers

      JSR     GetEnemyPointers

      LDA     #PRGBank_6_7
      JSR     ChangeMappedPRGBank

      JSR     ClearSubAreaTileLayout

      LDA     #Music1_Inside
      STA     MusicQueue1
      LDA     #$01
      STA     CurrentMusicIndex
      JMP     loc_BANKF_E5E1

; ---------------------------------------------------------------------------

loc_BANKF_E5D4:
      JSR     GenerateSubspaceArea

      LDA     #Music1_Subspace
      STA     MusicQueue1
      LDA     #$04
      STA     CurrentMusicIndex

loc_BANKF_E5E1:
      LDA     #PRGBank_0_1
      JSR     ChangeMappedPRGBank

      JSR     sub_BANK0_870C

      JSR     EnableNMI

loc_BANKF_E5EC:
      JSR     WaitForNMI

      JSR     sub_BANK0_87AA

      LDA     byte_RAM_537
      BEQ     loc_BANKF_E5EC

      LDA     InSubspaceOrJar
      CMP     #$02
      BEQ     loc_BANKF_E606

      LDA     #PRGBank_6_7
      JSR     ChangeMappedPRGBank

      JSR     LoadCurrentPalette

loc_BANKF_E606:
      JSR     WaitForNMI_TurnOnPPU

; subspace
loc_BANKF_E609:
      JSR     WaitForNMI

      JSR     HideAllSprites

      JSR     sub_BANKF_F0F9

      LDY     GameMode
      BEQ     loc_BANKF_E61A

      JMP     loc_BANKF_E665

; ---------------------------------------------------------------------------

loc_BANKF_E61A:
      LDA     InSubspaceOrJar
      BNE     loc_BANKF_E609

      LDA     SubspaceCoins
      BEQ     loc_BANKF_E627

      INC     SubspaceVisits

loc_BANKF_E627:
      LDA     CurrentLevelAreaCopy
      STA     CurrentLevelArea
      LDA     #PRGBank_6_7
      JSR     ChangeMappedPRGBank

      JSR     LoadCurrentPalette

      JSR     WaitForNMI_TurnOffPPU

      JSR     HideAllSprites

      LDY     CompareMusicIndex
      STY     CurrentMusicIndex
      LDA     StarInvincibilityTimer
      BNE     loc_BANKF_E64C

      LDA     LevelMusicIndexes,Y
      STA     MusicQueue1

loc_BANKF_E64C:
      LDA     #PRGBank_0_1
      JSR     ChangeMappedPRGBank

      JSR     sub_BANK0_874C

loc_BANKF_E654:
      JSR     WaitForNMI

      JSR     sub_BANK0_87AA

      LDA     byte_RAM_537
      BEQ     loc_BANKF_E654

      JSR     WaitForNMI_TurnOnPPU

      JMP     loc_BANKF_E491

; ---------------------------------------------------------------------------

loc_BANKF_E665:
      JSR     DoAreaReset

      LDY     GameMode
      LDA     #GameMode_InGame
      STA     GameMode
      STA     StarInvincibilityTimer
      STA     BigVeggiesPulled
      STA     CherryCount
      STA     StopwatchTimer
      DEY
      BNE     loc_BANKF_E69F

      STY     PlayerCurrentSize
      JSR     LevelInitialization

      LDA     #$FF
      STA     CurrentMusicIndex
      ; this looks like an address
      LDA     #$25
      STA     byte_RAM_7180
      LDA     #$48
      STA     byte_RAM_7181
      LDA     #ScreenUpdateBuffer_BANKE_DFAF
      STA     byte_RAM_5BD
      JSR     PauseScreen_Card

IFNDEF CHARACTER_SELECT_AFTER_DEATH
      JMP     StartLevelAfterTitleCard
ENDIF
IFDEF CHARACTER_SELECT_AFTER_DEATH
      JMP     CharacterSelectMenu
ENDIF

; ---------------------------------------------------------------------------

loc_BANKF_E69F:
      LDA     #PlayerHealth_2_HP
      STA     PlayerHealth
      LDA     #$00
      STA     PlayerMaxHealth
      STA     KeyUsed
      STA     Mushroom1upPulled
      STA     Mushroom1Pulled
      STA     Mushroom2Pulled
      STA     SubspaceVisits
      STA     EnemiesKilledForHeart
      DEY
      BEQ     DoGameOverStuff

      JMP     loc_BANKF_E75A

; ---------------------------------------------------------------------------

DoGameOverStuff:
      STY     PlayerCurrentSize
      LDA     #Music2_GameOver
      STA     MusicQueue2
      JSR     WaitForNMI_TurnOffPPU

      JSR     ChangeTitleCardCHR

      JSR     ClearNametablesAndSprites

      JSR     SetBlackAndWhitePalette

      JSR     SetScrollXYTo0

      JSR     EnableNMI

      JSR     WaitForNMI_TurnOnPPU

      LDA     #ScreenUpdateBuffer_Text_Game_Over
      STA     ScreenUpdateIndex
      LDA     #$C0
      STA     byte_RAM_6

loc_BANKF_E6E6:
      JSR     WaitForNMI

      DEC     byte_RAM_6
      BNE     loc_BANKF_E6E6

      LDY     #$28

loc_BANKF_E6EF:
      LDA     Text_Continue,Y
      STA     PPUBuffer_67B,Y
      DEY
      BPL     loc_BANKF_E6EF

      LDA     #$FB
      STA     byte_RAM_68F
      LDA     Continues
      CLC
      ADC     #$D0
      STA     byte_RAM_67E
      LDA     #$00
      STA     byte_RAM_8
      LDA     #ScreenUpdateBuffer_RAM_67B
      DEC     Continues
      BPL     loc_BANKF_E717

      LDA     #$01
      STA     byte_RAM_8
      LDA     #ScreenUpdateBuffer_Text_Retry

loc_BANKF_E717:
      STA     ScreenUpdateIndex

loc_BANKF_E719:
      JSR     WaitForNMI

      LDA     Player1JoypadPress
      AND     #ControllerInput_Select
      BEQ     loc_BANKF_E747

      LDA     byte_RAM_8
      EOR     #$01
      STA     byte_RAM_8
      LDY     Continues
      CPY     #$FF
      BNE     loc_BANKF_E733

      LDA     #$01
      STA     byte_RAM_8

loc_BANKF_E733:
      ASL     A
      ASL     A
      TAY
      LDA     #$FB
      STA     byte_RAM_71AB
      STA     byte_RAM_71AF
      LDA     #$F6
      STA     byte_RAM_71AB,Y
      LDA     #ScreenUpdateBuffer_RAM_71a8
      STA     ScreenUpdateIndex

loc_BANKF_E747:
      LDA     Player1JoypadPress
      AND     #ControllerInput_Start
      BEQ     loc_BANKF_E719

      LDA     byte_RAM_8
      BNE     GameOver_Retry

      STA     SlotMachineCoins
      JMP     ContinueGame

; ---------------------------------------------------------------------------

GameOver_Retry:
      JMP     StartGame

; ---------------------------------------------------------------------------

loc_BANKF_E75A:
      DEY
      BEQ     EndOfLevel

      LDY     CurrentWorld
      STY     PreviousWorld
      LDA     WarpDestinations,Y
      STA     CurrentWorld
      TAY
      LDX     CurrentCharacter
      LDA     WorldStartingLevel,Y
      STA     CurrentLevel
      STA     CurrentLevel_Init
      INY
      TYA
      ORA     #$D0
      STA     byte_RAM_71A6
      JSR     WaitForNMI_TurnOffPPU

      JSR     SetScrollXYTo0

      JSR     ClearNametablesAndSprites

      JSR     SetBlackAndWhitePalette

      JSR     EnableNMI

      JSR     ChangeTitleCardCHR

      LDA     #ScreenUpdateBuffer_RAM_7194
      STA     ScreenUpdateIndex
      LDA     #Music2_SlotWarpFanfare
      STA     MusicQueue2
      JSR     Delay160Frames

      JSR     InitializeSomeLevelStuff

      JMP     CharacterSelectMenu

; ---------------------------------------------------------------------------

EndOfLevel:
      ; Stop the music
      LDA     #Music2_StopMusic ; Stop music
      STA     MusicQueue2

      ; Increase current characters "contribution" counter
      LDX     CurrentCharacter
      INC     CharacterLevelsCompleted,X

      ; Check if we've completed the final level
      LDA     CurrentLevel
      CMP     #$13
IFNDEF DISABLE_BONUS_CHANCE
      ; If not, go to bonus chance and proceed to the next level
      BNE     EndOfLevelSlotMachine
ENDIF
IFDEF DISABLE_BONUS_CHANCE
      BNE     GoToNextLevel
ENDIF
      ; Otherwise, display the ending
      JMP     EndingSceneRoutine

EndOfLevelSlotMachine:
      STY     PlayerCurrentSize
      JSR     WaitForNMI_TurnOffPPU

      JSR     ClearNametablesAndSprites

      JSR     LoadBonusChanceCHRBanks

      JSR     CopyUnusedCoinSpriteToSpriteArea

      LDA     #PRGBank_A_B
      JSR     ChangeMappedPRGBank

      JSR     CopyBonusChanceLayoutToRAM

      LDA     #ScreenUpdateBuffer_RAM_BonusChanceLayout
      STA     ScreenUpdateIndex
      LDA     #Stack100_Menu
      STA     StackArea
      JSR     EnableNMI

      JSR     WaitForNMI

      LDA     #Stack100_Gameplay
      STA     StackArea
      JSR     DisableNMI

      JSR     sub_BANKF_EA33

      LDA     #Music2_SlotWarpFanfare
      STA     MusicQueue2
      LDA     SlotMachineCoins
      BNE     loc_BANKF_E7F2

      JMP     NoCoinsForSlotMachine

; ---------------------------------------------------------------------------

loc_BANKF_E7F2:
      LDA     #$03
      STA     ObjectXLo+3
      STA     ObjectXLo+4
      STA     ObjectXLo+5
      JSR     WaitForNMI_TurnOnPPU

loc_BANKF_E7FD:
      LDA     SlotMachineCoins
      BNE     StartSlotMachine

GoToNextLevel:
      LDY     CurrentWorld
      LDA     WorldStartingLevel+1,Y
      SEC
      SBC     #$01
      CMP     CurrentLevel
      BNE     loc_BANKF_E81E

      JSR     SetStack100Gameplay

      LDA     #$FF
      STA     CurrentMusicIndex
      INC     CurrentWorld
      JMP     StartCharacterSelectMenu

; ---------------------------------------------------------------------------

loc_BANKF_E81E:
      JSR     sub_BANKF_F6A1

      LDA     CurrentLevel
      LDY     #$00

loc_BANKF_E826:
      INY
      CMP     WorldStartingLevel,Y
      BCS     loc_BANKF_E826

      DEY
      STY     CurrentWorld ; I am sure this is important somehow, but... why
      LDY     CurrentWorld
      LDA     CurrentLevel
      SEC
      SBC     WorldStartingLevel,Y
      STA     CurrentLevelRelative
      LDA     CurrentLevel
      STA     CurrentLevel_Init
      LDA     CurrentLevelArea
      STA     CurrentLevelArea_Init
      LDA     CurrentLevelEntryPage
      STA     CurrentLevelEntryPage_Init
      LDY     #$00
      STY     PlayerState_Init
      STY     TransitionType
      STY     TransitionType_Init
      DEY
      STY     CurrentMusicIndex
      JSR     SetStack100Gameplay

      JMP     CharacterSelectMenu

; ---------------------------------------------------------------------------

StartSlotMachine:
      DEC     SlotMachineCoins
      JSR     WaitForNMI

      JSR     sub_BANKF_EA68

      LDA     #$01 ; Set all reel timers
      STA     ObjectXLo
      STA     ObjectXLo+1
      STA     ObjectXLo+2
      LSR     A ; Set all reels to the first position
      STA     ObjectXLo+6
      STA     ObjectXLo+7
      STA     ObjectXLo+8

DoSlotMachineSpinnyShit:
      JSR     WaitForNMI ; $2C-$2E: Reel change timer
      ; $2F-$31: Current reel icon

      LDA     #SoundEffect2_Climbing ; Play "reel sound" sound effect
      STA     SoundEffectQueue2
      JSR     sub_BANKF_EAC2

      JSR     sub_BANKF_EADC

      JSR     sub_BANKF_EAF6

      JSR     sub_BANKF_E916

      LDA     byte_BANKF_E9DF,Y
      STA     ScreenUpdateIndex
      INC     byte_RAM_6
      LDA     ObjectXLo ; Reel 1 still active?
      ORA     ObjectXLo+1 ; Reel 2 still active?
      ORA     ObjectXLo+2 ; Reel 3 still active?
      BNE     DoSlotMachineSpinnyShit ; If any are still active, go back to waiting

      LDA     #ScreenUpdateBuffer_RAM_6df
      STA     ScreenUpdateIndex
      JSR     WaitForNMI

      LDY     #$00
      LDX     ObjectXLo+6 ; Load reel 1
      LDA     SlotMachineReelOrder1RAM,X
      BNE     CheckReel2Symbol ; Is this reel a cherry?

      INY ; Yes; add one life

CheckReel2Symbol:
      LDX     ObjectXLo+7 ; Load reel 2
      CMP     SlotMachineReelOrder2RAM,X
      BNE     AddSlotMachineExtraLives ; Does this match the previous symbol?

      CMP     #$00 ; Yes; are they both cherries?
      BNE     CheckReel3Symbol ; If no, skip to third reel

      INY ; They are both cherries, add another life or something

CheckReel3Symbol:
      LDX     ObjectXLo+8 ; Load reel 3
      CMP     SlotMachineReelOrder3RAM,X ; Does reel 3 match the previous two?
      BNE     AddSlotMachineExtraLives ; No, fuck you

      INY ; They all match! Yay! Add a life.
; Cherry count: 3 / Non-cherry: 1
      CMP     #$00 ; Were they all cherries?
      BNE     AddSlotMachineExtraLives ; Nope, all done

      INY ; Yes, add 2 more extra lives
      INY

AddSlotMachineExtraLives:
      TYA ; Y contains extra lives to add
      CLC
      ADC     ExtraLives ; Add won extra lives to current lives
      BCC     loc_BANKF_E8D3 ; Check if adding extra lives has wrapped the counter

      LDA     #$FF ; If so, set extra lives to 255 (#$FF)

loc_BANKF_E8D3:
      STA     ExtraLives
      TYA ; Did we actually win any lives?
      BEQ     SlotMachineLoseFanfare ; No, play lose sound effect

      ORA     #$D0
      STA     byte_RAM_6C8
      LDA     #Music2_CrystalGetFanfare ; Play winner jingle
      STA     MusicQueue2
      LDA     #$A0
      STA     byte_RAM_6
      JSR     WaitForNMI

      JSR     sub_BANKF_EA68

loc_BANKF_E8ED:
      JSR     WaitForNMI

      JSR     sub_BANKF_E916

      LDA     byte_BANKF_E9E3,Y
      STA     ScreenUpdateIndex
      DEC     byte_RAM_6
      BNE     loc_BANKF_E8ED

      BEQ     loc_BANKF_E90C

SlotMachineLoseFanfare:
      LDA     #Music2_DeathJingle
      STA     MusicQueue2
      JSR     WaitForNMI

      JSR     sub_BANKF_EA68

      JSR     Delay160Frames

loc_BANKF_E90C:
      LDA     #ScreenUpdateBuffer_RAM_6e4
      STA     ScreenUpdateIndex
      JSR     WaitForNMI

      JMP     loc_BANKF_E7FD

; =============== S U B R O U T I N E =======================================

sub_BANKF_E916:
      LDA     byte_RAM_6
      LSR     A
      LSR     A
      LSR     A
      LSR     A
      AND     #$01
      TAY
      RTS

; End of function sub_BANKF_E916

; ---------------------------------------------------------------------------

NoCoinsForSlotMachine:
      JSR     Delay80Frames

      LDA     #Music2_DeathJingle
      STA     MusicQueue2

      STA     byte_RAM_6
loc_BANKF_E92A:
      LDA     byte_RAM_6
      AND     #$01
      TAY
      LDA     byte_BANKF_E9E1,Y
      STA     ScreenUpdateIndex

      LDA     #$0A
      STA     byte_RAM_7
loc_BANKF_E938:
      JSR     WaitForNMI_TurnOnPPU
      DEC     byte_RAM_7
      BNE     loc_BANKF_E938

      DEC     byte_RAM_6
      BPL     loc_BANKF_E92A

      JMP     GoToNextLevel


Delay80Frames:
      LDA     #$50
      BNE     DelayFrames

Delay160Frames:
      LDA     #$A0

DelayFrames:
      STA     byte_RAM_7
DelayFrames_Loop:
      JSR     WaitForNMI_TurnOnPPU
      DEC     byte_RAM_7
      BNE     DelayFrames_Loop

      RTS


;
; Do the ending!
;
EndingSceneRoutine:
      JSR     SetScrollXYTo0

      LDA     #$80
      ; FDS leftover; $4080 is an old sound register
      ; The prototype had two writes to this address!
      ; It looks like they missed this one, though.
      STA     FDS_WAVETABLE_VOL
      ASL     A
      STA     SoundEffectPlaying1
      LDA     #PRGBank_0_1
      JSR     ChangeMappedPRGBank

      JSR     FreeSubconsScene

      JSR     WaitForNMI_TurnOffPPU

      JSR     DisableNMI

      JSR     LoadCelebrationSceneBackgroundCHR

      JSR     EnableNMI

      JSR     WaitForNMI

      LDA     #PRGBank_0_1
      JSR     ChangeMappedPRGBank

      INC     GameMilestoneCounter
      JSR     sub_BANK1_AA79

      JSR     WaitForNMI_TurnOffPPU

      JSR     DisableNMI

SetupMarioSleepingScene:
      JSR     LoadMarioSleepingCHRBanks

      JSR     EnableNMI

      JSR     WaitForNMI

      LDA     #PRGBank_C_D
      JSR     ChangeMappedPRGBank

      INC     GameMilestoneCounter
      JMP     MarioSleepingScene

; =============== S U B R O U T I N E =======================================

DisableNMI:
      LDA     #PPUCtrl_Base2000|PPUCtrl_WriteHorizontal|PPUCtrl_Sprite0000|PPUCtrl_Background1000|PPUCtrl_SpriteSize8x16|PPUCtrl_NMIDisabled
      STA     PPUCTRL
      STA     PPUCtrlMirror
      RTS

; End of function DisableNMI

; ---------------------------------------------------------------------------
PPUBuffer_Text_Game_Over:
      .BYTE $21, $CB, $0A, $E0, $DA, $E6, $DE, $FB, $FB, $E8, $EF, $DE
      .BYTE $EB, $00 ; $C ; "GAME OVER"
Text_Continue:
      .BYTE $21, $75, $01, $00 ; (Placeholder for continue count)
; This is loaded manually and drawn so the count
; can be patched in
; * CONTINUE
      .BYTE $21, $6A, $0A, $F6, $FB, $DC, $E8, $E7, $ED, $E2, $E7, $EE
      .BYTE $DE ; $C
PPUBuffer_Text_Retry:
      .BYTE $21, $AA, $07, $F6, $FB, $EB, $DE, $ED, $EB, $F2 ; * RETRY
      .BYTE $21, $CB, $0A, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB, $FB ; Blank, erases "GAME OVER"
      .BYTE $FB, $00 ; $C
      .BYTE $09
      .BYTE $0F
byte_BANKF_E9DF:
      .BYTE ScreenUpdateBuffer_RAM_6ab
      .BYTE ScreenUpdateBuffer_RAM_6df
byte_BANKF_E9E1:
      .BYTE ScreenUpdateBuffer_RAM_693
      .BYTE ScreenUpdateBuffer_RAM_6da
byte_BANKF_E9E3:
      .BYTE ScreenUpdateBuffer_RAM_6bd
      .BYTE ScreenUpdateBuffer_RAM_6da

; =============== S U B R O U T I N E =======================================

;
; Displays extra life info on the pause screen
;
PauseScreen_ExtraLife:
      LDA     #ScreenUpdateBuffer_BANKE_DFA7
      STA     byte_RAM_5BD
      LDA     #$26
      STA     byte_RAM_7180
      LDA     #$C8
      STA     byte_RAM_7181

;
; Loads the palette and graphics for the pause screen to display
;
PauseScreen_Card:
      JSR     WaitForNMI_TurnOffPPU

      JSR     ChangeTitleCardCHR

      LDA     #PRGBank_0_1
      JSR     ChangeMappedPRGBank

      JSR     StashScreenScrollPosition

      ; Load title card palette
      LDY     #$23
PauseScreen_Card_Loop:
      LDA     TitleCardPalettes,Y
      STA     PPUBuffer_55F,Y
      DEY
      BPL     PauseScreen_Card_Loop

PauseScreen_Card_ScreenReset:
      JSR     ResetScreenForTitleCard

      JSR     EnableNMI_PauseTitleCard

      LDX     CurrentWorld
      LDY     CurrentLevel
      JSR     DisplayLevelTitleCardText

      LDA     #$FF
      STA     PPUScrollXMirror
      JSR     WaitForNMI

      LDA     byte_RAM_5BD
      STA     ScreenUpdateIndex
      JSR     WaitForNMI


EnableNMI:
      LDA     #PPUCtrl_Base2000|PPUCtrl_WriteHorizontal|PPUCtrl_Sprite0000|PPUCtrl_Background1000|PPUCtrl_SpriteSize8x16|PPUCtrl_NMIEnabled
      STA     PPUCtrlMirror
      STA     PPUCTRL
      RTS


; =============== S U B R O U T I N E =======================================

sub_BANKF_EA33:
      JSR     SetScrollXYTo0

      LDA     PPUSTATUS
      LDY     #$00
      LDA     #$3F
      STA     PPUADDR
      STY     PPUADDR

loc_BANKF_EA43:
      LDA     unk_RAM_59C,Y
      STA     PPUDATA
      INY
      CPY     #$10
      BCC     loc_BANKF_EA43

      LDY     #$00
      LDA     PPUSTATUS
      LDA     #$3F
      STA     PPUADDR
      LDA     #$10
      STA     PPUADDR

SetBonusChancePalette:
      LDA     BonusChanceSpritePalettes,Y
      STA     PPUDATA
      INY
      CPY     #$10
      BCC     SetBonusChancePalette

; End of function sub_BANKF_EA33

; =============== S U B R O U T I N E =======================================

sub_BANKF_EA68:
      LDY     ExtraLives
      DEY
      TYA
      JSR     GetTwoDigitNumberTiles

      STY     byte_RAM_599
      STA     byte_RAM_59A
      LDA     SlotMachineCoins
      CLC
      ADC     #$D0
      STA     byte_RAM_588
      LDA     #ScreenUpdateBuffer_RAM_583
      STA     ScreenUpdateIndex
      LDA     #Stack100_Menu
      STA     StackArea
      JSR     EnableNMI

      JMP     WaitForNMI

; End of function sub_BANKF_EA68

; =============== S U B R O U T I N E =======================================

;
; Converts a number to numerical tiles with space for 2 digits
;
; Input
;   A = number to display
; Output
;   A = second digit of the number (ones)
;   Y = first digit of the number (tens)
;
GetTwoDigitNumberTiles:
      LDY     #$D0 ; zero

GetTwoDigitNumberTiles_TensLoop:
      ; Count up the tens digit until A < 10
      CMP     #$0A
      BCC     GetTwoDigitNumberTiles_Ones

      SBC     #$0A
      INY
      JMP     GetTwoDigitNumberTiles_TensLoop

GetTwoDigitNumberTiles_Ones:
      ORA     #$D0
      CPY     #$D0
      BNE     GetTwoDigitNumberTiles_Exit

      LDY     #$FB

GetTwoDigitNumberTiles_Exit:
      RTS


WaitForNMI_TurnOffPPU:
      LDA     #$00
      BEQ     _WaitForNMI_StuffPPUMask ; Branch always

WaitForNMI_TurnOnPPU:
      LDA     #PPUMask_ShowLeft8Pixels_BG|PPUMask_ShowLeft8Pixels_SPR|PPUMask_ShowBackground|PPUMask_ShowSprites

_WaitForNMI_StuffPPUMask:
      STA     PPUMaskMirror

WaitForNMI:
      LDA     ScreenUpdateIndex
      ASL     A
      TAX
      LDA     ScreenUpdateBufferPointers,X
      STA     RAM_PPUDataBufferPointer
      LDA     ScreenUpdateBufferPointers+1,X
      STA     RAM_PPUDataBufferPointer+1
      LDA     #$00
      STA     NMIWaitFlag ; Start waiting for NMI to finish

WaitForNMILoop:
      LDA     NMIWaitFlag ; Has the NMI routine set the flag yet?
      BPL     WaitForNMILoop ; If no, wait some more

      RTS ; If yes, go back to what we were doing

; End of function WaitForNMI

; =============== S U B R O U T I N E =======================================

sub_BANKF_EAC2:
      LDA     Player1JoypadPress
      BPL     locret_BANKF_EAD1

      LDX     #$00

loc_BANKF_EAC8:
      LDA     ObjectXLo,X
      BNE     loc_BANKF_EAD2

      INX
      CPX     #$03
      BCC     loc_BANKF_EAC8

locret_BANKF_EAD1:
      RTS

; ---------------------------------------------------------------------------

loc_BANKF_EAD2:
      LDA     #$00
      STA     ObjectXLo,X
      LDA     #SoundEffect1_CherryGet
      STA     SoundEffectQueue1
      RTS

; End of function sub_BANKF_EAC2

; =============== S U B R O U T I N E =======================================

sub_BANKF_EADC:
      LDX     #$02

loc_BANKF_EADE:
      LDA     ObjectXLo,X
      BEQ     loc_BANKF_EAF2

      DEC     ObjectXLo+3,X
      BNE     loc_BANKF_EAF2

      LDA     #$04
      STA     ObjectXLo+3,X
      DEC     ObjectXLo+6,X
      BPL     loc_BANKF_EAF2

      LDA     #$07
      STA     ObjectXLo+6,X

loc_BANKF_EAF2:
      DEX
      BPL     loc_BANKF_EADE

      RTS

; End of function sub_BANKF_EADC

; =============== S U B R O U T I N E =======================================

sub_BANKF_EAF6:
      LDA     #$02
      STA     byte_RAM_0

loc_BANKF_EAFA:
      LDA     byte_RAM_0
      TAY
      ASL     A
      ASL     A
      ASL     A
      TAX
      ADC     ObjectXLo+6,Y
      TAY
      LDA     SlotMachineReelOrder1RAM,Y
      TAY
      LDA     #$07
      STA     byte_RAM_1

loc_BANKF_EB0D:
      LDA     BonusChanceCherrySprite,Y
      STA     SpriteDMAArea+$10,X
      INX
      INY
      DEC     byte_RAM_1
      BPL     loc_BANKF_EB0D

      DEC     byte_RAM_0
      BPL     loc_BANKF_EAFA

      LDX     #$17

loc_BANKF_EB1F:
      TXA
      AND     #$18
      ASL     A
      ASL     A
      ADC     SpriteDMAArea+$10,X
      STA     SpriteDMAArea+$10,X
      DEX
      DEX
      DEX
      DEX
      BPL     loc_BANKF_EB1F

      RTS

; End of function sub_BANKF_EAF6

;
; Copies the unused coin sprite from memory into the sprite DMA area at $200
;
CopyUnusedCoinSpriteToSpriteArea:
      LDY     #$00

CopyUnusedCoinSpriteToSpriteArea_Loop:
      LDA     unk_RAM_653,Y ; Copy two sprites from memory to memory.
      STA     SpriteDMAArea+$28,Y ; This is definitely efficient.
      INY ; Two sprites for each half of the coin.
      CPY     #$08 ; Four bytes per sprite * 2 sprites = 8 bytes
      BCC     CopyUnusedCoinSpriteToSpriteArea_Loop

      RTS


loc_BANKF_EB3F:
      LDA     #$00
      STA     OAMADDR
      LDA     #$02
      STA     OAM_DMA
      JSR     ChangeCHRBanks

      LDA     PPUMaskMirror
      STA     PPUMASK
      JSR     DoSoundProcessing

      LDA     PPUCtrlMirror
      STA     PPUCTRL
      DEC     NMIWaitFlag
      JMP     loc_BANKF_EC61

; ---------------------------------------------------------------------------

loc_BANKF_EB5E:
      LDA     #$00
      STA     PPUMASK
      STA     OAMADDR
      LDA     #$02
      STA     OAM_DMA
      JSR     ChangeCHRBanks

      JSR     UpdatePPUFromBufferWithOptions

      JSR     sub_BANKF_EC68

      LDA     PPUScrollXMirror
      STA     PPUSCROLL
      LDA     #$00
      STA     PPUSCROLL
      LDA     PPUMaskMirror
      STA     PPUMASK
      JMP     loc_BANKF_EC4B

; ---------------------------------------------------------------------------

loc_BANKF_EB86:
      LDA     PPUMaskMirror
      STA     PPUMASK
      JMP     loc_BANKF_EC5E


; public NMI
NMI:
      PHP
      PHA
      TXA
      PHA
      TYA
      PHA
      BIT     StackArea
      BPL     loc_BANKF_EB5E ; branch if bit 7 was 0

      BVC     loc_BANKF_EB3F ; branch if bit 6 was 0

      LDA     #$00
      STA     PPUMASK
      STA     OAMADDR
      LDA     #$02
      STA     OAM_DMA
      JSR     ChangeCHRBanks

      LDA     NMIWaitFlag
      BNE     loc_BANKF_EB86

      LDA     IsHorizontalLevel
      BEQ     loc_BANKF_EC1F

      LDA     byte_RAM_51C
      BEQ     loc_BANKF_EBE8

      LDA     #$00
      STA     byte_RAM_51C
      LDX     #$1E
      LDY     #$00
      LDA     PPUSTATUS
      LDA     #PPUCtrl_Base2000|PPUCtrl_WriteVertical|PPUCtrl_Sprite0000|PPUCtrl_Background1000|PPUCtrl_SpriteSize8x16|PPUCtrl_NMIEnabled
      STA     PPUCTRL

loc_BANKF_EBC9:
IFDEF COMPATIBILITY
      .db $ad, $d1, $00 ; LDA $00D1
ENDIF
IFNDEF COMPATIBILITY
      LDA     byte_RAM_D1 ; Absolute address for zero-page
      NOP ; Alignment fix
ENDIF

      STA     PPUADDR
IFDEF COMPATIBILITY
      .db $ad, $d2, $00 ; LDA $00D2
ENDIF
IFNDEF COMPATIBILITY
      LDA     byte_RAM_D2 ; Absolute address for zero-page
      NOP ; Alignment fix
ENDIF

      STA     PPUADDR

loc_BANKF_EBD5:
      LDA     unk_RAM_380,Y
      STA     PPUDATA
      INY
      DEX
      BNE     loc_BANKF_EBD5

      LDX     #$1E
IFDEF COMPATIBILITY
      .db $ee, $d2, $00 ; INC $00D2
ENDIF
IFNDEF COMPATIBILITY
      INC     byte_RAM_D2 ; Absolute address for zero-page
      NOP ; Alignment fix
ENDIF

      CPY     #$3C
      BNE     loc_BANKF_EBC9

loc_BANKF_EBE8:
      LDA     byte_RAM_3BC
      BEQ     loc_BANKF_EC1F

      LDA     #PPUCtrl_Base2000|PPUCtrl_WriteVertical|PPUCtrl_Sprite0000|PPUCtrl_Background1000|PPUCtrl_SpriteSize8x16|PPUCtrl_NMIEnabled
      STA     PPUCTRL
      LDY     #$00
      LDX     #$04

loc_BANKF_EBF6:
      LDA     PPUSTATUS
      LDA     byte_RAM_3BC
      STA     PPUADDR
      LDA     byte_RAM_3BD
      STA     PPUADDR

loc_BANKF_EC05:
      LDA     unk_RAM_3BE,Y
      STA     PPUDATA
      INY
      TYA
      LSR     A
      BCS     loc_BANKF_EC05

      LDA     byte_RAM_3BD
      CLC
      ADC     #$08
      STA     byte_RAM_3BD
      DEX
      BNE     loc_BANKF_EBF6

      STX     byte_RAM_3BC

loc_BANKF_EC1F:
      JSR     UpdatePPUFromBufferNMI

      JSR     sub_BANKF_EC68

      LDA     #$B0
      ORA     byte_RAM_C9
      LDY     IsHorizontalLevel
      BNE     loc_BANKF_EC31

      AND     #$FE
      ORA     byte_RAM_C8

loc_BANKF_EC31:
      STA     PPUCTRL
      STA     PPUCtrlMirror
      LDA     PPUScrollXMirror
      STA     PPUSCROLL
      LDA     PPUScrollYMirror
      CLC
      ADC     BackgroundYOffset
      STA     PPUSCROLL
      LDA     PPUMaskMirror
      STA     PPUMASK
      INC     byte_RAM_10

loc_BANKF_EC4B:
      LDA     ScreenUpdateIndex
      BNE     loc_BANKF_EC55

      STA     byte_RAM_300
      STA     PPUBuffer_301

loc_BANKF_EC55:
      LDA     #ScreenUpdateBuffer_RAM_301
      STA     ScreenUpdateIndex
      JSR     UpdateJoypads

      DEC     NMIWaitFlag

loc_BANKF_EC5E:
      JSR     DoSoundProcessing

IFDEF DEBUG
DebugHook:
; Hook into debug routine if select is pressed
      LDA Player1JoypadPress
      CMP #ControllerInput_Select
      BNE loc_BANKF_EC61
      LDA #>Debug_Init
      PHA
      LDA #<Debug_Init
      PHA
      PHP
      RTI
ENDIF

loc_BANKF_EC61:
      PLA
      TAY
      PLA
      TAX
      PLA
      PLP
      RTI

; End of function NMI

; =============== S U B R O U T I N E =======================================

sub_BANKF_EC68:
      LDA     PPUSTATUS
      LDA     #$3F
      STA     PPUADDR
      LDA     #$00
      STA     PPUADDR
      STA     PPUADDR
      STA     PPUADDR
      RTS

; End of function sub_BANKF_EC68


DoSoundProcessing:
      LDA     #PRGBank_4_5
      JSR     ChangeMappedPRGBankWithoutSaving

      JSR     StartProcessingSoundQueue

      LDA     MMC3PRGBankTemp
      JMP     ChangeMappedPRGBank


ClearNametablesAndSprites:
      LDA     #$00
      STA     PPUMaskMirror
      STA     PPUMASK
      LDA     #$20
      JSR     ClearNametableChunk

      LDA     #$24
      JSR     ClearNametableChunk

      LDA     #$28
      JSR     ClearNametableChunk


HideAllSprites:
      LDY     #$00
      LDA     #$F8

HideAllSpritesLoop:
      STA     SpriteDMAArea,Y
      DEY
      DEY
      DEY
      DEY
      BNE     HideAllSpritesLoop

      RTS


ClearNametableChunk:
      LDY     PPUSTATUS ; Reset PPU address latch
      LDY     #PPUCtrl_Base2000|PPUCtrl_WriteHorizontal|PPUCtrl_Sprite0000|PPUCtrl_Background1000|PPUCtrl_SpriteSize8x16|PPUCtrl_NMIDisabled
      STY     PPUCTRL ; Turn off NMI
      STY     PPUCtrlMirror
      LDY     #$00
      ; A contains the high byte of the PPU address (generally $20, $24, $28)
      STA     PPUADDR
      STY     PPUADDR ; And Y has the low byte ($00)
      LDX     #$03 ; Do $300 bytes for this loop.
      LDA     #$FB

ClearNametableChunk_Loop:
      STA     PPUDATA ; Store the blank tile $300 times
      INY
      BNE     ClearNametableChunk_Loop ; (Loop falls through every $100 bytes)

      DEX
      BNE     ClearNametableChunk_Loop ; Loop falls through after $300 bytes

ClearNametableChunk_Loop2:
      ; Do another loop of $C0 bytes to clear the
      ; rest of the nametable chunk
      STA     PPUDATA
      INY
      CPY     #$C0
      BNE     ClearNametableChunk_Loop2

      LDA     #$00 ; Load A with $00 for clearing the attribute tables

ClearNametableChunk_AttributeTableLoop:
      STA     PPUDATA ; Clear attribute table...
      INY ; Y was $C0 on entry, so write $40 bytes...
      BNE     ClearNametableChunk_AttributeTableLoop

PPUBufferUpdatesComplete:
      RTS ; Woo fucking hoo


;
; Used to update the PPU nametable / palette data during NMI.
;
; This function can only handle $100 bytes of data
; (actually less).
;
; Unlike UpdatePPUFromBuffer, this one does not support
; $80 or $40 as options, instead treating them as direct length.
; It also does not increment the buffer pointer, only using Y
; to read further data.
;
; If Y overflows, it will resume copying again from the beginning,
; and can get into an infinite loop if it doesn't encounter
; a terminating $00. Welp!
;
UpdatePPUFromBufferNMI:
      LDA     #PPUCtrl_Base2000|PPUCtrl_WriteHorizontal|PPUCtrl_Sprite0000|PPUCtrl_Background1000|PPUCtrl_SpriteSize8x16|PPUCtrl_NMIEnabled
      STA     PPUCTRL
      LDY     #$00

UpdatePPUFromBufferNMI_CheckForBuffer:
      LDA     (RAM_PPUDataBufferPointer),Y
      BEQ     PPUBufferUpdatesComplete

      LDX     PPUSTATUS
      STA     PPUADDR
      INY
      LDA     (RAM_PPUDataBufferPointer),Y
      STA     PPUADDR
      INY
      LDA     (RAM_PPUDataBufferPointer),Y
      TAX

UpdatePPUFromBufferNMI_CopyLoop:
      INY
      LDA     (RAM_PPUDataBufferPointer),Y
      STA     PPUDATA
      DEX
      BNE     UpdatePPUFromBufferNMI_CopyLoop

      INY
      JMP     UpdatePPUFromBufferNMI_CheckForBuffer


;
; This reads from $F0/$F1 to determine where a "buffer" is.
; Basically, a buffer is like this:
;
; PPUADDR  LEN DATA ......
; $20 $04  $03 $E9 $F0 $FB
; $25 $5F  $4F $FB
; $21 $82  $84 $00 $01 $02 $03
; $00
;
; PPUADDR is two bytes (hi,lo) for the address to send to PPUADDR.
; LEN is the length, with the following two bitmasks:
; - $80: Set the "draw vertically" option
;  - $40: Use ONE tile instead of a string
; DATA is either (LEN) bytes or one byte.
;
; After (LEN) bytes have been written, the buffer pointer
; is incremented to (LEN+2) and the function restarts.
; A byte of $00 terminates execution and returns.
;
; There is a similar function, UpdatePPUFromBufferNMI,
; that is called during NMI, but unlike this one,
; that one does NOT use bitmasks, nor increment the pointer.
;
UpdatePPUFromBufferWithOptions:
      ; First, check if we have anything to send to the PPU
      LDY     #$00
      LDA     (RAM_PPUDataBufferPointer),Y
      ; If the first byte at the buffer address is #$00, we have nothing. We're done here!
      BEQ     PPUBufferUpdatesComplete

      ; Clear address latch
      LDX     PPUSTATUS
      ; Set the PPU address to the
      ; address from the PPU buffer
      STA     PPUADDR
      INY
      LDA     (RAM_PPUDataBufferPointer),Y
      STA     PPUADDR
      INY
      LDA     (RAM_PPUDataBufferPointer),Y ; Data segment length byte...
      ASL     A
      PHA
      ; Enable NMI + Vertical increment + whatever else was already set...
      LDA     PPUCtrlMirror
      ORA     #PPUCtrl_Base2000|PPUCtrl_WriteVertical|PPUCtrl_Sprite0000|PPUCtrl_Background0000|PPUCtrl_SpriteSize8x8|PPUCtrl_NMIEnabled
      ; ...but only if $80 was set in the length byte. Otherwise, turn vertical incrementing back off.
      BCS     UpdatePPUFBWO_EnableVerticalIncrement

      AND     #PPUCtrl_Base2C00|PPUCtrl_WriteHorizontal|PPUCtrl_Sprite1000|PPUCtrl_Background1000|PPUCtrl_SpriteSize8x16|PPUCtrl_NMIEnabled|$40

UpdatePPUFBWO_EnableVerticalIncrement:
      STA     PPUCTRL
      PLA
      ; Check if the second bit ($40) in the length has been set
      ASL     A
      ; If not, we are copying a string of data
      BCC     UpdatePPUFBWO_CopyStringOfTiles

      ; Length (A) is now (A << 2).
      ; OR in #$02 now if we are copying a single tile;
      ; This will be rotated out into register C momentarily
      ORA     #$02
      INY

UpdatePPUFBWO_CopyStringOfTiles:
      ; Restore the data length.
      ; A = (Length & #$3F)
      LSR     A

      ; This moves the second bit (used above to signal
      ; "one tile mode") into the Carry register
      LSR     A
      TAX ; Copy the length into register X

UpdatePPUFBWO_CopyLoop:
      ; If Carry is set (from above), we're only copying one tile.
      ; Do not increment Y to advance copying index
      BCS     UpdatePPUFBWO_CopySingleTileSkip

      INY

UpdatePPUFBWO_CopySingleTileSkip:
      LDA     (RAM_PPUDataBufferPointer),Y ; Load data from buffer...
      STA     PPUDATA ; ...store it to the PPU.
      DEX ; Decrease remaining length.
      BNE     UpdatePPUFBWO_CopyLoop ; Are we done? If no, copy more stuff

      INY ; Y contains the amount of copied data now
      TYA ; ...and now A does
      CLC ; Clear carry bit (from earlier)
      ADC     RAM_PPUDataBufferPointer ; Add the length to the PPU data buffer
      STA     RAM_PPUDataBufferPointer
      LDA     RAM_PPUDataBufferPointer+1
      ; If the length overflowed (carry set),
      ; add that to the hi byte of the pointer
      ADC     #$00
      STA     RAM_PPUDataBufferPointer+1
      ; Start the cycle over again.
      ; (If the PPU buffer points to a 0, it will terminate after this jump)
      JMP     UpdatePPUFromBufferWithOptions


IFDEF DEBUG
      .include "src/debug-f.asm"
ENDIF

IFDEF MMC5
RESET_MMC5:
      ; Set PRG mode 3 and CHR mode 3
      LDA     #$03
      STA     $5100 ; PRG mode
      STA     $5101 ; CHR mode

      ; Enable PRG RAM writing
      LDA     #$02
      STA     $5102 ; PRG RAM Protect 1
      LDA     #$01
      STA     $5103 ; PRG RAM Protect 2

      ; Set nametable mapping
      LDA     #%01010000
      STA     $5105

      LDA     #$00
      STA     $5113 ; PRG RAM bank
      STA     $5130 ; Upper CHR Bank bits

      LDA     #$0F
      STA     $5015

      ; PRG bank 0
      LDA     #$80 ; ROM bank 0
      STA     $5114

      ; PRG bank 1
      LDA     #$81 ; ROM bank 1
      STA     $5115

      ; PRG bank 2
      LDA     #$8E ; ROM bank E
      STA     $5116

      ; PRG bank 3
      LDA     #$8F ; ROM bank F
      STA     $5117

      JMP     RESET


ChangeCHRBanks_MMC5:
      LDA     SpriteCHR1
      STA     $5120

      LDA     SpriteCHR2
      STA     $5121

      LDA     SpriteCHR3
      STA     $5122

      LDA     SpriteCHR4
      STA     $5123

      LDA     BackgroundCHR1
      STA     $5124
      ADC     #$01
      STA     $5125

      LDA     BackgroundCHR2
      STA     $5126
      ADC     #$01
      STA     $5127

      LDA     BackgroundCHR1
      STA     $5128
      ADC     #$01
      STA     $5129

      LDA     BackgroundCHR2
      STA     $512A
      ADC     #$01
      STA     $512B

      RTS
ENDIF

IFDEF PRESERVE_UNUSED_SPACE
      ; Unused space in the original
      ; $ED4D - $EFFF
      .pad $F000, $FF
ENDIF


; these seem like they might be pointers, not actual values?
byte_BANKF_F000:
      .BYTE $00 ; 0x0
      .BYTE $08 ; ??
      .BYTE $10 ; ??
      .BYTE $18 ; ??
      .BYTE $20 ; most 16x16 items, clips in 1px
      .BYTE $24 ; most 16x16 enemies, clips in 4px
byte_BANKF_F006:
      .BYTE $28
      .BYTE $2A
      .BYTE $29
      .BYTE $2B
byte_BANKF_F00A:
      .BYTE $2C
byte_BANKF_F00B:
      .BYTE $2E
      .BYTE $30 ; 16x32 enemies, clips in 4px (birdo, mouser)
      .BYTE $34 ; bullet, clips in 8px
      .BYTE $38 ; 16x48 enemies, clips in 4px (tryclde)
      .BYTE $3C ; spark, clips in 0px
      .BYTE $40 ; flying carpet

; collision x bounding box
byte_BANKF_F011:
      .BYTE $06,$09,$06,$09 ; $00
      .BYTE $01,$01,$0E,$0E ; $04
      .BYTE $06,$09,$06,$09 ; $08
      .BYTE $01,$01,$0E,$0E ; $0C
      .BYTE $06,$09,$06,$09 ; $10
      .BYTE $01,$01,$0E,$0E ; $14
      .BYTE $06,$09,$06,$09 ; $18
      .BYTE $01,$01,$0E,$0E ; $1C
      .BYTE $08,$08,$00,$0F ; $20
      .BYTE $08,$08,$03,$0C ; $24
      .BYTE $F8,$18,$F8,$18 ; $28
      .BYTE $08,$08,$08,$08 ; $2C
      .BYTE $08,$08,$03,$0C ; $30
      .BYTE $03,$03,$02,$05 ; $34
      .BYTE $08,$08,$03,$0C ; $38
      .BYTE $08,$08,$FF,$10 ; $3C
      .BYTE $10,$10,$02,$1E ; $40

; collision y bounding box
byte_BANKF_F055:
      .BYTE $07,$07,$20,$20 ; $00
      .BYTE $0D,$1C,$0D,$1C ; $04
      .BYTE $FF,$FF,$20,$20 ; $08
      .BYTE $04,$1C,$04,$1C ; $0C
      .BYTE $0F,$0F,$20,$20 ; $10
      .BYTE $1C,$1C,$1C,$1C ; $14
      .BYTE $07,$07,$20,$20 ; $18
      .BYTE $0D,$1C,$0D,$1C ; $1C
      .BYTE $00,$10,$09,$09 ; $20
      .BYTE $03,$10,$09,$09 ; $24
      .BYTE $FF,$FF,$0F,$0F ; $28
      .BYTE $0C,$14,$07,$20 ; $2C
      .BYTE $FE,$20,$10,$10 ; $30
      .BYTE $09,$0A,$08,$08 ; $34
      .BYTE $03,$30,$18,$18 ; $38
      .BYTE $FF,$10,$08,$08 ; $3C
      .BYTE $09,$0A,$08,$08 ; $40

; object collision bounding box
byte_BANKF_F099:
      .BYTE $02,$02,$03,$00 ; $00
      .BYTE $03,$03,$F8,$00 ; $04
      .BYTE $03,$01,$F3,$04 ; $08
      .BYTE $03,$03,$03,$F2 ; $0C
      .BYTE $03,$03,$05,$03 ; $10
      .BYTE $0B,$10,$03,$00 ; $14, shy guy y?
      .BYTE $03,$03,$F8,$00 ; $18
      .BYTE $09,$04,$03,$03 ; $1C
      .BYTE $0E,$03,$03,$03 ; $20
      .BYTE $F6,$0C,$02,$03 ; $24
      .BYTE $0B,$0B,$09,$10 ; $28, shy guy x?
      .BYTE $09,$19,$20,$20 ; $2C
      .BYTE $03,$1E,$19,$08 ; $30
      .BYTE $09,$09,$09,$18 ; $34
      .BYTE $09,$1A,$06,$15 ; $38
      .BYTE $16,$11,$0D,$10 ; $3C
      .BYTE $1A,$19,$24,$10 ; $40
      .BYTE $03,$04,$2D,$30 ; $44
      .BYTE $0F,$2E,$3E,$1E ; $48
      .BYTE $28,$13,$48,$26 ; $4C


NextSpriteFlickerSlot:
      DEC     SpriteFlickerSlot
      BPL     NextSpriteFlickerSlot_Exit

      LDA     #$08
      STA     SpriteFlickerSlot

NextSpriteFlickerSlot_Exit:
      RTS


LevelMusicIndexes:
      .BYTE Music1_Overworld
      .BYTE Music1_Inside ; 1 ; Music1 indexes.
      .BYTE Music1_Boss ; 2
      .BYTE Music1_Wart ; 3
      .BYTE Music1_Subspace ; 4


; =============== S U B R O U T I N E =======================================

sub_BANKF_F0F9:
      JSR     NextSpriteFlickerSlot

      LDA     PlayerInRocket
      BNE     loc_BANKF_F11B

      ; boss clear fanfare locks player movement
      LDA     MusicPlaying2
      CMP     #Music2_BossClearFanfare
      BEQ     loc_BANKF_F115

      LDA     PlayerLock
      BNE     loc_BANKF_F115

      LDA     #PRGBank_0_1
      JSR     ChangeMappedPRGBank

      JSR     HandlePlayerState

loc_BANKF_F115:
      JSR     sub_BANKF_F228

      JSR     sub_BANKF_F31A

loc_BANKF_F11B:
      JMP     loc_BANKF_F146

; End of function sub_BANKF_F0F9

; =============== S U B R O U T I N E =======================================

sub_BANKF_F11E:
      JSR     NextSpriteFlickerSlot

      LDA     PlayerInRocket
      BNE     loc_BANKF_F146

      LDA     #PRGBank_0_1
      JSR     ChangeMappedPRGBank

      ; boss clear fanfare locks player movement
      LDA     MusicPlaying2
      CMP     #Music2_BossClearFanfare
      BEQ     loc_BANKF_F13A

      LDA     PlayerLock
      BNE     loc_BANKF_F13A

      JSR     HandlePlayerState

loc_BANKF_F13A:
      ; horizonal scrolling?
      JSR     sub_BANKF_F2C2

      ; horizonal scrolling?
      JSR     sub_BANK0_85EC

      ; screen boundary triggers
      JSR     sub_BANKF_F228

      ; render player
      JSR     sub_BANKF_F31A

loc_BANKF_F146:
      LDA     #PRGBank_2_3
      JSR     ChangeMappedPRGBank

      JSR     AreaMainRoutine

      JSR     AreaSecondaryRoutine

      JSR     AnimateCHRRoutine

      JSR     SetAreaStartPage

      LDX     #$03

loc_BANKF_F159:
      LDA     PlayerStateTimer,X
      BEQ     loc_BANKF_F15F

      DEC     PlayerStateTimer,X

loc_BANKF_F15F:
      DEX
      BPL     loc_BANKF_F159

      LDY     StarInvincibilityTimer
      BEQ     locret_BANKF_F17D

      LDA     byte_RAM_10
      AND     #$07
      BNE     locret_BANKF_F17D

      DEC     StarInvincibilityTimer
      CPY     #$08
      BNE     locret_BANKF_F17D

      LDY     CurrentMusicIndex
      LDA     LevelMusicIndexes,Y
      STA     MusicQueue1

locret_BANKF_F17D:
      RTS

; End of function sub_BANKF_F11E

; =============== S U B R O U T I N E =======================================

sub_BANKF_F17E:
      JSR     NextSpriteFlickerSlot

      JSR     sub_BANKF_F494

      LDA     PlayerInRocket
      BNE     loc_BANKF_F1AB

      ; boss clear fanfare locks player movement
      LDA     MusicPlaying2
      CMP     #Music2_BossClearFanfare
      BEQ     loc_BANKF_F19D

      LDA     PlayerLock
      BNE     loc_BANKF_F19D

      LDA     #PRGBank_0_1
      JSR     ChangeMappedPRGBank

      JSR     HandlePlayerState

loc_BANKF_F19D:
      LDA     #PRGBank_0_1
      JSR     ChangeMappedPRGBank

      JSR     sub_BANK0_8083

      JSR     sub_BANKF_F228

      JSR     sub_BANKF_F31A

loc_BANKF_F1AB:
      JMP     loc_BANKF_F146

; End of function sub_BANKF_F17E

; =============== S U B R O U T I N E =======================================

sub_BANKF_F1AE:
      LDA     DoAreaTransition
      CMP     #$02
      BEQ     locret_BANKF_F1E0

      LDY     #$03

loc_BANKF_F1B7:
      LDA     CurrentLevel,Y
      STA     CurrentLevel_Init,Y
      DEY
      BPL     loc_BANKF_F1B7

      LDA     PlayerXLo
      STA     PlayerXLo_Init
      LDA     PlayerYLo
      STA     PlayerYLo_Init
      LDA     PlayerScreenX
      STA     PlayerScreenX_Init
      LDA     PlayerScreenYLo
      STA     PlayerScreenYLo_Init
      LDA     PlayerYVelocity
      STA     PlayerYVelocity_Init
      LDA     PlayerState
      STA     PlayerState_Init

locret_BANKF_F1E0:
      RTS

; End of function sub_BANKF_F1AE

; =============== S U B R O U T I N E =======================================

;
; Level Initialization
; ====================
;
; Sets up in-level gameplay (eg. after level card)
;
LevelInitialization:
      LDY     #$03

; Loop through and set level, area, page, and transition from RAM
LevelInitialization_AreaSetupLoop:
      LDA     CurrentLevel_Init,Y
      STA     CurrentLevel,Y
      DEY
      BPL     LevelInitialization_AreaSetupLoop

      ; position the player
      LDA     PlayerXLo_Init
      STA     PlayerXLo
      LDA     PlayerYLo_Init
      STA     PlayerYLo
      LDA     PlayerScreenX_Init
      STA     PlayerScreenX
      LDA     PlayerScreenYLo_Init
      STA     PlayerScreenYLo
      LDA     PlayerYVelocity_Init
      STA     PlayerYVelocity
      LDA     PlayerState_Init
      STA     PlayerState
      LDA     #$00
      STA     InSubspaceOrJar
      STA     InJarType
      STA     PlayerInAir
      STA     DamageInvulnTime


RestorePlayerToFullHealth:
      LDY     PlayerMaxHealth ; Get player's current max HP
      LDA     PlayerHealthValueByHeartCount,Y ; Get the health value for this amount of hearts
      STA     PlayerHealth
      RTS


PlayerHealthValueByHeartCount:
      .BYTE PlayerHealth_2_HP
      .BYTE PlayerHealth_3_HP
      .BYTE PlayerHealth_4_HP
; Max hearts = (hearts - 2), value is 0,$01,2
; This table determines what the player's HP is set to

ClimbSpeed:
      .BYTE $00
ClimbSpeedDown:
      .BYTE $20
ClimbSpeedUp:
      .BYTE $F0
; Bug: The climb speed index is determined by checking the up/down flags in
; Player1JoypadHeld. If both are enabled, the index it out of bounds and uses
; the LDA ($A5) below, which zips the player up the vine!
IFDEF FIX_CLIMB_ZIP
      .BYTE $00
ENDIF

; =============== S U B R O U T I N E =======================================

; Bottomless pit check
sub_BANKF_F228:
      LDA     PlayerXLo
      SEC
      SBC     ScreenBoundaryLeftLo
      STA     PlayerScreenX
      LDA     PlayerYLo
      CLC
      SBC     ScreenYLo
      STA     PlayerScreenYLo
      LDA     PlayerYHi
      SBC     ScreenYHi
      STA     PlayerScreenYHi
      LDA     PlayerState
      CMP     #PlayerState_Lifting
      BCS     locret_BANKF_F297

      LDA     PlayerScreenYHi
      BEQ     loc_BANKF_F298

      BMI     loc_BANKF_F254

      ; bottomless pit
      LDA     #$00
      STA     PlayerStateTimer
      JMP     KillPlayer

; ---------------------------------------------------------------------------

loc_BANKF_F254:
      LDA     PlayerYHi
      BPL     locret_BANKF_F297

      LDA     InJarType
      BEQ     loc_BANKF_F298

      LDA     PlayerYLo
      CMP     #$F0
      BCS     locret_BANKF_F297

      JSR     DoAreaReset

      PLA
      PLA
      LDY     #$00
      STY     PlayerDucking
      STY     PlayerYVelocity
      STY     PlayerXVelocity
      LDA     #PlayerState_ExitingJar
      STA     PlayerState
      LDA     #SpriteAnimation_Ducking
      STA     PlayerAnimationFrame
      LDA     InJarType
      STY     InJarType
      CMP     #$02
      BNE     loc_BANKF_F286

      STA     DoAreaTransition
      RTS

; ---------------------------------------------------------------------------

loc_BANKF_F286:
      STY     InSubspaceOrJar
      LDA     CurrentLevelAreaCopy
      STA     CurrentLevelArea
      LDA     #PRGBank_8_9
      JSR     ChangeMappedPRGBank

      JMP     GetEnemyPointers

; ---------------------------------------------------------------------------

locret_BANKF_F297:
      RTS

; ---------------------------------------------------------------------------

loc_BANKF_F298:
      LDA     PlayerState
      CMP     #PlayerState_Climbing
      BNE     locret_BANKF_F297

      LDA     InSubspaceOrJar
      CMP     #$02
      BEQ     locret_BANKF_F297

      LDA     ClimbSpeedUp
      LDY     PlayerYHi
      BMI     loc_BANKF_F2BB

      LDA     PlayerScreenYLo
      CMP     #$B8
      BCC     locret_BANKF_F297

      LSR     PlayerYLo
      SEC
      ROL     PlayerYLo
      LDA     ClimbSpeedDown

loc_BANKF_F2BB:
      STA     PlayerYVelocity
      LDA     #PlayerState_ClimbingAreaTransition
      STA     PlayerState
      RTS

; End of function sub_BANKF_F228

; =============== S U B R O U T I N E =======================================

sub_BANKF_F2C2:
      LDA     #$00
      LDY     ScrollXLock
      BNE     loc_BANKF_F2D2

      LDA     PlayerXLo
      SEC
      SBC     #$78
      SEC
      SBC     ScreenBoundaryLeftLo

loc_BANKF_F2D2:
      STA     byte_RAM_BA
      RTS

; End of function sub_BANKF_F2C2

; ---------------------------------------------------------------------------
byte_BANKF_F2D5:
      .BYTE $00
      .BYTE $00
      .BYTE $00
      .BYTE $00
      .BYTE $FB
      .BYTE $FB
      .BYTE $00
      .BYTE $FB
      .BYTE $FB
      .BYTE $00
      .BYTE $FB

byte_BANKF_F2E0:
      .BYTE $D5
      .BYTE $D9
      .BYTE $FB
      .BYTE $D7

byte_BANKF_F2E4:
      .BYTE $00

byte_BANKF_F2E5:
      .BYTE $02

byte_BANKF_F2E6:
      .BYTE $04

byte_BANKF_F2E7:
      .BYTE $06
      .BYTE $0C
      .BYTE $0E
      .BYTE $10
      .BYTE $12
      .BYTE $00
      .BYTE $02
      .BYTE $08
      .BYTE $0A
      .BYTE $0C
      .BYTE $0E
      .BYTE $14
      .BYTE $16
      .BYTE $FB
      .BYTE $FB
      .BYTE $2C
      .BYTE $2C
      .BYTE $FB
      .BYTE $FB
      .BYTE $2E
      .BYTE $2E
      .BYTE $0C
      .BYTE $0E
      .BYTE $10
      .BYTE $12
      .BYTE $30
      .BYTE $30
      .BYTE $32
      .BYTE $32
      .BYTE $20
      .BYTE $22
      .BYTE $24
      .BYTE $26
      .BYTE $00
      .BYTE $02
      .BYTE $28
      .BYTE $2A
      .BYTE $18
      .BYTE $1A
      .BYTE $1C
      .BYTE $1E
      .BYTE $B4
      .BYTE $B6

DamageInvulnBlinkFrames:
      .BYTE $01, $01, $01, $02, $02, $04, $04, $04

; =============== S U B R O U T I N E =======================================

; render player subroutine
sub_BANKF_F31A:
IFDEF COMPATIBILITY
      .db $ac, $50, $00 ; LDA $0000 + PlayerState
ENDIF
IFNDEF COMPATIBILITY
      LDY     PlayerState ; Absolute address for zero-page
      NOP ; Alignment fix
ENDIF

      CPY     #PlayerState_ChangingSize
      BEQ     loc_BANKF_F337

      LDY     StarInvincibilityTimer
      BNE     loc_BANKF_F337

      LDA     DamageInvulnTime ; Determine if the player is invincible from damage,
; and if so, if they should be visible
      BEQ     loc_BANKF_F345

      LSR     A
      LSR     A
      LSR     A
      LSR     A
      TAY
      LDA     DamageInvulnTime
      AND     DamageInvulnBlinkFrames,Y
      BNE     loc_BANKF_F345

      RTS

; ---------------------------------------------------------------------------

loc_BANKF_F337:
      LDA     byte_RAM_10
      CPY     #$18
      BCS     loc_BANKF_F33F

      LSR     A
      LSR     A

loc_BANKF_F33F:
      AND     #ObjAttrib_Palette3
      ORA     PlayerAttributes
      STA     PlayerAttributes

loc_BANKF_F345:
      LDA     QuicksandDepth
      BEQ     loc_BANKF_F350

      LDA     #ObjAttrib_BehindBackground
      ORA     PlayerAttributes
      STA     PlayerAttributes

loc_BANKF_F350:
      LDA     PlayerScreenX
      STA     SpriteDMAArea+$23
      STA     SpriteDMAArea+$2B
      CLC
      ADC     #$08
      STA     SpriteDMAArea+$27
      STA     SpriteDMAArea+$2F
      LDA     PlayerScreenYLo
      STA     byte_RAM_0
      LDA     PlayerScreenYHi
      STA     byte_RAM_1
      LDY     PlayerAnimationFrame
      CPY     #$04
      BEQ     loc_BANKF_F382

      LDA     PlayerCurrentSize
      BEQ     loc_BANKF_F382

      LDA     byte_RAM_0
      CLC
      ADC     #$08
      STA     byte_RAM_0
      BCC     loc_BANKF_F382

      INC     byte_RAM_1

loc_BANKF_F382:
      LDA     CurrentCharacter
      CMP     #Character_Princess
      BEQ     loc_BANKF_F394

      CPY     #$00
      BNE     loc_BANKF_F394

      LDA     byte_RAM_0
      BNE     loc_BANKF_F392

      DEC     byte_RAM_1

loc_BANKF_F392:
      DEC     byte_RAM_0

loc_BANKF_F394:
      JSR     loc_BANKF_FAFE

      LDA     byte_RAM_1
      BNE     loc_BANKF_F3A6

      LDA     byte_RAM_0
      STA     SpriteDMAArea,Y
      STA     SpriteDMAArea+$20
      STA     SpriteDMAArea+$24

loc_BANKF_F3A6:
      LDA     byte_RAM_0
      CLC
      ADC     #$10
      STA     byte_RAM_0
      LDA     byte_RAM_1
      ADC     #$00
      BNE     loc_BANKF_F3BB

      LDA     byte_RAM_0
      STA     SpriteDMAArea+$28
      STA     SpriteDMAArea+$2C

loc_BANKF_F3BB:
      LDA     CrouchJumpTimer
      CMP     #$3C
      BCC     loc_BANKF_F3CA

      LDA     byte_RAM_10
      AND     #ObjAttrib_Palette1
      ORA     PlayerAttributes
      STA     PlayerAttributes

loc_BANKF_F3CA:
      LDA     PlayerDirection
      LSR     A
      ROR     A
      ROR     A
      ORA     PlayerAttributes
      AND     #%11111100
      ORA     #ObjAttrib_Palette1
      STA     SpriteDMAArea+2,Y
      LDX     PlayerAnimationFrame
      CPX     #$07
      BEQ     loc_BANKF_F3E2

      CPX     #$04
      BNE     loc_BANKF_F3EE

loc_BANKF_F3E2:
      LDA     PlayerAttributes
      STA     SpriteDMAArea+$22
      STA     SpriteDMAArea+$2A
      ORA     #$40
      BNE     loc_BANKF_F3F8

loc_BANKF_F3EE:
      AND     #$FC
      ORA     PlayerAttributes
      STA     SpriteDMAArea+$22
      STA     SpriteDMAArea+$2A

loc_BANKF_F3F8:
      STA     SpriteDMAArea+$26
      STA     SpriteDMAArea+$2E
      LDA     byte_BANKF_F2D5,X
      BNE     loc_BANKF_F408

      LDX     CurrentCharacter
      LDA     byte_BANKF_F2E0,X

loc_BANKF_F408:
      STA     SpriteDMAArea+1,Y
      LDA     PlayerAnimationFrame
      CMP     #$06
      BCS     loc_BANKF_F413

      ORA     HoldingItem

loc_BANKF_F413:
      ASL     A
      ASL     A
      TAX
      LDA     PlayerDirection
      BNE     loc_BANKF_F44A

      LDA     SpriteDMAArea+$23
      STA     SpriteDMAArea+3,Y
      LDA     byte_BANKF_F2E4,X
      STA     SpriteDMAArea+$21
      LDA     byte_BANKF_F2E5,X
      STA     SpriteDMAArea+$25
      LDA     PlayerCurrentSize
      BNE     loc_BANKF_F43F

      LDA     CurrentCharacter
      CMP     #Character_Princess
      BNE     loc_BANKF_F43F

      LDA     PlayerAnimationFrame
      CMP     #SpriteAnimation_Jumping
      BNE     loc_BANKF_F43F

      LDX     #$2A

loc_BANKF_F43F:
      LDA     byte_BANKF_F2E6,X
      STA     SpriteDMAArea+$29
      LDA     byte_BANKF_F2E7,X
      BNE     loc_BANKF_F478

loc_BANKF_F44A:
      LDA     SpriteDMAArea+$27
      STA     SpriteDMAArea+3,Y
      LDA     byte_BANKF_F2E5,X
      STA     SpriteDMAArea+$21
      LDA     byte_BANKF_F2E4,X
      STA     SpriteDMAArea+$25
      LDA     PlayerCurrentSize
      BNE     loc_BANKF_F46F

      LDA     CurrentCharacter
      CMP     #Character_Princess
      BNE     loc_BANKF_F46F

      LDA     PlayerAnimationFrame
      CMP     #SpriteAnimation_Jumping
      BNE     loc_BANKF_F46F

      LDX     #$2A

loc_BANKF_F46F:
      LDA     byte_BANKF_F2E7,X
      STA     SpriteDMAArea+$29
      LDA     byte_BANKF_F2E6,X

loc_BANKF_F478:
      STA     SpriteDMAArea+$2D
      RTS

; End of function sub_BANKF_F31A

; =============== S U B R O U T I N E =======================================

SetAreaStartPage:
      LDA     IsHorizontalLevel
      BNE     SetAreaStartPage_HorizontalLevel

      LDY     PlayerYHi
      LDA     PlayerYLo
      JSR     GetVerticalAreaStartPage

      TYA
      BPL     SetAreaStartPage_SetAndExit
      LDA     #$00
      BEQ     SetAreaStartPage_SetAndExit

SetAreaStartPage_HorizontalLevel:
      LDA     PlayerXHi

SetAreaStartPage_SetAndExit:
      STA     CurrentLevelPage
      RTS

; End of function SetAreaStartPage

; =============== S U B R O U T I N E =======================================

sub_BANKF_F494:
      LDX     NeedVerticalScroll
      BNE     locret_BANKF_F4C2

      LDA     PlayerState
      CMP     #PlayerState_Lifting
      BCS     locret_BANKF_F4C2

      LDA     PlayerScreenYLo
      LDY     PlayerScreenYHi
      BMI     loc_BANKF_F4B0

      BNE     loc_BANKF_F4B6

      CMP     #$B4
      BCS     loc_BANKF_F4B6

      CMP     #$21
      BCS     loc_BANKF_F4B8

loc_BANKF_F4B0:
      LDY     PlayerInAir
      BNE     loc_BANKF_F4B8

      BEQ     loc_BANKF_F4B7

loc_BANKF_F4B6:
      INX

loc_BANKF_F4B7:
      INX

loc_BANKF_F4B8:
      LDA     VerticalScrollDirection
      STX     VerticalScrollDirection
      BNE     locret_BANKF_F4C2

      STX     NeedVerticalScroll

locret_BANKF_F4C2:
      RTS

; End of function sub_BANKF_F494

; =============== S U B R O U T I N E =======================================

; Determines start page for vertical area
GetVerticalAreaStartPage:
      STA     byte_RAM_F
      TYA
      BMI     locret_BANKF_F4D9

      ASL     A
      ASL     A
      ASL     A
      ASL     A
      CLC
      ADC     byte_RAM_F
      BCS     loc_BANKF_F4D5

      CMP     #$F0
      BCC     locret_BANKF_F4D9

loc_BANKF_F4D5:
      CLC
      ADC     #$10
      INY

locret_BANKF_F4D9:
      RTS

; End of function GetVerticalAreaStartPage

; ---------------------------------------------------------------------------
byte_BANKF_F4DA:
      .BYTE $C0
      .BYTE $70
      .BYTE $80
      .BYTE $50
      .BYTE $A0
      .BYTE $40
      .BYTE $B0
      .BYTE $60
      .BYTE $90
      .BYTE $C0
      .BYTE $70
      .BYTE $80
      .BYTE $50
      .BYTE $A0
      .BYTE $40
      .BYTE $B0
      .BYTE $60

; Sprite display configuration
ObjectAttributeTable:
      .BYTE ObjAttrib_Palette1 ; $00
      .BYTE ObjAttrib_Palette1 ; $01
      .BYTE ObjAttrib_Palette1 ; $02
      .BYTE ObjAttrib_Palette3 ; $03
      .BYTE ObjAttrib_Palette2 ; $04
      .BYTE ObjAttrib_Palette1 ; $05
      .BYTE ObjAttrib_Palette2 ; $06
      .BYTE ObjAttrib_Palette3 ; $07
      .BYTE ObjAttrib_Palette1|ObjAttrib_16x32 ; $08
      .BYTE ObjAttrib_Palette1 ; $09
      .BYTE ObjAttrib_Palette1|ObjAttrib_Horizontal|ObjAttrib_16x32 ; $0A
      .BYTE ObjAttrib_Palette1|ObjAttrib_Horizontal|ObjAttrib_16x32 ; $0B
      .BYTE ObjAttrib_Palette1|ObjAttrib_Horizontal|ObjAttrib_16x32 ; $0C
      .BYTE ObjAttrib_Palette1 ; $0D
      .BYTE ObjAttrib_Palette1 ; $0E
      .BYTE ObjAttrib_Palette1 ; $0F
      .BYTE ObjAttrib_Palette2 ; $10
      .BYTE ObjAttrib_Palette1|ObjAttrib_Mirrored ; $11
      .BYTE ObjAttrib_Palette1|ObjAttrib_Horizontal|ObjAttrib_FrontFacing ; $12
      .BYTE ObjAttrib_Palette1|ObjAttrib_FrontFacing ; $13
      .BYTE ObjAttrib_Palette1|ObjAttrib_Mirrored ; $14
      .BYTE ObjAttrib_Palette0 ; $15
      .BYTE ObjAttrib_Palette0 ; $16
      .BYTE ObjAttrib_Palette1|ObjAttrib_FrontFacing ; $17
      .BYTE ObjAttrib_Palette1|ObjAttrib_16x32|ObjAttrib_UpsideDown ; $18
      .BYTE ObjAttrib_Palette1|ObjAttrib_16x32 ; $19
      .BYTE ObjAttrib_Palette2|ObjAttrib_FrontFacing ; $1A
      .BYTE ObjAttrib_Palette2|ObjAttrib_FrontFacing ; $1B
      .BYTE ObjAttrib_Palette2|ObjAttrib_16x32 ; $1C
      .BYTE ObjAttrib_Palette3|ObjAttrib_16x32 ; $1D
      .BYTE ObjAttrib_Palette1|ObjAttrib_FrontFacing ; $1E
      .BYTE ObjAttrib_Palette2|ObjAttrib_FrontFacing ; $1F
      .BYTE ObjAttrib_Palette1|ObjAttrib_Mirrored ; $20
      .BYTE ObjAttrib_Palette1|ObjAttrib_16x32 ; $21
      .BYTE ObjAttrib_Palette2 ; $22
      .BYTE ObjAttrib_Palette1 ; $23
      .BYTE ObjAttrib_Palette3 ; $24
      .BYTE ObjAttrib_Palette2 ; $25
      .BYTE ObjAttrib_Palette1 ; $26
      .BYTE ObjAttrib_Palette1 ; $27
      .BYTE ObjAttrib_Palette1|ObjAttrib_FrontFacing ; $28
      .BYTE ObjAttrib_Palette1 ; $29
      .BYTE ObjAttrib_Palette1|ObjAttrib_16x32 ; $2A
      .BYTE ObjAttrib_Palette1 ; $2B
      .BYTE ObjAttrib_Palette3|ObjAttrib_Horizontal|ObjAttrib_FrontFacing|ObjAttrib_16x32 ; $2C
      .BYTE ObjAttrib_Palette1|ObjAttrib_16x32 ; $2D
      .BYTE ObjAttrib_Palette1|ObjAttrib_Mirrored ; $2E
      .BYTE ObjAttrib_Palette1|ObjAttrib_Mirrored ; $2F
      .BYTE ObjAttrib_Palette1|ObjAttrib_Mirrored ; $30
      .BYTE ObjAttrib_Palette1|ObjAttrib_Mirrored ; $31
      .BYTE ObjAttrib_Palette1|ObjAttrib_Mirrored|ObjAttrib_UpsideDown ; $32
      .BYTE ObjAttrib_Palette1|ObjAttrib_Mirrored|ObjAttrib_UpsideDown ; $33
      .BYTE ObjAttrib_Palette2|ObjAttrib_Mirrored|ObjAttrib_UpsideDown ; $34
      .BYTE ObjAttrib_Palette1|ObjAttrib_Mirrored|ObjAttrib_UpsideDown ; $35
      .BYTE ObjAttrib_Palette1|ObjAttrib_Mirrored|ObjAttrib_UpsideDown ; $36
      .BYTE ObjAttrib_Palette1|ObjAttrib_UpsideDown ; $37
      .BYTE ObjAttrib_Palette1|ObjAttrib_UpsideDown ; $38
      .BYTE ObjAttrib_Palette1|ObjAttrib_FrontFacing ; $39
      .BYTE ObjAttrib_Palette1|ObjAttrib_FrontFacing|ObjAttrib_UpsideDown ; $3A
      .BYTE ObjAttrib_Palette1|ObjAttrib_Horizontal|ObjAttrib_FrontFacing|ObjAttrib_16x32 ; $3B
      .BYTE ObjAttrib_Palette1|ObjAttrib_FrontFacing ; $3C
      .BYTE ObjAttrib_Palette1|ObjAttrib_FrontFacing ; $3D
      .BYTE ObjAttrib_Palette1|ObjAttrib_FrontFacing|ObjAttrib_UpsideDown ; $3E
      .BYTE ObjAttrib_Palette1|ObjAttrib_Mirrored ; $3F
      .BYTE ObjAttrib_Palette1|ObjAttrib_FrontFacing|ObjAttrib_UpsideDown ; $40
      .BYTE ObjAttrib_Palette1|ObjAttrib_Horizontal|ObjAttrib_16x32 ; $41
      .BYTE ObjAttrib_Palette1|ObjAttrib_16x32 ; $42
      .BYTE ObjAttrib_Palette1|ObjAttrib_16x32 ; $43
      .BYTE ObjAttrib_Palette1|ObjAttrib_Mirrored ; $44
      .BYTE ObjAttrib_Palette2|ObjAttrib_Mirrored ; $45
      .BYTE ObjAttrib_Palette2|ObjAttrib_Mirrored|ObjAttrib_UpsideDown ; $46

;
; Enemy Behavior 46E
;
;   bit 7 ($80) - uses mirrored sprite for animation
;   bit 6 ($40) - double speed
;   bit 5 ($20) - wider sprite? used for mouser
;   bit 4 ($10) - use tilemap 2
;   bit 3 ($08) - squawk on death
;   bit 2 ($04) - disable collision with other enemies
;   bit 1 ($02) - unliftable
;   bit 0 ($01) - hurts when touched
EnemyArray_46E_Data:
      .BYTE %00000100 ; $00
      .BYTE %00000000 ; $01
      .BYTE %00000000 ; $02
      .BYTE %00000000 ; $03
      .BYTE %00000011 ; $04
      .BYTE %00000000 ; $05
      .BYTE %00000000 ; $06
      .BYTE %00000000 ; $07
      .BYTE %01010000 ; $08
      .BYTE %01000000 ; $09
      .BYTE %01000010 ; $0A
      .BYTE %01000010 ; $0B
      .BYTE %01000010 ; $0C
      .BYTE %01000000 ; $0D
      .BYTE %01000000 ; $0E
      .BYTE %01000000 ; $0F
      .BYTE %01000000 ; $10
      .BYTE %00010011 ; $11
      .BYTE %11010000 ; $12
      .BYTE %10000000 ; $13
      .BYTE %00000000 ; $14
      .BYTE %00000110 ; $15
      .BYTE %00000110 ; $16
      .BYTE %00000111 ; $17
      .BYTE %00010000 ; $18
      .BYTE %01010000 ; $19
      .BYTE %10010000 ; $1A
      .BYTE %00000111 ; $1B
      .BYTE %00001010 ; $1C
      .BYTE %00111011 ; $1D
      .BYTE %01000000 ; $1E
      .BYTE %00011000 ; $1F
      .BYTE %00000111 ; $20
      .BYTE %00011011 ; $21
      .BYTE %00010000 ; $22
      .BYTE %00000111 ; $23
      .BYTE %00000111 ; $24
      .BYTE %00000111 ; $25
      .BYTE %01010000 ; $26
      .BYTE %01010011 ; $27
      .BYTE %10010110 ; $28
      .BYTE %01010000 ; $29
      .BYTE %10011011 ; $2A
      .BYTE %11010011 ; $2B
      .BYTE %00011011 ; $2C
      .BYTE %00001011 ; $2D
      .BYTE %00000011 ; $2E
      .BYTE %00000011 ; $2F
      .BYTE %00000011 ; $30
      .BYTE %00000011 ; $31
      .BYTE %00000000 ; $32
      .BYTE %00000000 ; $33
      .BYTE %00000000 ; $34
      .BYTE %00000000 ; $35
      .BYTE %00000100 ; $36
      .BYTE %00000100 ; $37
      .BYTE %00000100 ; $38
      .BYTE %00000000 ; $39
      .BYTE %00000000 ; $3A
      .BYTE %00000110 ; $3B
      .BYTE %00000100 ; $3C
      .BYTE %00000000 ; $3D
      .BYTE %00000100 ; $3E
      .BYTE %00000100 ; $3F
      .BYTE %00000100 ; $40
      .BYTE %00010110 ; $41
      .BYTE %00000110 ; $42
      .BYTE %00000110 ; $43
      .BYTE %00001100 ; $44
      .BYTE %00000100 ; $45
      .BYTE %00000100 ; $46

;
; Height and horizontal collision detection
;
EnemyArray_492_Data:
      .BYTE $00 ; $00
      .BYTE $05 ; $01
      .BYTE $05 ; $02
      .BYTE $05 ; $03
      .BYTE $05 ; $04
      .BYTE $05 ; $05
      .BYTE $05 ; $06
      .BYTE $05 ; $07
      .BYTE $0C ; $08
      .BYTE $05 ; $09
      .BYTE $05 ; $0A
      .BYTE $05 ; $0B
      .BYTE $05 ; $0C
      .BYTE $05 ; $0D
      .BYTE $05 ; $0E
      .BYTE $05 ; $0F
      .BYTE $05 ; $10
      .BYTE $05 ; $11
      .BYTE $05 ; $12
      .BYTE $05 ; $13
      .BYTE $05 ; $14
      .BYTE $0D ; $15
      .BYTE $0D ; $16
      .BYTE $05 ; $17
      .BYTE $0C ; $18
      .BYTE $0C ; $19
      .BYTE $05 ; $1A
      .BYTE $0D ; $1B
      .BYTE $0C ; $1C
      .BYTE $0C ; $1D
      .BYTE $05 ; $1E
      .BYTE $0E ; $1F
      .BYTE $0D ; $20
      .BYTE $0C ; $21
      .BYTE $05 ; $22
      .BYTE $05 ; $23
      .BYTE $05 ; $24
      .BYTE $05 ; $25
      .BYTE $0C ; $26
      .BYTE $05 ; $27
      .BYTE $05 ; $28
      .BYTE $05 ; $29
      .BYTE $05 ; $2A
      .BYTE $05 ; $2B
      .BYTE $05 ; $2C
      .BYTE $00 ; $2D
      .BYTE $0F ; $2E
      .BYTE $0F ; $2F
      .BYTE $0F ; $30
      .BYTE $0F ; $31
      .BYTE $05 ; $32
      .BYTE $05 ; $33
      .BYTE $05 ; $34
      .BYTE $05 ; $35
      .BYTE $05 ; $36
      .BYTE $05 ; $37
      .BYTE $05 ; $38
      .BYTE $04 ; $39
      .BYTE $04 ; $3A
      .BYTE $04 ; $3B
      .BYTE $04 ; $3C
      .BYTE $04 ; $3D
      .BYTE $04 ; $3E
      .BYTE $04 ; $3F
      .BYTE $04 ; $40
      .BYTE $10 ; $41
      .BYTE $00 ; $42
      .BYTE $00 ; $43
      .BYTE $05 ; $44
      .BYTE $05 ; $45
      .BYTE $05 ; $46

;
; Horizontal hitbox, collision detection, and carried height
;
EnemyArray_489_Data:
      .BYTE $08 ; $00
      .BYTE $02 ; $01
      .BYTE $02 ; $02
      .BYTE $02 ; $03
      .BYTE $02 ; $04
      .BYTE $02 ; $05
      .BYTE $02 ; $06
      .BYTE $02 ; $07
      .BYTE $04 ; $08
      .BYTE $02 ; $09
      .BYTE $09 ; $0A
      .BYTE $09 ; $0B
      .BYTE $09 ; $0C
      .BYTE $02 ; $0D
      .BYTE $02 ; $0E
      .BYTE $02 ; $0F
      .BYTE $02 ; $10
      .BYTE $02 ; $11
      .BYTE $02 ; $12
      .BYTE $02 ; $13
      .BYTE $02 ; $14
      .BYTE $08 ; $15
      .BYTE $08 ; $16
      .BYTE $02 ; $17
      .BYTE $04 ; $18
      .BYTE $04 ; $19
      .BYTE $0E ; $1A
      .BYTE $08 ; $1B
      .BYTE $04 ; $1C
      .BYTE $04 ; $1D
      .BYTE $02 ; $1E
      .BYTE $0F ; $1F
      .BYTE $02 ; $20
      .BYTE $13 ; $21
      .BYTE $02 ; $22
      .BYTE $02 ; $23
      .BYTE $02 ; $24
      .BYTE $02 ; $25
      .BYTE $10 ; $26
      .BYTE $02 ; $27
      .BYTE $12 ; $28
      .BYTE $02 ; $29
      .BYTE $0F ; $2A
      .BYTE $02 ; $2B
      .BYTE $11 ; $2C
      .BYTE $0B ; $2D
      .BYTE $02 ; $2E
      .BYTE $02 ; $2F
      .BYTE $02 ; $30
      .BYTE $02 ; $31
      .BYTE $02 ; $32
      .BYTE $02 ; $33
      .BYTE $02 ; $34
      .BYTE $02 ; $35
      .BYTE $02 ; $36
      .BYTE $02 ; $37
      .BYTE $04 ; $38
      .BYTE $03 ; $39
      .BYTE $03 ; $3A
      .BYTE $07 ; $3B
      .BYTE $04 ; $3C
      .BYTE $03 ; $3D
      .BYTE $03 ; $3E
      .BYTE $03 ; $3F
      .BYTE $03 ; $40
      .BYTE $09 ; $41
      .BYTE $0B ; $42
      .BYTE $0B ; $43
      .BYTE $02 ; $44
      .BYTE $02 ; $45
      .BYTE $02 ; $46

; More collision (post-throw)
byte_BANKF_F607:
      .BYTE $00 ; $00
      .BYTE $00 ; $01
      .BYTE $00 ; $02
      .BYTE $00 ; $03
      .BYTE $00 ; $04
      .BYTE $00 ; $05
      .BYTE $00 ; $06
      .BYTE $00 ; $07
      .BYTE $00 ; $08
      .BYTE $00 ; $09
      .BYTE $00 ; $0A
      .BYTE $00 ; $0B
      .BYTE $00 ; $0C
      .BYTE $00 ; $0D
      .BYTE $00 ; $0E
      .BYTE $00 ; $0F
      .BYTE $00 ; $10
      .BYTE $00 ; $11
      .BYTE $00 ; $12
      .BYTE $00 ; $13
      .BYTE $00 ; $14
      .BYTE $00 ; $15
      .BYTE $00 ; $16
      .BYTE $00 ; $17
      .BYTE $00 ; $18
      .BYTE $00 ; $19
      .BYTE $00 ; $1A
      .BYTE $00 ; $1B
      .BYTE $00 ; $1C
      .BYTE $00 ; $1D
      .BYTE $00 ; $1E
      .BYTE $00 ; $1F
      .BYTE $00 ; $20
      .BYTE $00 ; $21
      .BYTE $00 ; $22
      .BYTE $00 ; $23
      .BYTE $00 ; $24
      .BYTE $00 ; $25
      .BYTE $00 ; $26
      .BYTE $00 ; $27
      .BYTE $00 ; $28
      .BYTE $00 ; $29
      .BYTE $00 ; $2A
      .BYTE $00 ; $2B
      .BYTE $00 ; $2C
      .BYTE $00 ; $2D
      .BYTE $00 ; $2E
      .BYTE $00 ; $2F
      .BYTE $00 ; $30
      .BYTE $00 ; $31
      .BYTE $01 ; $32
      .BYTE $01 ; $33
      .BYTE $01 ; $34
      .BYTE $01 ; $35
      .BYTE $02 ; $36
      .BYTE $01 ; $37
      .BYTE $00 ; $38
      .BYTE $02 ; $39
      .BYTE $03 ; $3A
      .BYTE $02 ; $3B
      .BYTE $04 ; $3C
      .BYTE $02 ; $3D
      .BYTE $02 ; $3E
      .BYTE $02 ; $3F
      .BYTE $02 ; $40
      .BYTE $02 ; $41
      .BYTE $02 ; $42
      .BYTE $02 ; $43
      .BYTE $02 ; $44
      .BYTE $00 ; $45
      .BYTE $02 ; $46

;
; This table determines the "solidness" of tiles.
;
; Solidness is broken into four tiers:
;   - background (no collisions)
;   - background to player/enemies, solid to mushroom blocks
;   - jumpthrough block (collision on top only)
;   - solid block (collision on all sides)
;
; Tiles are divided into groups of $40. For each category, the corresponding
; the groups are divided into two groups: tiles that have a collision rule and
; tiles that don't.
;
TileSolidnessTable:
      ; solid to mushroom blocks unless < these values
      .BYTE $01
      .BYTE $43
      .BYTE $80
      .BYTE $C0
      ; solid on top unless < these values
      .BYTE $12
      .BYTE $60
      .BYTE $91
      .BYTE $CA
      ; solid on all sides unless < these values
      .BYTE $18
      .BYTE $69
      .BYTE $98
      .BYTE $D5

WarpDestinations:
      .BYTE $03, $01, $04, $05, $06, $05, $06


;
; Updates joypad press/held values
;
UpdateJoypads:
      JSR     ReadJoypads

UpdateJoypads_DoubleCheck:
      ; Work around DPCM sample bug,
      ; where some spurious inputs are read
      LDY     Player1JoypadPress
      JSR     ReadJoypads

      CPY     Player1JoypadPress
      BNE     UpdateJoypads_DoubleCheck

      LDX     #$01

UpdateJoypads_Loop:
      LDA     Player1JoypadPress,X ; Update the press/held values
      TAY
      EOR     Player1JoypadHeld,X
      AND     Player1JoypadPress,X
      STA     Player1JoypadPress,X
      STY     Player1JoypadHeld,X
      DEX
      BPL     UpdateJoypads_Loop

      RTS


;
; Reads joypad pressed input
;
ReadJoypads:
      LDX     #$01
      STX     JOY1
      DEX
      STX     JOY1

      LDX     #$08
ReadJoypadLoop:
      LDA     JOY1
      LSR     A
      ROL     Player1JoypadPress
      LSR     A
      ; @TODO These seem to never be read, and even then are using a
      ; second bit from JOY1/JOY2 ... Was this reading from
      ; the expansion port???
      ROL     Player1JoypadUnk
      LDA     JOY2
      LSR     A
      ROL     Player2JoypadPress
      LSR     A
      ROL     Player2JoypadUnk
      DEX
      BNE     ReadJoypadLoop

      RTS


; =============== S U B R O U T I N E =======================================

sub_BANKF_F6A1:
      LDA     CurrentLevelPage
      ASL     A
      TAY
      LDA     AreaPointersByPage,Y
      STA     CurrentLevel
      INY
      LDA     AreaPointersByPage,Y
      LSR     A
      LSR     A
      LSR     A
      LSR     A
      STA     CurrentLevelArea
      LDA     AreaPointersByPage,Y
      AND     #$F
      STA     CurrentLevelEntryPage
      RTS

; End of function sub_BANKF_F6A1


;
; Checks that we're playing the correct music and switches if necessary, unless
; we're playing the invincibility music.
;
; Input
;   CompareMusicIndex = music we should be playing
;   CurrentMusicIndex = music we're actually playing
;   StarInvincibilityTimer = whether the player is invincible
;
; Output
;   CurrentMusicIndex = music we should be plathing
;   MusicQueue1 = song to play if we need to change the music
;
EnsureCorrectMusic:
      LDA     CompareMusicIndex
      CMP     CurrentMusicIndex
      BEQ     EnsureCorrectMusic_Exit

      TAX
      STX     CurrentMusicIndex
      LDA     StarInvincibilityTimer
      CMP     #$08
      BCS     EnsureCorrectMusic_Exit

      LDA     LevelMusicIndexes,X
      STA     MusicQueue1

EnsureCorrectMusic_Exit:
      RTS


DoAreaReset:
      LDA     #$00
      STA     AreaInitialized
      STA     ObjectCarriedOver
      STA     SubspaceTimer
      STA     SubspaceDoorTimer
      LDX     #$08

DoAreaReset_EnemyLoop:
      LDA     EnemyState,X
      BEQ     DoAreaReset_EnemyLoopEnd

      LDA     ObjectBeingCarriedTimer,X
      BEQ     DoAreaReset_AfterCarryOver

      LDA     ObjectType,X
      CMP     #Enemy_MushroomBlock
      BEQ     DoAreaReset_AfterCarryOver

      STA     ObjectCarriedOver

DoAreaReset_AfterCarryOver:
      JSR     AreaResetEnemyDestroy

DoAreaReset_EnemyLoopEnd:
      DEX
      BPL     DoAreaReset_EnemyLoop

      LDX     byte_RAM_12
      RTS

; End of function DoAreaReset

; =============== S U B R O U T I N E =======================================

AreaResetEnemyDestroy:
      ; load raw enemy data offset so we can allow the level object to respawn
      LDY     unk_RAM_441,X
      ; nothing to reset if offset is invalid
      BMI     AreaResetEnemyDestroy_AfterAllowRespawn

      ; disabling bit 7 allows the object to respawn
      LDA     (RawEnemyData),Y
      AND     #$7F
      STA     (RawEnemyData),Y

AreaResetEnemyDestroy_AfterAllowRespawn:
      LDA     #EnemyState_Inactive
      STA     EnemyState,X
      RTS

; End of function AreaResetEnemyDestroy

; =============== S U B R O U T I N E =======================================

KillPlayer:
      LDA     #PlayerState_Dying ; Mark player as dead
      STA     PlayerState
      LDA     #$00 ; Clear some variables
      STA     PlayerHealth
      STA     CrouchJumpTimer
      STA     StarInvincibilityTimer
      LDA     #SpriteAnimation_Dead ; Set player animation to dead?
      STA     PlayerAnimationFrame
      LDA     HoldingItem
      BEQ     loc_BANKF_F749

      ; Probably something to throw away
      ; a held item on death
      DEC     HoldingItem
      LDY     ObjectBeingCarriedIndex
      STA     EnemyArray_42F,Y
      LSR     A
      STA     ObjectBeingCarriedTimer,Y
      STA     ObjectXVelocity,Y
      LDA     #$E0
      STX     byte_RAM_D
      LDX     EnemyState,Y
      CPX     #EnemyState_7
      BEQ     loc_BANKF_F747

      STA     ObjectYVelocity,Y

loc_BANKF_F747:
      LDX     byte_RAM_D

loc_BANKF_F749:
      ; Set music to death jingle
      LDA     #Music2_DeathJingle
      STA     MusicQueue2
      ; BUG: Setting DPCM at the same time as music
      LDA     #DPCM_PlayerDeath
      STA     DPCMQueue
      RTS

; End of function KillPlayer

; =============== S U B R O U T I N E =======================================

; Something to do with loading levels here

GetLevelPointers:
      LDY     CurrentLevel
      LDA     LevelAreaStartIndexes,Y
      CLC
      ADC     CurrentLevelArea
      TAY ; Y now contains the current area or something
      LDA     LevelDataPointersLo,Y
      STA     byte_RAM_5 ; $0005/$0006 are pointers to the level data
      LDA     LevelDataPointersHi,Y
      STA     byte_RAM_6
      LDX     #$FF ; Set to load level data into $7800 in RAM
      LDA     #$78
      STA     byte_RAM_2
      LDY     #$00
      STY     byte_RAM_1

CopyLevelDataToMemory:
      LDA     (byte_RAM_5),Y
      STA     (byte_RAM_1),Y
      INY
      DEX
      BNE     CopyLevelDataToMemory

      STA     (byte_RAM_1),Y

; End of function GetLevelPointers

; =============== S U B R O U T I N E =======================================

GetEnemyPointers:
      LDY     CurrentLevel
      LDA     EnemyPointersByLevel_HiHi,Y
      STA     byte_RAM_1
      LDA     EnemyPointersByLevel_HiLo,Y
      STA     byte_RAM_0
      LDA     EnemyPointersByLevel_LoHi,Y
      STA     byte_RAM_3
      LDA     EnemyPointersByLevel_LoLo,Y
      STA     byte_RAM_2
      LDA     InSubspaceOrJar ; Are we in a jar?
      CMP     #$01
      BNE     loc_BANKF_F7A0 ; No, load the area as usual

      LDY     #$04 ; Yes; jars are always area #$04 for some reason
      JMP     loc_BANKF_F7A3

; ---------------------------------------------------------------------------

loc_BANKF_F7A0:
      LDY     CurrentLevelArea

loc_BANKF_F7A3:
      LDA     (byte_RAM_0),Y
      STA     byte_RAM_1
      LDA     (byte_RAM_2),Y
      STA     byte_RAM_0
      LDX     #$FF
      LDA     #$7B
      STA     byte_RAM_3
      LDY     #$00
      STY     byte_RAM_2

CopyEnemyDataToMemory:
      LDA     (byte_RAM_0),Y
      STA     (byte_RAM_2),Y
      INY
      DEX
      BNE     CopyEnemyDataToMemory

      RTS

; End of function GetEnemyPointers

; =============== S U B R O U T I N E =======================================

GetJarPointers:
      LDY     CurrentLevel ; Get the area starting index for the current level
      LDA     LevelAreaStartIndexes,Y
      CLC
      ADC     #$04 ; 4 is always the jar sub area
      TAY
      LDA     LevelDataPointersLo,Y
      STA     byte_RAM_5
      LDA     LevelDataPointersHi,Y
      STA     byte_RAM_6
      LDA     #$7A
      STA     byte_RAM_2
      LDY     #$00
      STY     byte_RAM_1

CopyJarDataToMemory:
      LDA     (byte_RAM_5),Y
      CMP     #$FF ; This one actually terminates on any $FF read! Welp.
      BEQ     CopyJarDataToMemoryFinished

      STA     (byte_RAM_1),Y
      INY
      JMP     CopyJarDataToMemory

; ---------------------------------------------------------------------------

CopyJarDataToMemoryFinished:
      STA     (byte_RAM_1),Y
      RTS

; End of function GetJarPointers


TileQuadPointersLo:
      .BYTE <TileQuads1
      .BYTE <TileQuads2
      .BYTE <TileQuads3
      .BYTE <TileQuads4

TileQuadPointersHi:
      .BYTE >TileQuads1
      .BYTE >TileQuads2
      .BYTE >TileQuads3
      .BYTE >TileQuads4

TileQuads1:
      .BYTE $FE,$FE,$FE,$FE ; $00
      .BYTE $B4,$B6,$B5,$B7 ; $04
      .BYTE $B8,$FA,$B9,$FA ; $08
      .BYTE $FA,$FA,$B2,$B3 ; $0C
      .BYTE $BE,$BE,$BF,$BF ; $10
      .BYTE $BF,$BF,$BF,$BF ; $14
      .BYTE $4A,$4A,$4B,$4B ; $18
      .BYTE $5E,$5F,$5E,$5F ; $1C
      .BYTE $E8,$E8,$A9,$A9 ; $20
      .BYTE $46,$FC,$46,$FC ; $24
      .BYTE $A9,$A9,$A9,$A9 ; $28
      .BYTE $FC,$FC,$FC,$FC ; $2C
      .BYTE $E9,$E9,$A9,$A9 ; $30
      .BYTE $FC,$48,$FC,$48 ; $34
      .BYTE $11,$11,$11,$11 ; $38
      .BYTE $22,$22,$22,$22 ; $3C
      .BYTE $33,$33,$33,$33 ; $40
      .BYTE $E8,$EB,$A9,$A9 ; $44
      .BYTE $74,$76,$75,$77 ; $48
      .BYTE $98,$9A,$99,$9B ; $4C
      .BYTE $9C,$9A,$9D,$9B ; $50
      .BYTE $9C,$9E,$9B,$9F ; $54
      .BYTE $58,$5A,$59,$5B ; $58
      .BYTE $5E,$5F,$5E,$5F ; $5C
      .BYTE $8E,$8F,$8F,$8E ; $60
      .BYTE $72,$73,$73,$72 ; $64
      .BYTE $A6,$A6,$A7,$A7 ; $68
      .BYTE $92,$93,$93,$92 ; $6C
      .BYTE $74,$76,$75,$77 ; $70
      .BYTE $70,$72,$71,$73 ; $74
      .BYTE $71,$73,$71,$73 ; $78
      .BYTE $24,$26,$25,$27 ; $7C
      .BYTE $32,$34,$33,$35 ; $80
      .BYTE $33,$35,$33,$35 ; $84
      .BYTE $24,$26,$25,$27 ; $88

TileQuads2:
      .BYTE $FA,$FA,$FA,$FA ; $00
      .BYTE $FA,$FA,$FA,$FA ; $04
      .BYTE $FA,$FA,$FA,$FA ; $08
      .BYTE $FA,$FA,$B0,$B1 ; $0C
      .BYTE $FA,$FA,$B0,$B1 ; $10
      .BYTE $FA,$FA,$B0,$B1 ; $14
      .BYTE $FA,$FA,$B0,$B1 ; $18
      .BYTE $FA,$FA,$B0,$B1 ; $1C
      .BYTE $FA,$FA,$B0,$B1 ; $20
      .BYTE $FA,$FA,$B0,$B1 ; $24
      .BYTE $FA,$FA,$B0,$B1 ; $28
      .BYTE $FA,$FA,$B0,$B1 ; $2C
      .BYTE $FA,$FA,$B0,$B1 ; $30
      .BYTE $FA,$FA,$B0,$B1 ; $34
      .BYTE $A0,$A2,$A1,$A3 ; $38
      .BYTE $80,$82,$81,$83 ; $3C
      .BYTE $F4,$86,$F5,$87 ; $40
      .BYTE $84,$86,$85,$87 ; $44
      .BYTE $FC,$FC,$FC,$FC ; $48
      .BYTE $AD,$FB,$AC,$AD ; $4C
      .BYTE $AC,$AC,$AC,$AC ; $50
      .BYTE $FB,$3B,$3B,$AC ; $54
      .BYTE $FC,$FC,$FC,$FC ; $58
      .BYTE $F4,$86,$F5,$87 ; $5C
      .BYTE $FB,$49,$49,$FB ; $60
      .BYTE $FE,$FE,$FE,$FE ; $64
      .BYTE $FE,$FE,$6D,$FE ; $68
      .BYTE $3C,$3E,$3D,$3F ; $6C
      .BYTE $58,$FD,$59,$5A ; $70
      .BYTE $5B,$5A,$FD,$FD ; $74
      .BYTE $5B,$5C,$FD,$5D ; $78
      .BYTE $FD,$FD,$5B,$5A ; $7C
      .BYTE $6C,$FE,$FE,$FE ; $80
      .BYTE $FE,$FE,$FE,$FE ; $84
      .BYTE $FE,$6E,$FE,$6F ; $88
      .BYTE $20,$22,$21,$23 ; $8C
      .BYTE $6E,$6F,$70,$71 ; $90
      .BYTE $57,$57,$FB,$FB ; $94
      .BYTE $57,$57,$FE,$FE ; $98
      .BYTE $D3,$D3,$FB,$FB ; $9C
      .BYTE $D2,$D2,$FB,$FB ; $A0
      .BYTE $7C,$7E,$7D,$7F ; $A4
      .BYTE $CA,$CC,$CB,$CD ; $A8
      .BYTE $CA,$CC,$CB,$CD ; $AC
      .BYTE $C0,$C2,$C1,$C3 ; $B0
      .BYTE $2C,$2E,$2D,$2F ; $B4
      .BYTE $8E,$8F,$8F,$8E ; $B8
      .BYTE $88,$8A,$89,$8B ; $BC
      .BYTE $89,$8B,$89,$8B ; $C0
      .BYTE $89,$8B,$8C,$8D ; $C4
      .BYTE $88,$8A,$8C,$8D ; $C8
      .BYTE $88,$8A,$89,$8B ; $CC
      .BYTE $88,$8A,$89,$8B ; $D0
      .BYTE $6A,$6C,$6B,$6D ; $D4
      .BYTE $6C,$6C,$6D,$6D ; $D8
      .BYTE $6C,$6E,$6D,$6F ; $DC
      .BYTE $6C,$54,$6D,$55 ; $E0
      .BYTE $32,$34,$33,$35 ; $E4
      .BYTE $33,$35,$33,$35 ; $E8

TileQuads3:
      .BYTE $94,$95,$94,$95 ; $00
      .BYTE $96,$97,$96,$97 ; $04
      .BYTE $48,$49,$48,$49 ; $08
      .BYTE $FE,$FE,$FE,$FE ; $0C
      .BYTE $FB,$32,$32,$33 ; $10
      .BYTE $33,$33,$33,$33 ; $14
      .BYTE $FD,$FD,$FD,$FD ; $18
      .BYTE $34,$FB,$FD,$34 ; $1C
      .BYTE $FB,$30,$FB,$FB ; $20
      .BYTE $FB,$FB,$31,$FB ; $24
      .BYTE $D0,$D0,$D0,$D0 ; $28
      .BYTE $D1,$D1,$D1,$D1 ; $2C
      .BYTE $64,$66,$65,$67 ; $30
      .BYTE $68,$6A,$69,$6B ; $34
      .BYTE $FA,$6C,$FA,$6C ; $38
      .BYTE $6D,$FA,$6D,$FA ; $3C
      .BYTE $92,$93,$93,$92 ; $40
      .BYTE $AE,$AF,$AE,$AF ; $44
      .BYTE $78,$7A,$79,$7B ; $48
      .BYTE $A8,$A8,$AF,$AE ; $4C
      .BYTE $94,$95,$94,$95 ; $50
      .BYTE $96,$97,$96,$97 ; $54
      .BYTE $22,$24,$23,$25 ; $58
      .BYTE $92,$93,$93,$92 ; $5C
      .BYTE $50,$51,$50,$51 ; $60
      .BYTE $AE,$AF,$AE,$AF ; $64
      .BYTE $50,$51,$50,$51 ; $68
      .BYTE $8E,$8F,$8F,$8E ; $6C
      .BYTE $72,$73,$73,$72 ; $70
      .BYTE $50,$52,$51,$53 ; $74
      .BYTE $FD,$FD,$FD,$FD ; $78
      .BYTE $FB,$36,$36,$4F ; $7C
      .BYTE $4F,$4E,$4E,$4F ; $80
      .BYTE $4E,$4F,$4F,$4E ; $84
      .BYTE $92,$93,$93,$92 ; $88
      .BYTE $8E,$8F,$8F,$8E ; $8C
      .BYTE $44,$45,$45,$44 ; $90
      .BYTE $4F,$37,$4E,$FE ; $94
      .BYTE $4F,$3A,$4E,$FE ; $98
      .BYTE $4F,$4E,$37,$38 ; $9C
      .BYTE $4A,$4B,$FE,$FE ; $A0
      .BYTE $72,$73,$4A,$4B ; $A4
      .BYTE $40,$42,$41,$43 ; $A8
      .BYTE $41,$43,$41,$43 ; $AC

TileQuads4:
      .BYTE $40,$42,$41,$43 ; $00
      .BYTE $40,$42,$41,$43 ; $04
      .BYTE $BA,$BC,$BB,$BD ; $08
      .BYTE $BA,$BC,$90,$91 ; $0C
      .BYTE $FA,$FA,$FA,$FA ; $10
      .BYTE $FA,$FA,$FA,$FA ; $14
      .BYTE $FD,$FD,$FD,$FD ; $18
      .BYTE $61,$63,$61,$63 ; $1C
      .BYTE $65,$63,$65,$63 ; $20
      .BYTE $65,$67,$65,$67 ; $24
      .BYTE $60,$62,$61,$63 ; $28
      .BYTE $32,$34,$33,$35 ; $2C
      .BYTE $64,$62,$65,$63 ; $30
      .BYTE $36,$34,$37,$35 ; $34
      .BYTE $64,$66,$65,$67 ; $38
      .BYTE $36,$38,$37,$39 ; $3C
      .BYTE $68,$62,$61,$63 ; $40
      .BYTE $64,$69,$65,$67 ; $44
      .BYTE $46,$62,$61,$63 ; $48
      .BYTE $64,$47,$65,$67 ; $4C
      .BYTE $BA,$BC,$BB,$BD ; $50
      .BYTE $70,$72,$71,$73 ; $54
      .BYTE $8E,$8F,$8F,$8E ; $58
      .BYTE $72,$73,$73,$72 ; $5C
      .BYTE $44,$45,$45,$44 ; $60

EndOfLevelDoor: ; PPU data
      .BYTE $22,$D0,$04,$FC,$FC,$AD,$FA
      .BYTE $22,$F0,$04,$FC,$FC,$AC,$AD
      .BYTE $23,$10,$06,$FC,$FC,$AC,$AC,$AD,$FA
      .BYTE $23,$30,$06,$FC,$FC,$AC,$AC,$AC,$AD
      .BYTE $00

EndOfLevelDoorRowOffsets:
      .BYTE $00
      .BYTE $07
      .BYTE $0E
      .BYTE $17

DefaultCHRAnimationSpeed_Level:
      .BYTE $00 ; 1-1
      .BYTE $00 ; 1-1
      .BYTE $06 ; 3-1
      .BYTE $06 ; 3-1
      .BYTE $0A ; 4-2
      .BYTE $0A ; 4-2
      .BYTE $0B ; 4-3
      .BYTE $0D ; 5-2
      .BYTE $0E ; 5-3
      .BYTE $11 ; 6-3
      .BYTE $11 ; 6-3
      .BYTE $12 ; 7-1
      .BYTE $12 ; 7-1
      .BYTE $12 ; 7-1
      .BYTE $12 ; 7-1
      .BYTE $13 ; 7-2

DefaultCHRAnimationSpeed_Area:
      .BYTE $01 ; 1-1 upward climb
      .BYTE $05 ; 1-1 birdo
      .BYTE $01 ; 3-1 main part
      .BYTE $03 ; 3-1 sky part
      .BYTE $01 ; 4-2 sky ice
      .BYTE $02 ; 4-2 whales
      .BYTE $04 ; 4-3 tower tops
      .BYTE $02 ; 5-2 upward climb
      .BYTE $04 ; 5-3 miniboss birdo
      .BYTE $03 ; 6-3 upward climb
      .BYTE $04 ; 6-3 sky pyramid
      .BYTE $00 ; 7-1 beginning area
      .BYTE $01 ; 7-1 albatoss area
      .BYTE $02 ; 7-1 cloud maze
      .BYTE $03 ; 7-1 upward climb
      .BYTE $00 ; 7-2 entrance

BackgroundCHRAnimationSpeedByWorld:
      .BYTE $07 ; World 1
      .BYTE $07 ; World 2
      .BYTE $07 ; World 3
      .BYTE $07 ; World 4
      .BYTE $09 ; World 5
      .BYTE $07 ; World 6
      .BYTE $05 ; World 7
      .BYTE $0B ; Default


;
; Increments the frame of the CHR animation using the world/area speed
;
AnimateCHRRoutine:
      DEC     BackgroundCHR2Timer
      BPL     AnimateCHRRoutine_Exit

      LDX     #$07 ; default index for animation speed table

      ; Certain level/area combinations use a fixed animation speed.
      ; It seems to be used in areas that prominently feature cloud platforms.
      ; This loop performs the lookup to see if that should happen.
      LDY     #(DefaultCHRAnimationSpeed_Area - DefaultCHRAnimationSpeed_Level - 1)
AnimateCHRRoutine_DefaultSpeedLoop:
      LDA     CurrentLevel_Init
      CMP     DefaultCHRAnimationSpeed_Level,Y
      BNE     AnimateCHRRoutine_DefaultSpeedNext

      LDA     CurrentLevelArea_Init
      CMP     DefaultCHRAnimationSpeed_Area,Y
      BEQ     AnimateCHRRoutine_SetSpeed

AnimateCHRRoutine_DefaultSpeedNext:
      DEY
      BPL     AnimateCHRRoutine_DefaultSpeedLoop

      LDX     CurrentWorld

AnimateCHRRoutine_SetSpeed:
      LDA     BackgroundCHRAnimationSpeedByWorld,X
      STA     BackgroundCHR2Timer
      LDY     BackgroundCHR2
      INY
      INY

IFDEF FIX_CHR_CYCLE
      CPY     #CHRBank_Animated8+1
ENDIF
IFNDEF FIX_CHR_CYCLE
      ; Bug: This is in the original game
      ; The last frame of the animation is effectively skipped because
      ; we immediately reset to the first frame when we hit it.
      CPY     #CHRBank_Animated8
ENDIF

      BCC     AnimateCHRRoutine_SetCHR

      LDY     #CHRBank_Animated1

AnimateCHRRoutine_SetCHR:
      STY     BackgroundCHR2

AnimateCHRRoutine_Exit:
      RTS


; ---------------------------------------------------------------------------

loc_BANKF_FAFE:
      LDX     #$08 ; @TODO Something to with drawing certain sprites?

loc_BANKF_FB00:
      LDA     EnemyState,X
      BEQ     loc_BANKF_FB1C

loc_BANKF_FB04:
      DEX
      BPL     loc_BANKF_FB00

      LDY     #$00
      LDA     SpriteDMAArea,Y
      CMP     #$F8
      BNE     loc_BANKF_FB17

      LDA     SpriteDMAArea+4,Y
      CMP     #$F8
      BEQ     loc_BANKF_FB19

loc_BANKF_FB17:
      LDY     #$10

loc_BANKF_FB19:
      LDX     byte_RAM_12
      RTS

; ---------------------------------------------------------------------------

loc_BANKF_FB1C:
      TXA
      CLC
      ADC     SpriteFlickerSlot
      TAY
      LDA     byte_BANKF_F4DA,Y
      TAY
      LDA     SpriteDMAArea,Y
      CMP     #$F8
      BNE     loc_BANKF_FB04

      LDA     SpriteDMAArea+4,Y
      CMP     #$F8
      BNE     loc_BANKF_FB04
      BEQ     loc_BANKF_FB19


IFDEF PRESERVE_UNUSED_SPACE
; Unused space in the original
; $FB36 - $FDFF
      .pad $FE00, $FF
ENDIF


CHRBank_WorldEnemies:
      .BYTE CHRBank_EnemiesGrass
      .BYTE CHRBank_EnemiesDesert
      .BYTE CHRBank_EnemiesGrass
      .BYTE CHRBank_EnemiesIce
      .BYTE CHRBank_EnemiesGrass
      .BYTE CHRBank_EnemiesDesert
      .BYTE CHRBank_EnemiesSky

CHRBank_WorldBossBackground:
      .BYTE CHRBank_BackgroundGrass
      .BYTE CHRBank_BackgroundDesert
      .BYTE CHRBank_BackgroundGrass
      .BYTE CHRBank_BackgroundIce
      .BYTE CHRBank_BackgroundGrassClawgrip
      .BYTE CHRBank_BackgroundDesert
      .BYTE CHRBank_BackgroundSky

CHRBank_CharacterSize:
      .BYTE CHRBank_Mario
      .BYTE CHRBank_MarioSmall
      .BYTE CHRBank_Princess
      .BYTE CHRBank_PrincessSmall
      .BYTE CHRBank_Toad
      .BYTE CHRBank_ToadSmall
      .BYTE CHRBank_Luigi
      .BYTE CHRBank_LuigiSmall


LoadWorldCHRBanks:
      LDY     #CHRBank_CommonEnemies1
      STY     SpriteCHR2
      INY
      STY     SpriteCHR3
      LDY     CurrentWorld
      LDA     CHRBank_WorldEnemies,Y
      STA     SpriteCHR4
      LDA     CHRBank_WorldBossBackground,Y
      STA     BackgroundCHR1
      LDA     #CHRBank_Animated1
      STA     BackgroundCHR2

LoadCharacterCHRBanks:
      LDA     CurrentCharacter
      ASL     A
      ORA     PlayerCurrentSize
      TAY
      LDA     CHRBank_CharacterSize,Y
      STA     SpriteCHR1
      RTS


LoadTitleScreenCHRBanks:
      LDA     #CHRBank_TitleScreenBG1
      STA     BackgroundCHR1
      LDA     #CHRBank_TitleScreenBG2
      STA     BackgroundCHR2
      RTS


LoadCelebrationSceneBackgroundCHR:
      LDA     #CHRBank_CelebrationBG1
      STA     BackgroundCHR1
      LDA     #CHRBank_CelebrationBG2
      STA     BackgroundCHR2
      RTS


LoadCharacterSelectCHRBanks:
      LDA     #CHRBank_CharacterSelectSprites
      STA     SpriteCHR1
      LDA     #CHRBank_CharacterSelectBG1
      STA     BackgroundCHR1
      LDA     #CHRBank_CharacterSelectBG2
      STA     BackgroundCHR2
      RTS


TitleCardCHRBanks:
      .BYTE CHRBank_TitleCardGrass
      .BYTE CHRBank_TitleCardDesert
      .BYTE CHRBank_TitleCardGrass
      .BYTE CHRBank_TitleCardIce
      .BYTE CHRBank_TitleCardGrass
      .BYTE CHRBank_TitleCardDesert
      .BYTE CHRBank_TitleCardSky


ChangeTitleCardCHR:
      LDY     CurrentWorld
      LDA     TitleCardCHRBanks,Y
      STA     BackgroundCHR2
      RTS


LoadBonusChanceCHRBanks:
      LDA     #CHRBank_ChanceBG1
      STA     BackgroundCHR1
      LDA     #CHRBank_ChanceBG2
      STA     BackgroundCHR2
      RTS


LoadMarioSleepingCHRBanks:
      LDY     #CHRBank_EndingSprites
      STY     SpriteCHR1
      INY
      STY     SpriteCHR2
      LDA     #CHRBank_EndingBackground1
      STA     BackgroundCHR1
      LDA     #CHRBank_EndingBackground1+2
      STA     BackgroundCHR2
      RTS


IFDEF PRESERVE_UNUSED_SPACE
; Unused space in the original
; $FE97 - $FF4F
      .pad $FF50, $FF
ENDIF


; public RESET
; This code is called when the NES is reset
RESET:
      SEI
      CLD
      LDA     #PPUCtrl_Base2000|PPUCtrl_WriteHorizontal|PPUCtrl_Sprite0000|PPUCtrl_Background0000|PPUCtrl_SpriteSize8x8|PPUCtrl_NMIDisabled
      STA     PPUCTRL
      LDX     #$FF ; Reset stack pointer
      TXS

RESET_VBlankLoop:
      ; Wait for first VBlank
      LDA     PPUSTATUS
      AND     #PPUStatus_VBlankHit
      BEQ     RESET_VBlankLoop

RESET_VBlank2Loop:
      ; Wait for second VBlank
      LDA     PPUSTATUS
      BPL     RESET_VBlank2Loop

IFDEF DEBUG
      LDA     #$00
      STA     Debug_InMenu
ENDIF

      LDA     #VMirror
      STA     NametableMapping
      LDA     #$80
      STA     $A001
      JMP     StartGame


IFNDEF MMC5
;
; Switches the current CHR banks
;
ChangeCHRBanks:
      LDY     #$05
ChangeCHRBanks_Loop:
      TYA
      ORA     #$80
      STA     $8000
      LDA     BackgroundCHR1,Y
      STA     $8001
      DEY
      BPL     ChangeCHRBanks_Loop

      RTS
ENDIF

IFDEF MMC5
;
; Switches the current CHR banks
;
ChangeCHRBanks:
      JMP      ChangeCHRBanks_MMC5
IFDEF PRESERVE_UNUSED_SPACE
      ; Maintain location of the next subroutine
      .pad $FF85, $FF
ENDIF
ENDIF


;
; Calling this one will save the changed bank
; to RAM, so if something uses the below version
; the original bank set with this can be restored.
;
ChangeMappedPRGBank:
      STA     MMC3PRGBankTemp ; See below comment.

;
; Any call to this sub switches the lower two banks together, eg:
; LDA 0 JSR Change... = Bank 0/1
; LDA 1 JSR Change... = Bank 2/3
; etc.
;
; This version changes the bank numbers without
; saving the change to RAM, so the previous bank
; can be recalled later (mostly for temporary switches,
; like music handling and such)
;
ChangeMappedPRGBankWithoutSaving:
      ASL     A
IFNDEF MMC5
      PHA
      LDA     #$86
      STA     $8000
      PLA
      STA     $8001 ; Change first bank
      ORA     #$01 ; Use the bank right after this one next
      PHA
      LDA     #$87
      STA     $8000
      PLA
      STA     $8001 ; Change second bank
      RTS
ENDIF
IFDEF MMC5
      ORA     #$80
      STA     $5114
      ORA     #$01
      STA     $5115
      RTS

IFDEF PRESERVE_UNUSED_SPACE
      ; Maintain location of the next subroutine
      .pad $FFA0, $FF
ENDIF

ENDIF


;
; Writing to $A000 sets mirroring.
;   A = $00 for vertical
;   A = $01 for horizontal
;
ChangeNametableMirroring:
      STA     NametableMapping
      RTS


IFDEF PRESERVE_UNUSED_SPACE
; Unused space in the original
; $FFA4 - $FFEA
      .pad $FFEB, $FF
ENDIF

; Technically you can delete the stuff from here to the vector table as well,
; but because it looks slightly less like unused space it isn't being removed.

; Not used; leftover part of FamicomBox cart title?
UnusedTextZELDA:
      .BYTE 'ZELDA'

; Note that this is NOT CODE.
; If the NES actually hits a BRK, the game will probably just explode.
; If you wanted, you could write  some sort of crash handler though.
IRQ:
      .BYTE $DF
      .BYTE $E6
      .BYTE $00
      .BYTE $00
      .BYTE $38
      .BYTE $04
      .BYTE $01
      .BYTE $04
      .BYTE $01
      .BYTE $BE

; Ensure our vectors are always here
      .pad $FFFA, $FF

; Vectors for the NES CPU. These should ALWAYS be at $FFFA!
; Add a .pad or .base before here if you change code above.
; NMI = VBlank
; RESET = ...well, reset.
; IRQ is not used, but you could if you wanted.
NESVectorTables:
      .WORD NMI
IFNDEF MMC5
      .WORD RESET
ENDIF
IFDEF MMC5
      .WORD RESET_MMC5
ENDIF
      .WORD IRQ
